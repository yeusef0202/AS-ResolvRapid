{
  "version": 3,
  "sources": ["../../xml-utils/get-attribute.js", "../../xml-utils/index-of-match.js", "../../xml-utils/index-of-match-end.js", "../../xml-utils/count-substring.js", "../../xml-utils/find-tag-by-name.js", "../../xml-utils/find-tags-by-name.js", "browser-external:http", "browser-external:https", "browser-external:url", "browser-external:fs", "../../ol/source/BingMaps.js", "../../ol/source/CartoDB.js", "../../ol/source/Cluster.js", "../../ol/source/DataTile.js", "../../@petamoriken/float16/src/_util/messages.mjs", "../../@petamoriken/float16/src/_util/primordials.mjs", "../../@petamoriken/float16/src/_util/arrayIterator.mjs", "../../@petamoriken/float16/src/_util/is.mjs", "../../@petamoriken/float16/src/_util/brand.mjs", "../../@petamoriken/float16/src/_util/converter.mjs", "../../@petamoriken/float16/src/_util/spec.mjs", "../../@petamoriken/float16/src/Float16Array.mjs", "../../@petamoriken/float16/src/DataView.mjs", "../../geotiff/dist-module/geotiffimage.js", "../../geotiff/dist-module/rgb.js", "../../geotiff/dist-module/compression/index.js", "../../geotiff/dist-module/resample.js", "../../geotiff/dist-module/dataview64.js", "../../geotiff/dist-module/dataslice.js", "../../geotiff/dist-module/pool.js", "../../geotiff/dist-module/source/httputils.js", "../../geotiff/dist-module/source/basesource.js", "../../quick-lru/index.js", "../../geotiff/dist-module/utils.js", "../../geotiff/dist-module/source/blockedsource.js", "../../geotiff/dist-module/source/client/base.js", "../../geotiff/dist-module/source/client/fetch.js", "../../geotiff/dist-module/source/client/xhr.js", "../../geotiff/dist-module/source/client/http.js", "../../geotiff/dist-module/source/remote.js", "../../geotiff/dist-module/source/filereader.js", "../../geotiff/dist-module/source/file.js", "../../geotiff/dist-module/geotiffwriter.js", "../../geotiff/dist-module/logging.js", "../../geotiff/dist-module/geotiff.js", "../../ol/source/GeoTIFF.js", "../../ol/source/Zoomify.js", "../../ol/format/IIIFInfo.js", "../../ol/source/IIIF.js", "../../ol/uri.js", "../../ol/source/ImageArcGISRest.js", "../../ol/source/ImageCanvas.js", "../../ol/source/ImageMapGuide.js", "../../ol/source/ImageStatic.js", "../../ol/source/wms.js", "../../ol/source/ImageWMS.js", "../../ol/source/Stamen.js", "../../ol/source/TileArcGISRest.js", "../../ol/source/TileDebug.js", "../../ol/source/TileWMS.js", "../../ol/source/UTFGrid.js", "../../ol/source/WMTS.js", "../../ol/source.js"],
  "sourcesContent": ["function getAttribute(tag, attributeName, options) {\r\n  const debug = (options && options.debug) || false;\r\n  if (debug) console.log(\"[xml-utils] getting \" + attributeName + \" in \" + tag);\r\n\r\n  const xml = typeof tag === \"object\" ? tag.outer : tag;\r\n\r\n  // only search for attributes in the opening tag\r\n  const opening = xml.slice(0, xml.indexOf(\">\") + 1);\r\n\r\n  const quotechars = ['\"', \"'\"];\r\n  for (let i = 0; i < quotechars.length; i++) {\r\n    const char = quotechars[i];\r\n    const pattern = attributeName + \"\\\\=\" + char + \"([^\" + char + \"]*)\" + char;\r\n    if (debug) console.log(\"[xml-utils] pattern:\", pattern);\r\n\r\n    const re = new RegExp(pattern);\r\n    const match = re.exec(opening);\r\n    if (debug) console.log(\"[xml-utils] match:\", match);\r\n    if (match) return match[1];\r\n  }\r\n}\r\n\r\nmodule.exports = getAttribute;\r\nmodule.exports.default = getAttribute;\r\n", "function indexOfMatch(xml, pattern, startIndex) {\r\n  const re = new RegExp(pattern);\r\n  const match = re.exec(xml.slice(startIndex));\r\n  if (match) return startIndex + match.index;\r\n  else return -1;\r\n}\r\n\r\nmodule.exports = indexOfMatch;\r\nmodule.exports.default = indexOfMatch;\r\n", "function indexOfMatchEnd(xml, pattern, startIndex) {\r\n  const re = new RegExp(pattern);\r\n  const match = re.exec(xml.slice(startIndex));\r\n  if (match) return startIndex + match.index + match[0].length - 1;\r\n  else return -1;\r\n}\r\n\r\nmodule.exports = indexOfMatchEnd;\r\nmodule.exports.default = indexOfMatchEnd;\r\n", "function countSubstring(string, substring) {\r\n  const pattern = new RegExp(substring, \"g\");\r\n  const match = string.match(pattern);\r\n  return match ? match.length : 0;\r\n}\r\n\r\nmodule.exports = countSubstring;\r\nmodule.exports.default = countSubstring;\r\n", "const indexOfMatch = require(\"./index-of-match.js\");\r\nconst indexOfMatchEnd = require(\"./index-of-match-end.js\");\r\nconst countSubstring = require(\"./count-substring.js\");\r\n\r\nfunction findTagByName(xml, tagName, options) {\r\n  const debug = (options && options.debug) || false;\r\n  const nested = !(options && typeof options.nested === false);\r\n\r\n  const startIndex = (options && options.startIndex) || 0;\r\n\r\n  if (debug) console.log(\"[xml-utils] starting findTagByName with\", tagName, \" and \", options);\r\n\r\n  const start = indexOfMatch(xml, `\\<${tagName}[ \\n\\>\\/]`, startIndex);\r\n  if (debug) console.log(\"[xml-utils] start:\", start);\r\n  if (start === -1) return undefined;\r\n\r\n  const afterStart = xml.slice(start + tagName.length);\r\n\r\n  let relativeEnd = indexOfMatchEnd(afterStart, \"^[^<]*[ /]>\", 0);\r\n\r\n  const selfClosing = relativeEnd !== -1 && afterStart[relativeEnd - 1] === \"/\";\r\n  if (debug) console.log(\"[xml-utils] selfClosing:\", selfClosing);\r\n\r\n  if (selfClosing === false) {\r\n    // check if tag has subtags with the same name\r\n    if (nested) {\r\n      let startIndex = 0;\r\n      let openings = 1;\r\n      let closings = 0;\r\n      while ((relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", startIndex)) !== -1) {\r\n        const clip = afterStart.substring(startIndex, relativeEnd + 1);\r\n        openings += countSubstring(clip, \"<\" + tagName + \"[ \\n\\t>]\");\r\n        closings += countSubstring(clip, \"</\" + tagName + \">\");\r\n        // we can't have more openings than closings\r\n        if (closings >= openings) break;\r\n        startIndex = relativeEnd;\r\n      }\r\n    } else {\r\n      relativeEnd = indexOfMatchEnd(afterStart, \"[ /]\" + tagName + \">\", 0);\r\n    }\r\n  }\r\n\r\n  const end = start + tagName.length + relativeEnd + 1;\r\n  if (debug) console.log(\"[xml-utils] end:\", end);\r\n  if (end === -1) return undefined;\r\n\r\n  const outer = xml.slice(start, end);\r\n  // tag is like <gml:identifier codeSpace=\"OGP\">urn:ogc:def:crs:EPSG::32617</gml:identifier>\r\n\r\n  let inner;\r\n  if (selfClosing) {\r\n    inner = null;\r\n  } else {\r\n    inner = outer.slice(outer.indexOf(\">\") + 1, outer.lastIndexOf(\"<\"));\r\n  }\r\n\r\n  return { inner, outer, start, end };\r\n}\r\n\r\nmodule.exports = findTagByName;\r\nmodule.exports.default = findTagByName;\r\n", "const findTagByName = require(\"./find-tag-by-name.js\");\r\n\r\nfunction findTagsByName(xml, tagName, options) {\r\n  const tags = [];\r\n  const debug = (options && options.debug) || false;\r\n  const nested = options && typeof options.nested === \"boolean\" ? options.nested : true;\r\n  let startIndex = (options && options.startIndex) || 0;\r\n  let tag;\r\n  while ((tag = findTagByName(xml, tagName, { debug, startIndex }))) {\r\n    if (nested) {\r\n      startIndex = tag.start + 1 + tagName.length;\r\n    } else {\r\n      startIndex = tag.end;\r\n    }\r\n    tags.push(tag);\r\n  }\r\n  if (debug) console.log(\"findTagsByName found\", tags.length, \"tags\");\r\n  return tags;\r\n}\r\n\r\nmodule.exports = findTagsByName;\r\nmodule.exports.default = findTagsByName;\r\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "/**\r\n * @module ol/source/BingMaps\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {applyTransform, intersects} from '../extent.js';\r\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\r\nimport {createOrUpdate} from '../tilecoord.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\r\n\r\n/**\r\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\r\n * @return {string} Quad key.\r\n */\r\nexport function quadKey(tileCoord) {\r\n  const z = tileCoord[0];\r\n  const digits = new Array(z);\r\n  let mask = 1 << (z - 1);\r\n  let i, charCode;\r\n  for (i = 0; i < z; ++i) {\r\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\r\n    charCode = 48;\r\n    if (tileCoord[1] & mask) {\r\n      charCode += 1;\r\n    }\r\n    if (tileCoord[2] & mask) {\r\n      charCode += 2;\r\n    }\r\n    digits[i] = String.fromCharCode(charCode);\r\n    mask >>= 1;\r\n  }\r\n  return digits.join('');\r\n}\r\n\r\n/**\r\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\r\n * Terms Of Use.\r\n * @const\r\n * @type {string}\r\n */\r\nconst TOS_ATTRIBUTION =\r\n  '<a class=\"ol-attribution-bing-tos\" ' +\r\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\r\n  'Terms of Use</a>';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\r\n * @property {string} [culture='en-us'] Culture code.\r\n * @property {string} key Bing Maps API key. Get yours at https://www.bingmapsportal.com/.\r\n * @property {string} imagerySet Type of imagery.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @typedef {Object} BingMapsImageryMetadataResponse\r\n * @property {number} statusCode The response status code\r\n * @property {string} statusDescription The response status description\r\n * @property {string} authenticationResultCode The authentication result code\r\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\r\n */\r\n\r\n/**\r\n * @typedef {Object} ResourceSet\r\n * @property {Array<Resource>} resources Resources.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Resource\r\n * @property {number} imageHeight The image height\r\n * @property {number} imageWidth The image width\r\n * @property {number} zoomMin The minimum zoom level\r\n * @property {number} zoomMax The maximum zoom level\r\n * @property {string} imageUrl The image URL\r\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\r\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\r\n */\r\n\r\n/**\r\n * @typedef {Object} ImageryProvider\r\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\r\n * @property {string} [attribution] The attribution\r\n */\r\n\r\n/**\r\n * @typedef {Object} CoverageArea\r\n * @property {number} zoomMin The minimum zoom\r\n * @property {number} zoomMax The maximum zoom\r\n * @property {Array<number>} bbox The coverage bounding box\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for Bing Maps tile data.\r\n * @api\r\n */\r\nclass BingMaps extends TileImage {\r\n  /**\r\n   * @param {Options} options Bing Maps options.\r\n   */\r\n  constructor(options) {\r\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\r\n\r\n    super({\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: 'anonymous',\r\n      interpolate: options.interpolate,\r\n      opaque: true,\r\n      projection: getProjection('EPSG:3857'),\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      state: 'loading',\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      tilePixelRatio: hidpi ? 2 : 1,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = hidpi;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.apiKey_ = options.key;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.imagerySet_ = options.imagerySet;\r\n\r\n    const url =\r\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\r\n      this.imagerySet_ +\r\n      '?uriScheme=https&include=ImageryProviders&key=' +\r\n      this.apiKey_ +\r\n      '&c=' +\r\n      this.culture_;\r\n\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((json) => this.handleImageryMetadataResponse(json));\r\n  }\r\n\r\n  /**\r\n   * Get the api key used for this source.\r\n   *\r\n   * @return {string} The api key.\r\n   * @api\r\n   */\r\n  getApiKey() {\r\n    return this.apiKey_;\r\n  }\r\n\r\n  /**\r\n   * Get the imagery set associated with this source.\r\n   *\r\n   * @return {string} The imagery set.\r\n   * @api\r\n   */\r\n  getImagerySet() {\r\n    return this.imagerySet_;\r\n  }\r\n\r\n  /**\r\n   * @param {BingMapsImageryMetadataResponse} response Response.\r\n   */\r\n  handleImageryMetadataResponse(response) {\r\n    if (\r\n      response.statusCode != 200 ||\r\n      response.statusDescription != 'OK' ||\r\n      response.authenticationResultCode != 'ValidCredentials' ||\r\n      response.resourceSets.length != 1 ||\r\n      response.resourceSets[0].resources.length != 1\r\n    ) {\r\n      this.setState('error');\r\n      return;\r\n    }\r\n\r\n    const resource = response.resourceSets[0].resources[0];\r\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\r\n\r\n    const sourceProjection = this.getProjection();\r\n    const extent = extentFromProjection(sourceProjection);\r\n    const scale = this.hidpi_ ? 2 : 1;\r\n    const tileSize =\r\n      resource.imageWidth == resource.imageHeight\r\n        ? resource.imageWidth / scale\r\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\r\n\r\n    const tileGrid = createXYZ({\r\n      extent: extent,\r\n      minZoom: resource.zoomMin,\r\n      maxZoom: maxZoom,\r\n      tileSize: tileSize,\r\n    });\r\n    this.tileGrid = tileGrid;\r\n\r\n    const culture = this.culture_;\r\n    const hidpi = this.hidpi_;\r\n    this.tileUrlFunction = createFromTileUrlFunctions(\r\n      resource.imageUrlSubdomains.map(function (subdomain) {\r\n        /** @type {import('../tilecoord.js').TileCoord} */\r\n        const quadKeyTileCoord = [0, 0, 0];\r\n        const imageUrl = resource.imageUrl\r\n          .replace('{subdomain}', subdomain)\r\n          .replace('{culture}', culture);\r\n        return (\r\n          /**\r\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n           * @param {number} pixelRatio Pixel ratio.\r\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n           * @return {string|undefined} Tile URL.\r\n           */\r\n          function (tileCoord, pixelRatio, projection) {\r\n            if (!tileCoord) {\r\n              return undefined;\r\n            }\r\n            createOrUpdate(\r\n              tileCoord[0],\r\n              tileCoord[1],\r\n              tileCoord[2],\r\n              quadKeyTileCoord\r\n            );\r\n            let url = imageUrl;\r\n            if (hidpi) {\r\n              url += '&dpi=d1&device=mobile';\r\n            }\r\n            return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\r\n          }\r\n        );\r\n      })\r\n    );\r\n\r\n    if (resource.imageryProviders) {\r\n      const transform = getTransformFromProjections(\r\n        getProjection('EPSG:4326'),\r\n        this.getProjection()\r\n      );\r\n\r\n      this.setAttributions((frameState) => {\r\n        const attributions = [];\r\n        const viewState = frameState.viewState;\r\n        const tileGrid = this.getTileGrid();\r\n        const z = tileGrid.getZForResolution(\r\n          viewState.resolution,\r\n          this.zDirection\r\n        );\r\n        const tileCoord = tileGrid.getTileCoordForCoordAndZ(\r\n          viewState.center,\r\n          z\r\n        );\r\n        const zoom = tileCoord[0];\r\n        resource.imageryProviders.map(function (imageryProvider) {\r\n          let intersecting = false;\r\n          const coverageAreas = imageryProvider.coverageAreas;\r\n          for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\r\n            const coverageArea = coverageAreas[i];\r\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\r\n              const bbox = coverageArea.bbox;\r\n              const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\r\n              const extent = applyTransform(epsg4326Extent, transform);\r\n              if (intersects(extent, frameState.extent)) {\r\n                intersecting = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          if (intersecting) {\r\n            attributions.push(imageryProvider.attribution);\r\n          }\r\n        });\r\n\r\n        attributions.push(TOS_ATTRIBUTION);\r\n        return attributions;\r\n      });\r\n    }\r\n\r\n    this.setState('ready');\r\n  }\r\n}\r\n\r\nexport default BingMaps;\r\n", "/**\r\n * @module ol/source/CartoDB\r\n */\r\n\r\nimport XYZ from './XYZ.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\r\n * @property {number} [maxZoom=18] Max zoom.\r\n * @property {number} [minZoom] Minimum zoom.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {Object} [config] If using anonymous maps, the CartoDB config to use. See\r\n * https://carto.com/developers/maps-api/guides/anonymous-maps/\r\n * for more detail.\r\n * If using named maps, a key-value lookup with the template parameters.\r\n * See https://carto.com/developers/maps-api/guides/named-maps/\r\n * for more detail.\r\n * @property {string} [map] If using named maps, this will be the name of the template to load.\r\n * See https://carto.com/developers/maps-api/guides/named-maps/\r\n * for more detail.\r\n * @property {string} [account] Username as used to access public Carto dashboard at https://{username}.carto.com/.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @typedef {Object} CartoDBLayerInfo\r\n * @property {string} layergroupid The layer group ID\r\n * @property {{https: string}} cdn_url The CDN URL\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for the CartoDB Maps API.\r\n * @api\r\n */\r\nclass CartoDB extends XYZ {\r\n  /**\r\n   * @param {Options} options CartoDB options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 18,\r\n      minZoom: options.minZoom,\r\n      projection: options.projection,\r\n      transition: options.transition,\r\n      wrapX: options.wrapX,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.account_ = options.account;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.mapId_ = options.map || '';\r\n\r\n    /**\r\n     * @type {!Object}\r\n     * @private\r\n     */\r\n    this.config_ = options.config || {};\r\n\r\n    /**\r\n     * @type {!Object<string, CartoDBLayerInfo>}\r\n     * @private\r\n     */\r\n    this.templateCache_ = {};\r\n\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Returns the current config.\r\n   * @return {!Object} The current configuration.\r\n   * @api\r\n   */\r\n  getConfig() {\r\n    return this.config_;\r\n  }\r\n\r\n  /**\r\n   * Updates the carto db config.\r\n   * @param {Object} config a key-value lookup. Values will replace current values\r\n   *     in the config.\r\n   * @api\r\n   */\r\n  updateConfig(config) {\r\n    Object.assign(this.config_, config);\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Sets the CartoDB config\r\n   * @param {Object} config In the case of anonymous maps, a CartoDB configuration\r\n   *     object.\r\n   * If using named maps, a key-value lookup with the template parameters.\r\n   * @api\r\n   */\r\n  setConfig(config) {\r\n    this.config_ = config || {};\r\n    this.initializeMap_();\r\n  }\r\n\r\n  /**\r\n   * Issue a request to initialize the CartoDB map.\r\n   * @private\r\n   */\r\n  initializeMap_() {\r\n    const paramHash = JSON.stringify(this.config_);\r\n    if (this.templateCache_[paramHash]) {\r\n      this.applyTemplate_(this.templateCache_[paramHash]);\r\n      return;\r\n    }\r\n    let mapUrl = 'https://' + this.account_ + '.carto.com/api/v1/map';\r\n\r\n    if (this.mapId_) {\r\n      mapUrl += '/named/' + this.mapId_;\r\n    }\r\n\r\n    const client = new XMLHttpRequest();\r\n    client.addEventListener(\r\n      'load',\r\n      this.handleInitResponse_.bind(this, paramHash)\r\n    );\r\n    client.addEventListener('error', this.handleInitError_.bind(this));\r\n    client.open('POST', mapUrl);\r\n    client.setRequestHeader('Content-type', 'application/json');\r\n    client.send(JSON.stringify(this.config_));\r\n  }\r\n\r\n  /**\r\n   * Handle map initialization response.\r\n   * @param {string} paramHash a hash representing the parameter set that was used\r\n   *     for the request\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleInitResponse_(paramHash, event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n      let response;\r\n      try {\r\n        response = /** @type {CartoDBLayerInfo} */ (\r\n          JSON.parse(client.responseText)\r\n        );\r\n      } catch (err) {\r\n        this.setState('error');\r\n        return;\r\n      }\r\n      this.applyTemplate_(response);\r\n      this.templateCache_[paramHash] = response;\r\n      this.setState('ready');\r\n    } else {\r\n      this.setState('error');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event Event.\r\n   */\r\n  handleInitError_(event) {\r\n    this.setState('error');\r\n  }\r\n\r\n  /**\r\n   * Apply the new tile urls returned by carto db\r\n   * @param {CartoDBLayerInfo} data Result of carto db call.\r\n   * @private\r\n   */\r\n  applyTemplate_(data) {\r\n    const tilesUrl =\r\n      'https://' +\r\n      data.cdn_url.https +\r\n      '/' +\r\n      this.account_ +\r\n      '/api/v1/map/' +\r\n      data.layergroupid +\r\n      '/{z}/{x}/{y}.png';\r\n    this.setUrl(tilesUrl);\r\n  }\r\n}\r\n\r\nexport default CartoDB;\r\n", "/**\r\n * @module ol/source/Cluster\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport Feature from '../Feature.js';\r\nimport Point from '../geom/Point.js';\r\nimport VectorSource from './Vector.js';\r\nimport {add as addCoordinate, scale as scaleCoordinate} from '../coordinate.js';\r\nimport {assert} from '../asserts.js';\r\nimport {\r\n  buffer,\r\n  createEmpty,\r\n  createOrUpdateFromCoordinate,\r\n  getCenter,\r\n} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [distance=20] Distance in pixels within which features will\r\n * be clustered together.\r\n * @property {number} [minDistance=0] Minimum distance in pixels between clusters.\r\n * Will be capped at the configured distance.\r\n * By default no minimum distance is guaranteed. This config can be used to avoid\r\n * overlapping icons. As a tradoff, the cluster feature's position will no longer be\r\n * the center of all its features.\r\n * @property {function(Feature):Point} [geometryFunction]\r\n * Function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Point~Point} as cluster calculation point for the feature. When a\r\n * feature should not be considered for clustering, the function should return\r\n * `null`. The default, which works when the underlying source contains point\r\n * features only, is\r\n * ```js\r\n * function(feature) {\r\n *   return feature.getGeometry();\r\n * }\r\n * ```\r\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\r\n * calculation point for polygons.\r\n * @property {function(Point, Array<Feature>):Feature} [createCluster]\r\n * Function that takes the cluster's center {@link module:ol/geom/Point~Point} and an array\r\n * of {@link module:ol/Feature~Feature} included in this cluster. Must return a\r\n * {@link module:ol/Feature~Feature} that will be used to render. Default implementation is:\r\n * ```js\r\n * function(point, features) {\r\n *   return new Feature({\r\n *     geometry: point,\r\n *     features: features\r\n *   });\r\n * }\r\n * ```\r\n * @property {VectorSource} [source=null] Source.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source to cluster vector data. Works out of the box with point\r\n * geometries. For other geometry types, or if not all geometries should be\r\n * considered for clustering, a custom `geometryFunction` can be defined.\r\n *\r\n * If the instance is disposed without also disposing the underlying\r\n * source `setSource(null)` has to be called to remove the listener reference\r\n * from the wrapped source.\r\n * @api\r\n */\r\nclass Cluster extends VectorSource {\r\n  /**\r\n   * @param {Options} options Cluster options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      wrapX: options.wrapX,\r\n    });\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @protected\r\n     */\r\n    this.resolution = undefined;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.distance = options.distance !== undefined ? options.distance : 20;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.minDistance = options.minDistance || 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.interpolationRatio = 0;\r\n\r\n    /**\r\n     * @type {Array<Feature>}\r\n     * @protected\r\n     */\r\n    this.features = [];\r\n\r\n    /**\r\n     * @param {Feature} feature Feature.\r\n     * @return {Point} Cluster calculation point.\r\n     * @protected\r\n     */\r\n    this.geometryFunction =\r\n      options.geometryFunction ||\r\n      function (feature) {\r\n        const geometry = /** @type {Point} */ (feature.getGeometry());\r\n        assert(geometry.getType() == 'Point', 10); // The default `geometryFunction` can only handle `Point` geometries\r\n        return geometry;\r\n      };\r\n\r\n    /**\r\n     * @type {function(Point, Array<Feature>):Feature}\r\n     * @private\r\n     */\r\n    this.createCustomCluster_ = options.createCluster;\r\n\r\n    /**\r\n     * @type {VectorSource|null}\r\n     * @protected\r\n     */\r\n    this.source = null;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.boundRefresh_ = this.refresh.bind(this);\r\n\r\n    this.updateDistance(this.distance, this.minDistance);\r\n    this.setSource(options.source || null);\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/VectorEventType~VectorEventType#removefeature} events.\r\n   * @api\r\n   */\r\n  clear(fast) {\r\n    this.features.length = 0;\r\n    super.clear(fast);\r\n  }\r\n\r\n  /**\r\n   * Get the distance in pixels between clusters.\r\n   * @return {number} Distance.\r\n   * @api\r\n   */\r\n  getDistance() {\r\n    return this.distance;\r\n  }\r\n\r\n  /**\r\n   * Get a reference to the wrapped source.\r\n   * @return {VectorSource|null} Source.\r\n   * @api\r\n   */\r\n  getSource() {\r\n    return this.source;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    this.source.loadFeatures(extent, resolution, projection);\r\n    if (resolution !== this.resolution) {\r\n      this.resolution = resolution;\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the distance within which features will be clusterd together.\r\n   * @param {number} distance The distance in pixels.\r\n   * @api\r\n   */\r\n  setDistance(distance) {\r\n    this.updateDistance(distance, this.minDistance);\r\n  }\r\n\r\n  /**\r\n   * Set the minimum distance between clusters. Will be capped at the\r\n   * configured distance.\r\n   * @param {number} minDistance The minimum distance in pixels.\r\n   * @api\r\n   */\r\n  setMinDistance(minDistance) {\r\n    this.updateDistance(this.distance, minDistance);\r\n  }\r\n\r\n  /**\r\n   * The configured minimum distance between clusters.\r\n   * @return {number} The minimum distance in pixels.\r\n   * @api\r\n   */\r\n  getMinDistance() {\r\n    return this.minDistance;\r\n  }\r\n\r\n  /**\r\n   * Replace the wrapped source.\r\n   * @param {VectorSource|null} source The new source for this instance.\r\n   * @api\r\n   */\r\n  setSource(source) {\r\n    if (this.source) {\r\n      this.source.removeEventListener(EventType.CHANGE, this.boundRefresh_);\r\n    }\r\n    this.source = source;\r\n    if (source) {\r\n      source.addEventListener(EventType.CHANGE, this.boundRefresh_);\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * Handle the source changing.\r\n   */\r\n  refresh() {\r\n    this.clear();\r\n    this.cluster();\r\n    this.addFeatures(this.features);\r\n  }\r\n\r\n  /**\r\n   * Update the distances and refresh the source if necessary.\r\n   * @param {number} distance The new distance.\r\n   * @param {number} minDistance The new minimum distance.\r\n   */\r\n  updateDistance(distance, minDistance) {\r\n    const ratio =\r\n      distance === 0 ? 0 : Math.min(minDistance, distance) / distance;\r\n    const changed =\r\n      distance !== this.distance || this.interpolationRatio !== ratio;\r\n    this.distance = distance;\r\n    this.minDistance = minDistance;\r\n    this.interpolationRatio = ratio;\r\n    if (changed) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  cluster() {\r\n    if (this.resolution === undefined || !this.source) {\r\n      return;\r\n    }\r\n    const extent = createEmpty();\r\n    const mapDistance = this.distance * this.resolution;\r\n    const features = this.source.getFeatures();\r\n\r\n    /** @type {Object<string, true>} */\r\n    const clustered = {};\r\n\r\n    for (let i = 0, ii = features.length; i < ii; i++) {\r\n      const feature = features[i];\r\n      if (!(getUid(feature) in clustered)) {\r\n        const geometry = this.geometryFunction(feature);\r\n        if (geometry) {\r\n          const coordinates = geometry.getCoordinates();\r\n          createOrUpdateFromCoordinate(coordinates, extent);\r\n          buffer(extent, mapDistance, extent);\r\n\r\n          const neighbors = this.source\r\n            .getFeaturesInExtent(extent)\r\n            .filter(function (neighbor) {\r\n              const uid = getUid(neighbor);\r\n              if (uid in clustered) {\r\n                return false;\r\n              }\r\n              clustered[uid] = true;\r\n              return true;\r\n            });\r\n          this.features.push(this.createCluster(neighbors, extent));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array<Feature>} features Features\r\n   * @param {import(\"../extent.js\").Extent} extent The searched extent for these features.\r\n   * @return {Feature} The cluster feature.\r\n   * @protected\r\n   */\r\n  createCluster(features, extent) {\r\n    const centroid = [0, 0];\r\n    for (let i = features.length - 1; i >= 0; --i) {\r\n      const geometry = this.geometryFunction(features[i]);\r\n      if (geometry) {\r\n        addCoordinate(centroid, geometry.getCoordinates());\r\n      } else {\r\n        features.splice(i, 1);\r\n      }\r\n    }\r\n    scaleCoordinate(centroid, 1 / features.length);\r\n    const searchCenter = getCenter(extent);\r\n    const ratio = this.interpolationRatio;\r\n    const geometry = new Point([\r\n      centroid[0] * (1 - ratio) + searchCenter[0] * ratio,\r\n      centroid[1] * (1 - ratio) + searchCenter[1] * ratio,\r\n    ]);\r\n    if (this.createCustomCluster_) {\r\n      return this.createCustomCluster_(geometry, features);\r\n    }\r\n    return new Feature({\r\n      geometry,\r\n      features,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Cluster;\r\n", "/**\r\n * @module ol/source/DataTile\r\n */\r\nimport DataTile from '../DataTile.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ReprojDataTile from '../reproj/DataTile.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileEventType from './TileEventType.js';\r\nimport TileSource, {TileSourceEvent} from './Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport {\r\n  createXYZ,\r\n  extentFromProjection,\r\n  getForProjection as getTileGridForProjection,\r\n} from '../tilegrid.js';\r\nimport {equivalent, get as getProjection} from '../proj.js';\r\nimport {getKeyZXY} from '../tilecoord.js';\r\nimport {getUid} from '../util.js';\r\nimport {toPromise} from '../functions.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * Data tile loading function.  The function is called with z, x, and y tile coordinates and\r\n * returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\r\n * @typedef {function(number, number, number) : (import(\"../DataTile.js\").Data|Promise<import(\"../DataTile.js\").Data>)} Loader\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Loader} [loader] Data loader.  Called with z, x, and y tile coordinates.\r\n * Returns {@link import(\"../DataTile.js\").Data data} for a tile or a promise for the same.\r\n * For loaders that generate images, the promise should not resolve until the image is loaded.\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\r\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The pixel width and height of the source tiles.\r\n * This may be different than the rendered pixel size if a `tileGrid` is provided.\r\n * @property {number} [gutter=0] The size in pixels of the gutter around data tiles to ignore.\r\n * This allows artifacts of rendering at tile edges to be ignored.\r\n * Supported data should be wider and taller than the tile size by a value of `2 x gutter`.\r\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Tile projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {import(\"./Source.js\").State} [state] The source state.\r\n * @property {boolean} [wrapX=false] Render tiles beyond the antimeridian.\r\n * @property {number} [transition] Transition time when fading in new tiles (in miliseconds).\r\n * @property {number} [bandCount=4] Number of bands represented in the data.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A source for typed array data tiles.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */\r\nclass DataTileSource extends TileSource {\r\n  /**\r\n   * @param {Options} options DataTile source options.\r\n   */\r\n  constructor(options) {\r\n    const projection =\r\n      options.projection === undefined ? 'EPSG:3857' : options.projection;\r\n\r\n    let tileGrid = options.tileGrid;\r\n    if (tileGrid === undefined && projection) {\r\n      tileGrid = createXYZ({\r\n        extent: extentFromProjection(projection),\r\n        maxResolution: options.maxResolution,\r\n        maxZoom: options.maxZoom,\r\n        minZoom: options.minZoom,\r\n        tileSize: options.tileSize,\r\n      });\r\n    }\r\n\r\n    super({\r\n      cacheSize: 0.1, // don't cache on the source\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      projection: projection,\r\n      tileGrid: tileGrid,\r\n      opaque: options.opaque,\r\n      state: options.state,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import('../size.js').Size|null}\r\n     */\r\n    this.tileSize_ = options.tileSize ? toSize(options.tileSize) : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import('../size.js').Size>|null}\r\n     */\r\n    this.tileSizes_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, boolean>}\r\n     */\r\n    this.tileLoadingKeys_ = {};\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.loader_ = options.loader;\r\n\r\n    this.handleTileChange_ = this.handleTileChange_.bind(this);\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.bandCount = options.bandCount === undefined ? 4 : options.bandCount; // assume RGBA if undefined\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */\r\n    this.tileGridForProjection_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, import(\"../TileCache.js\").default>}\r\n     */\r\n    this.tileCacheForProjection_ = {};\r\n  }\r\n\r\n  /**\r\n   * Set the source tile sizes.  The length of the array is expected to match the number of\r\n   * levels in the tile grid.\r\n   * @protected\r\n   * @param {Array<import('../size.js').Size>} tileSizes An array of tile sizes.\r\n   */\r\n  setTileSizes(tileSizes) {\r\n    this.tileSizes_ = tileSizes;\r\n  }\r\n\r\n  /**\r\n   * Get the source tile size at the given zoom level.  This may be different than the rendered tile\r\n   * size.\r\n   * @protected\r\n   * @param {number} z Tile zoom level.\r\n   * @return {import('../size.js').Size} The source tile size.\r\n   */\r\n  getTileSize(z) {\r\n    if (this.tileSizes_) {\r\n      return this.tileSizes_[z];\r\n    }\r\n    if (this.tileSize_) {\r\n      return this.tileSize_;\r\n    }\r\n    const tileGrid = this.getTileGrid();\r\n    return tileGrid ? toSize(tileGrid.getTileSize(z)) : [256, 256];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (!thisProj || equivalent(thisProj, projection)) {\r\n      return this.gutter_;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @param {Loader} loader The data loader.\r\n   * @protected\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj The output projection.\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj The input projection.\r\n   * @return {!DataTile} Tile.\r\n   */\r\n  getReprojTile_(z, x, y, targetProj, sourceProj) {\r\n    const cache = this.getTileCacheForProjection(targetProj);\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (cache.containsKey(tileCoordKey)) {\r\n      const tile = cache.get(tileCoordKey);\r\n      if (tile && tile.key == this.getKey()) {\r\n        return tile;\r\n      }\r\n    }\r\n\r\n    const tileGrid = this.getTileGrid();\r\n    const reprojTilePixelRatio = Math.max.apply(\r\n      null,\r\n      tileGrid.getResolutions().map((r, z) => {\r\n        const tileSize = toSize(tileGrid.getTileSize(z));\r\n        const textureSize = this.getTileSize(z);\r\n        return Math.max(\r\n          textureSize[0] / tileSize[0],\r\n          textureSize[1] / tileSize[1]\r\n        );\r\n      })\r\n    );\r\n\r\n    const sourceTileGrid = this.getTileGridForProjection(sourceProj);\r\n    const targetTileGrid = this.getTileGridForProjection(targetProj);\r\n    const tileCoord = [z, x, y];\r\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      targetProj\r\n    );\r\n\r\n    const options = Object.assign(\r\n      {\r\n        sourceProj,\r\n        sourceTileGrid,\r\n        targetProj,\r\n        targetTileGrid,\r\n        tileCoord,\r\n        wrappedTileCoord,\r\n        pixelRatio: reprojTilePixelRatio,\r\n        gutter: this.getGutterForProjection(sourceProj),\r\n        getTileFunction: (z, x, y, pixelRatio) =>\r\n          this.getTile(z, x, y, pixelRatio, sourceProj),\r\n      },\r\n      this.tileOptions\r\n    );\r\n    const newTile = new ReprojDataTile(options);\r\n    newTile.key = this.getKey();\r\n    return newTile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!DataTile} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (\r\n      sourceProjection &&\r\n      projection &&\r\n      !equivalent(sourceProjection, projection)\r\n    ) {\r\n      return this.getReprojTile_(z, x, y, projection, sourceProjection);\r\n    }\r\n\r\n    const size = this.getTileSize(z);\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (this.tileCache.containsKey(tileCoordKey)) {\r\n      return this.tileCache.get(tileCoordKey);\r\n    }\r\n\r\n    const sourceLoader = this.loader_;\r\n\r\n    function loader() {\r\n      return toPromise(function () {\r\n        return sourceLoader(z, x, y);\r\n      });\r\n    }\r\n\r\n    const options = Object.assign(\r\n      {\r\n        tileCoord: [z, x, y],\r\n        loader: loader,\r\n        size: size,\r\n      },\r\n      this.tileOptions\r\n    );\r\n\r\n    const tile = new DataTile(options);\r\n    tile.key = this.getKey();\r\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\r\n\r\n    this.tileCache.set(tileCoordKey, tile);\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * Handle tile change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   */\r\n  handleTileChange_(event) {\r\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\r\n    const uid = getUid(tile);\r\n    const tileState = tile.getState();\r\n    let type;\r\n    if (tileState == TileState.LOADING) {\r\n      this.tileLoadingKeys_[uid] = true;\r\n      type = TileEventType.TILELOADSTART;\r\n    } else if (uid in this.tileLoadingKeys_) {\r\n      delete this.tileLoadingKeys_[uid];\r\n      type =\r\n        tileState == TileState.ERROR\r\n          ? TileEventType.TILELOADERROR\r\n          : tileState == TileState.LOADED\r\n          ? TileEventType.TILELOADEND\r\n          : undefined;\r\n    }\r\n    if (type) {\r\n      this.dispatchEvent(new TileSourceEvent(type, tile));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\r\n      return this.tileGrid;\r\n    }\r\n\r\n    const projKey = getUid(projection);\r\n    if (!(projKey in this.tileGridForProjection_)) {\r\n      this.tileGridForProjection_[projKey] =\r\n        getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGridForProjection_[projKey];\r\n  }\r\n\r\n  /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */\r\n  setTileGridForProjection(projection, tilegrid) {\r\n    const proj = getProjection(projection);\r\n    if (proj) {\r\n      const projKey = getUid(proj);\r\n      if (!(projKey in this.tileGridForProjection_)) {\r\n        this.tileGridForProjection_[projKey] = tilegrid;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   */\r\n  getTileCacheForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (!thisProj || equivalent(thisProj, projection)) {\r\n      return this.tileCache;\r\n    }\r\n\r\n    const projKey = getUid(projection);\r\n    if (!(projKey in this.tileCacheForProjection_)) {\r\n      this.tileCacheForProjection_[projKey] = new TileCache(0.1); // don't cache\r\n    }\r\n    return this.tileCacheForProjection_[projKey];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    const usedTileCache = this.getTileCacheForProjection(projection);\r\n\r\n    this.tileCache.expireCache(\r\n      this.tileCache == usedTileCache ? usedTiles : {}\r\n    );\r\n    for (const id in this.tileCacheForProjection_) {\r\n      const tileCache = this.tileCacheForProjection_[id];\r\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    super.clear();\r\n    for (const id in this.tileCacheForProjection_) {\r\n      this.tileCacheForProjection_[id].clear();\r\n    }\r\n  }\r\n}\r\n\r\nexport default DataTileSource;\r\n", "export const THIS_IS_NOT_AN_OBJECT = \"This is not an object\";\r\nexport const THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT = \"This is not a Float16Array object\";\r\nexport const THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY =\r\n  \"This constructor is not a subclass of Float16Array\";\r\nexport const THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT =\r\n  \"The constructor property value is not an object\";\r\nexport const SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT =\r\n  \"Species constructor didn't return TypedArray object\";\r\nexport const DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH =\r\n  \"Derived constructor created TypedArray object which was too small length\";\r\nexport const ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER =\r\n  \"Attempting to access detached ArrayBuffer\";\r\nexport const CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT =\r\n  \"Cannot convert undefined or null to object\";\r\nexport const CANNOT_MIX_BIGINT_AND_OTHER_TYPES =\r\n  \"Cannot mix BigInt and other types, use explicit conversions\";\r\nexport const ITERATOR_PROPERTY_IS_NOT_CALLABLE = \"@@iterator property is not callable\";\r\nexport const REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE =\r\n  \"Reduce of empty array with no initial value\";\r\nexport const THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED =\r\n  \"The comparison function must be either a function or undefined\";\r\nexport const OFFSET_IS_OUT_OF_BOUNDS = \"Offset is out of bounds\";\r\n", "/* eslint-disable no-restricted-globals, no-restricted-syntax */\r\n/* global SharedArrayBuffer */\r\n\r\nimport { CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT } from \"./messages.mjs\";\r\n\r\n/** @type {<T extends (...args: any) => any>(target: T) => (thisArg: ThisType<T>, ...args: any[]) => any} */\r\nfunction uncurryThis(target) {\r\n  return (thisArg, ...args) => {\r\n    return ReflectApply(target, thisArg, args);\r\n  };\r\n}\r\n\r\n/** @type {(target: any, key: string | symbol) => (thisArg: any, ...args: any[]) => any} */\r\nfunction uncurryThisGetter(target, key) {\r\n  return uncurryThis(\r\n    ReflectGetOwnPropertyDescriptor(\r\n      target,\r\n      key\r\n    ).get\r\n  );\r\n}\r\n\r\n// Reflect\r\nexport const {\r\n  apply: ReflectApply,\r\n  construct: ReflectConstruct,\r\n  defineProperty: ReflectDefineProperty,\r\n  get: ReflectGet,\r\n  getOwnPropertyDescriptor: ReflectGetOwnPropertyDescriptor,\r\n  getPrototypeOf: ReflectGetPrototypeOf,\r\n  has: ReflectHas,\r\n  ownKeys: ReflectOwnKeys,\r\n  set: ReflectSet,\r\n  setPrototypeOf: ReflectSetPrototypeOf,\r\n} = Reflect;\r\n\r\n// Proxy\r\nexport const NativeProxy = Proxy;\r\n\r\n// Number\r\nexport const {\r\n  MAX_SAFE_INTEGER,\r\n  isFinite: NumberIsFinite,\r\n  isNaN: NumberIsNaN,\r\n} = Number;\r\n\r\n// Symbol\r\nexport const {\r\n  iterator: SymbolIterator,\r\n  species: SymbolSpecies,\r\n  toStringTag: SymbolToStringTag,\r\n  for: SymbolFor,\r\n} = Symbol;\r\n\r\n// Object\r\nexport const NativeObject = Object;\r\nexport const {\r\n  create: ObjectCreate,\r\n  defineProperty: ObjectDefineProperty,\r\n  freeze: ObjectFreeze,\r\n  is: ObjectIs,\r\n} = NativeObject;\r\nconst ObjectPrototype = NativeObject.prototype;\r\n/** @type {(object: object, key: PropertyKey) => Function | undefined} */\r\nexport const ObjectPrototype__lookupGetter__ = /** @type {any} */ (ObjectPrototype).__lookupGetter__\r\n  ? uncurryThis(/** @type {any} */ (ObjectPrototype).__lookupGetter__)\r\n  : (object, key) => {\r\n    if (object == null) {\r\n      throw NativeTypeError(\r\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\r\n      );\r\n    }\r\n\r\n    let target = NativeObject(object);\r\n    do {\r\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\r\n      if (descriptor !== undefined) {\r\n        if (ObjectHasOwn(descriptor, \"get\")) {\r\n          return descriptor.get;\r\n        }\r\n\r\n        return;\r\n      }\r\n    } while ((target = ReflectGetPrototypeOf(target)) !== null);\r\n  };\r\n/** @type {(object: object, key: PropertyKey) => boolean} */\r\nexport const ObjectHasOwn = /** @type {any} */ (NativeObject).hasOwn ||\r\n  uncurryThis(ObjectPrototype.hasOwnProperty);\r\n\r\n// Array\r\nconst NativeArray = Array;\r\nexport const ArrayIsArray = NativeArray.isArray;\r\nconst ArrayPrototype = NativeArray.prototype;\r\n/** @type {(array: ArrayLike<unknown>, separator?: string) => string} */\r\nexport const ArrayPrototypeJoin = uncurryThis(ArrayPrototype.join);\r\n/** @type {<T>(array: T[], ...items: T[]) => number} */\r\nexport const ArrayPrototypePush = uncurryThis(ArrayPrototype.push);\r\n/** @type {(array: ArrayLike<unknown>, ...opts: any[]) => string} */\r\nexport const ArrayPrototypeToLocaleString = uncurryThis(\r\n  ArrayPrototype.toLocaleString\r\n);\r\nexport const NativeArrayPrototypeSymbolIterator = ArrayPrototype[SymbolIterator];\r\n/** @type {<T>(array: T[]) => IterableIterator<T>} */\r\nexport const ArrayPrototypeSymbolIterator = uncurryThis(NativeArrayPrototypeSymbolIterator);\r\n\r\n// Math\r\nexport const MathTrunc = Math.trunc;\r\n\r\n// ArrayBuffer\r\nexport const NativeArrayBuffer = ArrayBuffer;\r\nexport const ArrayBufferIsView = NativeArrayBuffer.isView;\r\nconst ArrayBufferPrototype = NativeArrayBuffer.prototype;\r\n/** @type {(buffer: ArrayBuffer, begin?: number, end?: number) => number} */\r\nexport const ArrayBufferPrototypeSlice = uncurryThis(ArrayBufferPrototype.slice);\r\n/** @type {(buffer: ArrayBuffer) => ArrayBuffer} */\r\nexport const ArrayBufferPrototypeGetByteLength = uncurryThisGetter(ArrayBufferPrototype, \"byteLength\");\r\n\r\n// SharedArrayBuffer\r\nexport const NativeSharedArrayBuffer = typeof SharedArrayBuffer !== \"undefined\" ? SharedArrayBuffer : null;\r\n/** @type {(buffer: SharedArrayBuffer) => SharedArrayBuffer} */\r\nexport const SharedArrayBufferPrototypeGetByteLength = NativeSharedArrayBuffer\r\n  && uncurryThisGetter(NativeSharedArrayBuffer.prototype, \"byteLength\");\r\n\r\n// TypedArray\r\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\r\n/** @type {any} */\r\nexport const TypedArray = ReflectGetPrototypeOf(Uint8Array);\r\nconst TypedArrayFrom = TypedArray.from;\r\nexport const TypedArrayPrototype = TypedArray.prototype;\r\nexport const NativeTypedArrayPrototypeSymbolIterator = TypedArrayPrototype[SymbolIterator];\r\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\r\nexport const TypedArrayPrototypeKeys = uncurryThis(TypedArrayPrototype.keys);\r\n/** @type {(typedArray: TypedArray) => IterableIterator<number>} */\r\nexport const TypedArrayPrototypeValues = uncurryThis(\r\n  TypedArrayPrototype.values\r\n);\r\n/** @type {(typedArray: TypedArray) => IterableIterator<[number, number]>} */\r\nexport const TypedArrayPrototypeEntries = uncurryThis(\r\n  TypedArrayPrototype.entries\r\n);\r\n/** @type {(typedArray: TypedArray, array: ArrayLike<number>, offset?: number) => void} */\r\nexport const TypedArrayPrototypeSet = uncurryThis(TypedArrayPrototype.set);\r\n/** @type {<T extends TypedArray>(typedArray: T) => T} */\r\nexport const TypedArrayPrototypeReverse = uncurryThis(\r\n  TypedArrayPrototype.reverse\r\n);\r\n/** @type {<T extends TypedArray>(typedArray: T, value: number, start?: number, end?: number) => T} */\r\nexport const TypedArrayPrototypeFill = uncurryThis(TypedArrayPrototype.fill);\r\n/** @type {<T extends TypedArray>(typedArray: T, target: number, start: number, end?: number) => T} */\r\nexport const TypedArrayPrototypeCopyWithin = uncurryThis(\r\n  TypedArrayPrototype.copyWithin\r\n);\r\n/** @type {<T extends TypedArray>(typedArray: T, compareFn?: (a: number, b: number) => number) => T} */\r\nexport const TypedArrayPrototypeSort = uncurryThis(TypedArrayPrototype.sort);\r\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\r\nexport const TypedArrayPrototypeSlice = uncurryThis(TypedArrayPrototype.slice);\r\n/** @type {<T extends TypedArray>(typedArray: T, start?: number, end?: number) => T} */\r\nexport const TypedArrayPrototypeSubarray = uncurryThis(\r\n  TypedArrayPrototype.subarray\r\n);\r\n/** @type {((typedArray: TypedArray) => ArrayBuffer)} */\r\nexport const TypedArrayPrototypeGetBuffer = uncurryThisGetter(\r\n  TypedArrayPrototype,\r\n  \"buffer\"\r\n);\r\n/** @type {((typedArray: TypedArray) => number)} */\r\nexport const TypedArrayPrototypeGetByteOffset = uncurryThisGetter(\r\n  TypedArrayPrototype,\r\n  \"byteOffset\"\r\n);\r\n/** @type {((typedArray: TypedArray) => number)} */\r\nexport const TypedArrayPrototypeGetLength = uncurryThisGetter(\r\n  TypedArrayPrototype,\r\n  \"length\"\r\n);\r\n/** @type {(target: unknown) => string} */\r\nexport const TypedArrayPrototypeGetSymbolToStringTag = uncurryThisGetter(\r\n  TypedArrayPrototype,\r\n  SymbolToStringTag\r\n);\r\n\r\n// Uint16Array\r\nexport const NativeUint16Array = Uint16Array;\r\n/** @type {Uint16ArrayConstructor[\"from\"]} */\r\nexport const Uint16ArrayFrom = (...args) => {\r\n  return ReflectApply(TypedArrayFrom, NativeUint16Array, args);\r\n};\r\n\r\n// Uint32Array\r\nexport const NativeUint32Array = Uint32Array;\r\n\r\n// Float32Array\r\nexport const NativeFloat32Array = Float32Array;\r\n\r\n// ArrayIterator\r\n/** @type {any} */\r\nexport const ArrayIteratorPrototype = ReflectGetPrototypeOf([][SymbolIterator]());\r\n/** @type {<T>(arrayIterator: IterableIterator<T>) => IteratorResult<T>} */\r\nexport const ArrayIteratorPrototypeNext = uncurryThis(ArrayIteratorPrototype.next);\r\n\r\n// Generator\r\n/** @type {<T = unknown, TReturn = any, TNext = unknown>(generator: Generator<T, TReturn, TNext>, value?: TNext) => T} */\r\nexport const GeneratorPrototypeNext = uncurryThis((function* () {})().next);\r\n\r\n// Iterator\r\nexport const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);\r\n\r\n// DataView\r\nconst DataViewPrototype = DataView.prototype;\r\n/** @type {(dataView: DataView, byteOffset: number, littleEndian?: boolean) => number} */\r\nexport const DataViewPrototypeGetUint16 = uncurryThis(\r\n  DataViewPrototype.getUint16\r\n);\r\n/** @type {(dataView: DataView, byteOffset: number, value: number, littleEndian?: boolean) => void} */\r\nexport const DataViewPrototypeSetUint16 = uncurryThis(\r\n  DataViewPrototype.setUint16\r\n);\r\n\r\n// Error\r\nexport const NativeTypeError = TypeError;\r\nexport const NativeRangeError = RangeError;\r\n\r\n// WeakSet\r\n/**\r\n * Do not construct with arguments to avoid calling the \"add\" method\r\n *\r\n * @type {{new <T extends {}>(): WeakSet<T>}}\r\n */\r\nexport const NativeWeakSet = WeakSet;\r\nconst WeakSetPrototype = NativeWeakSet.prototype;\r\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => Set<T>} */\r\nexport const WeakSetPrototypeAdd = uncurryThis(WeakSetPrototype.add);\r\n/** @type {<T extends {}>(set: WeakSet<T>, value: T) => boolean} */\r\nexport const WeakSetPrototypeHas = uncurryThis(WeakSetPrototype.has);\r\n\r\n// WeakMap\r\n/**\r\n * Do not construct with arguments to avoid calling the \"set\" method\r\n *\r\n * @type {{new <K extends {}, V>(): WeakMap<K, V>}}\r\n */\r\nexport const NativeWeakMap = WeakMap;\r\nconst WeakMapPrototype = NativeWeakMap.prototype;\r\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => V} */\r\nexport const WeakMapPrototypeGet = uncurryThis(WeakMapPrototype.get);\r\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K) => boolean} */\r\nexport const WeakMapPrototypeHas = uncurryThis(WeakMapPrototype.has);\r\n/** @type {<K extends {}, V>(weakMap: WeakMap<K, V>, key: K, value: V) => WeakMap} */\r\nexport const WeakMapPrototypeSet = uncurryThis(WeakMapPrototype.set);\r\n", "import {\r\n  ArrayIteratorPrototype,\r\n  ArrayIteratorPrototypeNext,\r\n  ArrayPrototypeSymbolIterator,\r\n  GeneratorPrototypeNext,\r\n  IteratorPrototype,\r\n  NativeArrayPrototypeSymbolIterator,\r\n  NativeWeakMap,\r\n  ObjectCreate,\r\n  ObjectDefineProperty,\r\n  ReflectGetOwnPropertyDescriptor,\r\n  ReflectOwnKeys,\r\n  SymbolIterator,\r\n  WeakMapPrototypeGet,\r\n  WeakMapPrototypeSet,\r\n} from \"./primordials.mjs\";\r\n\r\n/** @type {WeakMap<{}, IterableIterator<any>>} */\r\nconst arrayIterators = new NativeWeakMap();\r\n\r\nconst SafeIteratorPrototype = ObjectCreate(null, {\r\n  next: {\r\n    value: function next() {\r\n      const arrayIterator = WeakMapPrototypeGet(arrayIterators, this);\r\n      return ArrayIteratorPrototypeNext(arrayIterator);\r\n    },\r\n  },\r\n\r\n  [SymbolIterator]: {\r\n    value: function values() {\r\n      return this;\r\n    },\r\n  },\r\n});\r\n\r\n/**\r\n * Wrap the Array around the SafeIterator If Array.prototype [@@iterator] has been modified\r\n *\r\n * @type {<T>(array: T[]) => Iterable<T>}\r\n */\r\nexport function safeIfNeeded(array) {\r\n  if (\r\n    array[SymbolIterator] === NativeArrayPrototypeSymbolIterator &&\r\n    ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext\r\n  ) {\r\n    return array;\r\n  }\r\n\r\n  const safe = ObjectCreate(SafeIteratorPrototype);\r\n  WeakMapPrototypeSet(arrayIterators, safe, ArrayPrototypeSymbolIterator(array));\r\n  return safe;\r\n}\r\n\r\n/** @type {WeakMap<{}, Generator<any>>} */\r\nconst generators = new NativeWeakMap();\r\n\r\n/** @see https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object */\r\nconst DummyArrayIteratorPrototype = ObjectCreate(IteratorPrototype, {\r\n  next: {\r\n    value: function next() {\r\n      const generator = WeakMapPrototypeGet(generators, this);\r\n      return GeneratorPrototypeNext(generator);\r\n    },\r\n    writable: true,\r\n    configurable: true,\r\n  },\r\n});\r\n\r\nfor (const key of ReflectOwnKeys(ArrayIteratorPrototype)) {\r\n  // next method has already defined\r\n  if (key === \"next\") {\r\n    continue;\r\n  }\r\n\r\n  // Copy ArrayIteratorPrototype descriptors to DummyArrayIteratorPrototype\r\n  ObjectDefineProperty(DummyArrayIteratorPrototype, key, ReflectGetOwnPropertyDescriptor(ArrayIteratorPrototype, key));\r\n}\r\n\r\n/**\r\n * Wrap the Generator around the dummy ArrayIterator\r\n *\r\n * @type {<T>(generator: Generator<T>) => IterableIterator<T>}\r\n */\r\nexport function wrap(generator) {\r\n  const dummy = ObjectCreate(DummyArrayIteratorPrototype);\r\n  WeakMapPrototypeSet(generators, dummy, generator);\r\n  return dummy;\r\n}\r\n", "import {\r\n  ArrayBufferPrototypeGetByteLength,\r\n  ArrayIsArray,\r\n  ArrayIteratorPrototype,\r\n  ArrayIteratorPrototypeNext,\r\n  MathTrunc,\r\n  NativeArrayPrototypeSymbolIterator,\r\n  NativeSharedArrayBuffer,\r\n  NativeTypedArrayPrototypeSymbolIterator,\r\n  NumberIsFinite,\r\n  SharedArrayBufferPrototypeGetByteLength,\r\n  SymbolIterator,\r\n  TypedArrayPrototypeGetSymbolToStringTag,\r\n} from \"./primordials.mjs\";\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is {}}\r\n */\r\nexport function isObject(value) {\r\n  return (\r\n    (value !== null && typeof value === \"object\") ||\r\n    typeof value === \"function\"\r\n  );\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is {}}\r\n */\r\nexport function isObjectLike(value) {\r\n  return value !== null && typeof value === \"object\";\r\n}\r\n\r\n// Inspired by util.types implementation of Node.js\r\n/** @typedef {Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float32Array|Float64Array|BigUint64Array|BigInt64Array} TypedArray */\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is TypedArray}\r\n */\r\nexport function isNativeTypedArray(value) {\r\n  return TypedArrayPrototypeGetSymbolToStringTag(value) !== undefined;\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is BigInt64Array|BigUint64Array}\r\n */\r\nexport function isNativeBigIntTypedArray(value) {\r\n  const typedArrayName = TypedArrayPrototypeGetSymbolToStringTag(value);\r\n  return (\r\n    typedArrayName === \"BigInt64Array\" ||\r\n    typedArrayName === \"BigUint64Array\"\r\n  );\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is ArrayBuffer}\r\n */\r\nexport function isArrayBuffer(value) {\r\n  try {\r\n    ArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is SharedArrayBuffer}\r\n */\r\nexport function isSharedArrayBuffer(value) {\r\n  if (NativeSharedArrayBuffer === null) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    SharedArrayBufferPrototypeGetByteLength(/** @type {any} */ (value));\r\n    return true;\r\n  } catch (e) {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is unknown[]}\r\n */\r\nexport function isOrdinaryArray(value) {\r\n  if (!ArrayIsArray(value)) {\r\n    return false;\r\n  }\r\n\r\n  // Verify that there are no changes in ArrayIterator\r\n  return (\r\n    value[SymbolIterator] === NativeArrayPrototypeSymbolIterator &&\r\n    ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext\r\n  );\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is TypedArray}\r\n */\r\nexport function isOrdinaryNativeTypedArray(value) {\r\n  if (!isNativeTypedArray(value)) {\r\n    return false;\r\n  }\r\n\r\n  // Verify that there are no changes in ArrayIterator\r\n  return (\r\n    value[SymbolIterator] === NativeTypedArrayPrototypeSymbolIterator &&\r\n    ArrayIteratorPrototype.next === ArrayIteratorPrototypeNext\r\n  );\r\n}\r\n\r\n/**\r\n * @param {unknown} value\r\n * @returns {value is string}\r\n */\r\nexport function isCanonicalIntegerIndexString(value) {\r\n  if (typeof value !== \"string\") {\r\n    return false;\r\n  }\r\n\r\n  const number = +value;\r\n  if (value !== number + \"\") {\r\n    return false;\r\n  }\r\n\r\n  if (!NumberIsFinite(number)) {\r\n    return false;\r\n  }\r\n\r\n  return number === MathTrunc(number);\r\n}\r\n", "import { isObject, isObjectLike } from \"./is.mjs\";\r\nimport { THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT } from \"./messages.mjs\";\r\nimport { NativeTypeError, ReflectGetPrototypeOf, ReflectHas, SymbolFor } from \"./primordials.mjs\";\r\n\r\nexport const brand = SymbolFor(\"__Float16Array__\");\r\n\r\n/**\r\n * @param {unknown} target\r\n * @throws {TypeError}\r\n * @returns {boolean}\r\n */\r\nexport function hasFloat16ArrayBrand(target) {\r\n  if (!isObjectLike(target)) {\r\n    return false;\r\n  }\r\n\r\n  const prototype = ReflectGetPrototypeOf(target);\r\n  if (!isObjectLike(prototype)) {\r\n    return false;\r\n  }\r\n\r\n  const constructor = prototype.constructor;\r\n  if (constructor === undefined) {\r\n    return false;\r\n  }\r\n  if (!isObject(constructor)) {\r\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\r\n  }\r\n\r\n  return ReflectHas(constructor, brand);\r\n}\r\n", "// algorithm: http://fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n\r\nimport {\r\n  NativeArrayBuffer,\r\n  NativeFloat32Array,\r\n  NativeUint32Array,\r\n} from \"./primordials.mjs\";\r\n\r\nconst buffer = new NativeArrayBuffer(4);\r\nconst floatView = new NativeFloat32Array(buffer);\r\nconst uint32View = new NativeUint32Array(buffer);\r\n\r\nconst baseTable = new NativeUint32Array(512);\r\nconst shiftTable = new NativeUint32Array(512);\r\n\r\nfor (let i = 0; i < 256; ++i) {\r\n  const e = i - 127;\r\n\r\n  // very small number (0, -0)\r\n  if (e < -27) {\r\n    baseTable[i]         = 0x0000;\r\n    baseTable[i | 0x100] = 0x8000;\r\n    shiftTable[i]         = 24;\r\n    shiftTable[i | 0x100] = 24;\r\n\r\n  // small number (denorm)\r\n  } else if (e < -14) {\r\n    baseTable[i]         =  0x0400 >> (-e - 14);\r\n    baseTable[i | 0x100] = (0x0400 >> (-e - 14)) | 0x8000;\r\n    shiftTable[i]         = -e - 1;\r\n    shiftTable[i | 0x100] = -e - 1;\r\n\r\n  // normal number\r\n  } else if (e <= 15) {\r\n    baseTable[i]         =  (e + 15) << 10;\r\n    baseTable[i | 0x100] = ((e + 15) << 10) | 0x8000;\r\n    shiftTable[i]         = 13;\r\n    shiftTable[i | 0x100] = 13;\r\n\r\n  // large number (Infinity, -Infinity)\r\n  } else if (e < 128) {\r\n    baseTable[i]         = 0x7c00;\r\n    baseTable[i | 0x100] = 0xfc00;\r\n    shiftTable[i]         = 24;\r\n    shiftTable[i | 0x100] = 24;\r\n\r\n  // stay (NaN, Infinity, -Infinity)\r\n  } else {\r\n    baseTable[i]         = 0x7c00;\r\n    baseTable[i | 0x100] = 0xfc00;\r\n    shiftTable[i]         = 13;\r\n    shiftTable[i | 0x100] = 13;\r\n  }\r\n}\r\n\r\n/**\r\n * round a number to a half float number bits\r\n *\r\n * @param {unknown} num - double float\r\n * @returns {number} half float number bits\r\n */\r\nexport function roundToFloat16Bits(num) {\r\n  floatView[0] = /** @type {any} */ (num);\r\n  const f = uint32View[0];\r\n  const e = (f >> 23) & 0x1ff;\r\n  return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);\r\n}\r\n\r\nconst mantissaTable = new NativeUint32Array(2048);\r\nconst exponentTable = new NativeUint32Array(64);\r\nconst offsetTable = new NativeUint32Array(64);\r\n\r\nfor (let i = 1; i < 1024; ++i) {\r\n  let m = i << 13;    // zero pad mantissa bits\r\n  let e = 0;          // zero exponent\r\n\r\n  // normalized\r\n  while((m & 0x00800000) === 0) {\r\n    m <<= 1;\r\n    e -= 0x00800000;  // decrement exponent\r\n  }\r\n\r\n  m &= ~0x00800000;   // clear leading 1 bit\r\n  e += 0x38800000;    // adjust bias\r\n\r\n  mantissaTable[i] = m | e;\r\n}\r\nfor (let i = 1024; i < 2048; ++i) {\r\n  mantissaTable[i] = 0x38000000 + ((i - 1024) << 13);\r\n}\r\n\r\nfor (let i = 1; i < 31; ++i) {\r\n  exponentTable[i] = i << 23;\r\n}\r\nexponentTable[31] = 0x47800000;\r\nexponentTable[32] = 0x80000000;\r\nfor (let i = 33; i < 63; ++i) {\r\n  exponentTable[i] = 0x80000000 + ((i - 32) << 23);\r\n}\r\nexponentTable[63] = 0xc7800000;\r\n\r\nfor (let i = 1; i < 64; ++i) {\r\n  if (i !== 32) {\r\n    offsetTable[i] = 1024;\r\n  }\r\n}\r\n\r\n/**\r\n * convert a half float number bits to a number\r\n *\r\n * @param {number} float16bits - half float number bits\r\n * @returns {number} double float\r\n */\r\nexport function convertToNumber(float16bits) {\r\n  const m = float16bits >> 10;\r\n  uint32View[0] = mantissaTable[offsetTable[m] + (float16bits & 0x3ff)] + exponentTable[m];\r\n  return floatView[0];\r\n}\r\n", "import { isObject, isSharedArrayBuffer } from \"./is.mjs\";\r\nimport {\r\n  THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT,\r\n  THIS_IS_NOT_AN_OBJECT,\r\n} from \"./messages.mjs\";\r\nimport {\r\n  ArrayBufferPrototypeSlice,\r\n  MAX_SAFE_INTEGER,\r\n  MathTrunc,\r\n  NativeTypeError,\r\n  NumberIsNaN,\r\n  ObjectIs,\r\n  SymbolSpecies,\r\n} from \"./primordials.mjs\";\r\n\r\n/**\r\n * @see https://tc39.es/ecma262/#sec-tointegerorinfinity\r\n * @param {unknown} target\r\n * @returns {number}\r\n */\r\nexport function ToIntegerOrInfinity(target) {\r\n  const number = +target;\r\n\r\n  if (NumberIsNaN(number) || number === 0) {\r\n    return 0;\r\n  }\r\n\r\n  return MathTrunc(number);\r\n}\r\n\r\n/**\r\n * @see https://tc39.es/ecma262/#sec-tolength\r\n * @param {unknown} target\r\n * @returns {number}\r\n */\r\nexport function ToLength(target) {\r\n  const length = ToIntegerOrInfinity(target);\r\n  if (length < 0) {\r\n    return 0;\r\n  }\r\n\r\n  return length < MAX_SAFE_INTEGER\r\n    ? length\r\n    : MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * @see https://tc39.es/ecma262/#sec-speciesconstructor\r\n * @param {object} target\r\n * @param {{ new(...args: any[]): any; }} defaultConstructor\r\n * @returns {{ new(...args: any[]): any; }}\r\n */\r\nexport function SpeciesConstructor(target, defaultConstructor) {\r\n  if (!isObject(target)) {\r\n    throw NativeTypeError(THIS_IS_NOT_AN_OBJECT);\r\n  }\r\n\r\n  const constructor = target.constructor;\r\n  if (constructor === undefined) {\r\n    return defaultConstructor;\r\n  }\r\n  if (!isObject(constructor)) {\r\n    throw NativeTypeError(THE_CONSTRUCTOR_PROPERTY_VALUE_IS_NOT_AN_OBJECT);\r\n  }\r\n\r\n  const species = constructor[SymbolSpecies];\r\n  if (species == null) {\r\n    return defaultConstructor;\r\n  }\r\n\r\n  return species;\r\n}\r\n\r\n/**\r\n * @see https://tc39.es/ecma262/#sec-isdetachedbuffer\r\n * @param {ArrayBufferLike} buffer\r\n * @returns {boolean}\r\n */\r\nexport function IsDetachedBuffer(buffer) {\r\n  if (isSharedArrayBuffer(buffer)) {\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    ArrayBufferPrototypeSlice(buffer, 0, 0);\r\n    return false;\r\n  } catch (e) {/* empty */}\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * bigint comparisons are not supported\r\n *\r\n * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort\r\n * @param {number} x\r\n * @param {number} y\r\n * @returns {-1 | 0 | 1}\r\n */\r\nexport function defaultCompare(x, y) {\r\n  const isXNaN = NumberIsNaN(x);\r\n  const isYNaN = NumberIsNaN(y);\r\n\r\n  if (isXNaN && isYNaN) {\r\n    return 0;\r\n  }\r\n\r\n  if (isXNaN) {\r\n    return 1;\r\n  }\r\n\r\n  if (isYNaN) {\r\n    return -1;\r\n  }\r\n\r\n  if (x < y) {\r\n    return -1;\r\n  }\r\n\r\n  if (x > y) {\r\n    return 1;\r\n  }\r\n\r\n  if (x === 0 && y === 0) {\r\n    const isXPlusZero = ObjectIs(x, 0);\r\n    const isYPlusZero = ObjectIs(y, 0);\r\n\r\n    if (!isXPlusZero && isYPlusZero) {\r\n      return -1;\r\n    }\r\n\r\n    if (isXPlusZero && !isYPlusZero) {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n", "import { safeIfNeeded, wrap } from \"./_util/arrayIterator.mjs\";\r\nimport { brand, hasFloat16ArrayBrand } from \"./_util/brand.mjs\";\r\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\r\nimport {\r\n  isArrayBuffer,\r\n  isCanonicalIntegerIndexString,\r\n  isNativeBigIntTypedArray,\r\n  isNativeTypedArray,\r\n  isObject,\r\n  isOrdinaryArray,\r\n  isOrdinaryNativeTypedArray,\r\n} from \"./_util/is.mjs\";\r\nimport {\r\n  ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER,\r\n  CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT,\r\n  CANNOT_MIX_BIGINT_AND_OTHER_TYPES,\r\n  DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH,\r\n  ITERATOR_PROPERTY_IS_NOT_CALLABLE,\r\n  OFFSET_IS_OUT_OF_BOUNDS,\r\n  REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE,\r\n  SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT,\r\n  THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED,\r\n  THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY,\r\n  THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT,\r\n} from \"./_util/messages.mjs\";\r\nimport {\r\n  ArrayBufferIsView,\r\n  ArrayPrototypeJoin,\r\n  ArrayPrototypePush,\r\n  ArrayPrototypeToLocaleString,\r\n  NativeArrayBuffer,\r\n  NativeObject,\r\n  NativeProxy,\r\n  NativeRangeError,\r\n  NativeTypeError,\r\n  NativeUint16Array,\r\n  NativeWeakMap,\r\n  NativeWeakSet,\r\n  NumberIsNaN,\r\n  ObjectDefineProperty,\r\n  ObjectFreeze,\r\n  ObjectHasOwn,\r\n  ObjectPrototype__lookupGetter__,\r\n  ReflectApply,\r\n  ReflectConstruct,\r\n  ReflectDefineProperty,\r\n  ReflectGet,\r\n  ReflectGetOwnPropertyDescriptor,\r\n  ReflectHas,\r\n  ReflectOwnKeys,\r\n  ReflectSet,\r\n  ReflectSetPrototypeOf,\r\n  SymbolIterator,\r\n  SymbolToStringTag,\r\n  TypedArray,\r\n  TypedArrayPrototype,\r\n  TypedArrayPrototypeCopyWithin,\r\n  TypedArrayPrototypeEntries,\r\n  TypedArrayPrototypeFill,\r\n  TypedArrayPrototypeGetBuffer,\r\n  TypedArrayPrototypeGetByteOffset,\r\n  TypedArrayPrototypeGetLength,\r\n  TypedArrayPrototypeKeys,\r\n  TypedArrayPrototypeReverse,\r\n  TypedArrayPrototypeSet,\r\n  TypedArrayPrototypeSlice,\r\n  TypedArrayPrototypeSort,\r\n  TypedArrayPrototypeSubarray,\r\n  TypedArrayPrototypeValues,\r\n  Uint16ArrayFrom,\r\n  WeakMapPrototypeGet,\r\n  WeakMapPrototypeHas,\r\n  WeakMapPrototypeSet,\r\n  WeakSetPrototypeAdd,\r\n  WeakSetPrototypeHas,\r\n} from \"./_util/primordials.mjs\";\r\nimport {\r\n  IsDetachedBuffer,\r\n  SpeciesConstructor,\r\n  ToIntegerOrInfinity,\r\n  ToLength,\r\n  defaultCompare,\r\n} from \"./_util/spec.mjs\";\r\n\r\nconst BYTES_PER_ELEMENT = 2;\r\n\r\n/** @typedef {Uint16Array & { __float16bits: never }} Float16BitsArray */\r\n\r\n/** @type {WeakMap<Float16Array, Float16BitsArray>} */\r\nconst float16bitsArrays = new NativeWeakMap();\r\n\r\n/**\r\n * @param {unknown} target\r\n * @returns {target is Float16Array}\r\n */\r\nexport function isFloat16Array(target) {\r\n  return WeakMapPrototypeHas(float16bitsArrays, target) ||\r\n    (!ArrayBufferIsView(target) && hasFloat16ArrayBrand(target));\r\n}\r\n\r\n/**\r\n * @param {unknown} target\r\n * @throws {TypeError}\r\n * @returns {asserts target is Float16Array}\r\n */\r\nfunction assertFloat16Array(target) {\r\n  if (!isFloat16Array(target)) {\r\n    throw NativeTypeError(THIS_IS_NOT_A_FLOAT16ARRAY_OBJECT);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {unknown} target\r\n * @param {number=} count\r\n * @throws {TypeError}\r\n * @returns {asserts target is Uint8Array|Uint8ClampedArray|Uint16Array|Uint32Array|Int8Array|Int16Array|Int32Array|Float16Array|Float32Array|Float64Array}\r\n */\r\nfunction assertSpeciesTypedArray(target, count) {\r\n  const isTargetFloat16Array = isFloat16Array(target);\r\n  const isTargetTypedArray = isNativeTypedArray(target);\r\n\r\n  if (!isTargetFloat16Array && !isTargetTypedArray) {\r\n    throw NativeTypeError(SPECIES_CONSTRUCTOR_DIDNT_RETURN_TYPEDARRAY_OBJECT);\r\n  }\r\n\r\n  if (typeof count === \"number\") {\r\n    let length;\r\n    if (isTargetFloat16Array) {\r\n      const float16bitsArray = getFloat16BitsArray(target);\r\n      length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    } else {\r\n      length = TypedArrayPrototypeGetLength(target);\r\n    }\r\n\r\n    if (length < count) {\r\n      throw NativeTypeError(\r\n        DERIVED_CONSTRUCTOR_CREATED_TYPEDARRAY_OBJECT_WHICH_WAS_TOO_SMALL_LENGTH\r\n      );\r\n    }\r\n  }\r\n\r\n  if (isNativeBigIntTypedArray(target)) {\r\n    throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Float16Array} float16\r\n * @throws {TypeError}\r\n * @returns {Float16BitsArray}\r\n */\r\nfunction getFloat16BitsArray(float16) {\r\n  const float16bitsArray = WeakMapPrototypeGet(float16bitsArrays, float16);\r\n  if (float16bitsArray !== undefined) {\r\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\r\n\r\n    if (IsDetachedBuffer(buffer)) {\r\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\r\n    }\r\n\r\n    return float16bitsArray;\r\n  }\r\n\r\n  // from another Float16Array instance (a different version?)\r\n  const buffer = /** @type {any} */ (float16).buffer;\r\n\r\n  if (IsDetachedBuffer(buffer)) {\r\n    throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\r\n  }\r\n\r\n  const cloned = ReflectConstruct(Float16Array, [\r\n    buffer,\r\n    /** @type {any} */ (float16).byteOffset,\r\n    /** @type {any} */ (float16).length,\r\n  ], float16.constructor);\r\n  return WeakMapPrototypeGet(float16bitsArrays, cloned);\r\n}\r\n\r\n/**\r\n * @param {Float16BitsArray} float16bitsArray\r\n * @returns {number[]}\r\n */\r\nfunction copyToArray(float16bitsArray) {\r\n  const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n\r\n  const array = [];\r\n  for (let i = 0; i < length; ++i) {\r\n    array[i] = convertToNumber(float16bitsArray[i]);\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\n/** @type {WeakSet<Function>} */\r\nconst TypedArrayPrototypeGetters = new NativeWeakSet();\r\nfor (const key of ReflectOwnKeys(TypedArrayPrototype)) {\r\n  // @@toStringTag getter property is defined in Float16Array.prototype\r\n  if (key === SymbolToStringTag) {\r\n    continue;\r\n  }\r\n\r\n  const descriptor = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, key);\r\n  if (ObjectHasOwn(descriptor, \"get\") && typeof descriptor.get === \"function\") {\r\n    WeakSetPrototypeAdd(TypedArrayPrototypeGetters, descriptor.get);\r\n  }\r\n}\r\n\r\nconst handler = ObjectFreeze(/** @type {ProxyHandler<Float16BitsArray>} */ ({\r\n  get(target, key, receiver) {\r\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\r\n      return convertToNumber(ReflectGet(target, key));\r\n    }\r\n\r\n    // %TypedArray%.prototype getter properties cannot called by Proxy receiver\r\n    if (WeakSetPrototypeHas(TypedArrayPrototypeGetters, ObjectPrototype__lookupGetter__(target, key))) {\r\n      return ReflectGet(target, key);\r\n    }\r\n\r\n    return ReflectGet(target, key, receiver);\r\n  },\r\n\r\n  set(target, key, value, receiver) {\r\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\r\n      return ReflectSet(target, key, roundToFloat16Bits(value));\r\n    }\r\n\r\n    return ReflectSet(target, key, value, receiver);\r\n  },\r\n\r\n  getOwnPropertyDescriptor(target, key) {\r\n    if (isCanonicalIntegerIndexString(key) && ObjectHasOwn(target, key)) {\r\n      const descriptor = ReflectGetOwnPropertyDescriptor(target, key);\r\n      descriptor.value = convertToNumber(descriptor.value);\r\n      return descriptor;\r\n    }\r\n\r\n    return ReflectGetOwnPropertyDescriptor(target, key);\r\n  },\r\n\r\n  defineProperty(target, key, descriptor) {\r\n    if (\r\n      isCanonicalIntegerIndexString(key) &&\r\n      ObjectHasOwn(target, key) &&\r\n      ObjectHasOwn(descriptor, \"value\")\r\n    ) {\r\n      descriptor.value = roundToFloat16Bits(descriptor.value);\r\n      return ReflectDefineProperty(target, key, descriptor);\r\n    }\r\n\r\n    return ReflectDefineProperty(target, key, descriptor);\r\n  },\r\n}));\r\n\r\nexport class Float16Array {\r\n  /** @see https://tc39.es/ecma262/#sec-typedarray */\r\n  constructor(input, _byteOffset, _length) {\r\n    /** @type {Float16BitsArray} */\r\n    let float16bitsArray;\r\n\r\n    if (isFloat16Array(input)) {\r\n      float16bitsArray = ReflectConstruct(NativeUint16Array, [getFloat16BitsArray(input)], new.target);\r\n    } else if (isObject(input) && !isArrayBuffer(input)) { // object without ArrayBuffer\r\n      /** @type {ArrayLike<unknown>} */\r\n      let list;\r\n      /** @type {number} */\r\n      let length;\r\n\r\n      if (isNativeTypedArray(input)) { // TypedArray\r\n        list = input;\r\n        length = TypedArrayPrototypeGetLength(input);\r\n\r\n        const buffer = TypedArrayPrototypeGetBuffer(input);\r\n\r\n        if (IsDetachedBuffer(buffer)) {\r\n          throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\r\n        }\r\n\r\n        if (isNativeBigIntTypedArray(input)) {\r\n          throw NativeTypeError(CANNOT_MIX_BIGINT_AND_OTHER_TYPES);\r\n        }\r\n\r\n        const data = new NativeArrayBuffer(\r\n          length * BYTES_PER_ELEMENT\r\n        );\r\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [data], new.target);\r\n      } else {\r\n        const iterator = input[SymbolIterator];\r\n        if (iterator != null && typeof iterator !== \"function\") {\r\n          throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\r\n        }\r\n\r\n        if (iterator != null) { // Iterable (Array)\r\n          // for optimization\r\n          if (isOrdinaryArray(input)) {\r\n            list = input;\r\n            length = input.length;\r\n          } else {\r\n            // eslint-disable-next-line no-restricted-syntax\r\n            list = [... /** @type {Iterable<unknown>} */ (input)];\r\n            length = list.length;\r\n          }\r\n        } else { // ArrayLike\r\n          list = /** @type {ArrayLike<unknown>} */ (input);\r\n          length = ToLength(list.length);\r\n        }\r\n        float16bitsArray = ReflectConstruct(NativeUint16Array, [length], new.target);\r\n      }\r\n\r\n      // set values\r\n      for (let i = 0; i < length; ++i) {\r\n        float16bitsArray[i] = roundToFloat16Bits(list[i]);\r\n      }\r\n    } else { // primitive, ArrayBuffer\r\n      float16bitsArray = ReflectConstruct(NativeUint16Array, arguments, new.target);\r\n    }\r\n\r\n    /** @type {Float16Array} */\r\n    const proxy = /** @type {any} */ (new NativeProxy(float16bitsArray, handler));\r\n\r\n    // proxy private storage\r\n    WeakMapPrototypeSet(float16bitsArrays, proxy, float16bitsArray);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  /**\r\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\r\n   *\r\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.from\r\n   */\r\n  static from(src, ...opts) {\r\n    const Constructor = this;\r\n\r\n    if (!ReflectHas(Constructor, brand)) {\r\n      throw NativeTypeError(\r\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\r\n      );\r\n    }\r\n\r\n    // for optimization\r\n    if (Constructor === Float16Array) {\r\n      if (isFloat16Array(src) && opts.length === 0) {\r\n        const float16bitsArray = getFloat16BitsArray(src);\r\n        const uint16 = new NativeUint16Array(\r\n          TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n          TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n          TypedArrayPrototypeGetLength(float16bitsArray)\r\n        );\r\n        return new Float16Array(\r\n          TypedArrayPrototypeGetBuffer(TypedArrayPrototypeSlice(uint16))\r\n        );\r\n      }\r\n\r\n      if (opts.length === 0) {\r\n        return new Float16Array(\r\n          TypedArrayPrototypeGetBuffer(\r\n            Uint16ArrayFrom(src, roundToFloat16Bits)\r\n          )\r\n        );\r\n      }\r\n\r\n      const mapFunc = opts[0];\r\n      const thisArg = opts[1];\r\n\r\n      return new Float16Array(\r\n        TypedArrayPrototypeGetBuffer(\r\n          Uint16ArrayFrom(src, function (val, ...args) {\r\n            return roundToFloat16Bits(\r\n              ReflectApply(mapFunc, this, [val, ...safeIfNeeded(args)])\r\n            );\r\n          }, thisArg)\r\n        )\r\n      );\r\n    }\r\n\r\n    /** @type {ArrayLike<unknown>} */\r\n    let list;\r\n    /** @type {number} */\r\n    let length;\r\n\r\n    const iterator = src[SymbolIterator];\r\n    if (iterator != null && typeof iterator !== \"function\") {\r\n      throw NativeTypeError(ITERATOR_PROPERTY_IS_NOT_CALLABLE);\r\n    }\r\n\r\n    if (iterator != null) { // Iterable (TypedArray, Array)\r\n      // for optimization\r\n      if (isOrdinaryArray(src)) {\r\n        list = src;\r\n        length = src.length;\r\n      } else if (isOrdinaryNativeTypedArray(src)) {\r\n        list = src;\r\n        length = TypedArrayPrototypeGetLength(src);\r\n      } else {\r\n        // eslint-disable-next-line no-restricted-syntax\r\n        list = [...src];\r\n        length = list.length;\r\n      }\r\n    } else { // ArrayLike\r\n      if (src == null) {\r\n        throw NativeTypeError(\r\n          CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\r\n        );\r\n      }\r\n      list = NativeObject(src);\r\n      length = ToLength(list.length);\r\n    }\r\n\r\n    const array = new Constructor(length);\r\n\r\n    if (opts.length === 0) {\r\n      for (let i = 0; i < length; ++i) {\r\n        array[i] = /** @type {number} */ (list[i]);\r\n      }\r\n    } else {\r\n      const mapFunc = opts[0];\r\n      const thisArg = opts[1];\r\n      for (let i = 0; i < length; ++i) {\r\n        array[i] = ReflectApply(mapFunc, thisArg, [list[i], i]);\r\n      }\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * limitation: `Object.getOwnPropertyNames(Float16Array)` or `Reflect.ownKeys(Float16Array)` include this key\r\n   *\r\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.of\r\n   */\r\n  static of(...items) {\r\n    const Constructor = this;\r\n\r\n    if (!ReflectHas(Constructor, brand)) {\r\n      throw NativeTypeError(\r\n        THIS_CONSTRUCTOR_IS_NOT_A_SUBCLASS_OF_FLOAT16ARRAY\r\n      );\r\n    }\r\n\r\n    const length = items.length;\r\n\r\n    // for optimization\r\n    if (Constructor === Float16Array) {\r\n      const proxy = new Float16Array(length);\r\n      const float16bitsArray = getFloat16BitsArray(proxy);\r\n\r\n      for (let i = 0; i < length; ++i) {\r\n        float16bitsArray[i] = roundToFloat16Bits(items[i]);\r\n      }\r\n\r\n      return proxy;\r\n    }\r\n\r\n    const array = new Constructor(length);\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      array[i] = items[i];\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys */\r\n  keys() {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    return TypedArrayPrototypeKeys(float16bitsArray);\r\n  }\r\n\r\n  /**\r\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\r\n   *\r\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.values\r\n   */\r\n  values() {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    return wrap((function* () {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      for (const val of TypedArrayPrototypeValues(float16bitsArray)) {\r\n        yield convertToNumber(val);\r\n      }\r\n    })());\r\n  }\r\n\r\n  /**\r\n   * limitation: returns a object whose prototype is not `%ArrayIteratorPrototype%`\r\n   *\r\n   * @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries\r\n   */\r\n  entries() {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    return wrap((function* () {\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      for (const [i, val] of TypedArrayPrototypeEntries(float16bitsArray)) {\r\n        yield /** @type {[Number, number]} */ ([i, convertToNumber(val)]);\r\n      }\r\n    })());\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.at */\r\n  at(index) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const relativeIndex = ToIntegerOrInfinity(index);\r\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\r\n\r\n    if (k < 0 || k >= length) {\r\n      return;\r\n    }\r\n\r\n    return convertToNumber(float16bitsArray[k]);\r\n  }\r\n\r\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.with */\r\n  with(index, value) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const relativeIndex = ToIntegerOrInfinity(index);\r\n    const k = relativeIndex >= 0 ? relativeIndex : length + relativeIndex;\r\n\r\n    const number = +value;\r\n\r\n    if (k < 0 || k >= length) {\r\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\r\n    }\r\n\r\n    // don't use SpeciesConstructor\r\n    const uint16 = new NativeUint16Array(\r\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n      TypedArrayPrototypeGetLength(float16bitsArray)\r\n    );\r\n    const cloned = new Float16Array(\r\n      TypedArrayPrototypeGetBuffer(\r\n        TypedArrayPrototypeSlice(uint16)\r\n      )\r\n    );\r\n    const array = getFloat16BitsArray(cloned);\r\n\r\n    array[k] = roundToFloat16Bits(number);\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.map */\r\n  map(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\r\n\r\n    // for optimization\r\n    if (Constructor === Float16Array) {\r\n      const proxy = new Float16Array(length);\r\n      const array = getFloat16BitsArray(proxy);\r\n\r\n      for (let i = 0; i < length; ++i) {\r\n        const val = convertToNumber(float16bitsArray[i]);\r\n        array[i] = roundToFloat16Bits(\r\n          ReflectApply(callback, thisArg, [val, i, this])\r\n        );\r\n      }\r\n\r\n      return proxy;\r\n    }\r\n\r\n    const array = new Constructor(length);\r\n    assertSpeciesTypedArray(array, length);\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      const val = convertToNumber(float16bitsArray[i]);\r\n      array[i] = ReflectApply(callback, thisArg, [val, i, this]);\r\n    }\r\n\r\n    return /** @type {any} */ (array);\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter */\r\n  filter(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    const kept = [];\r\n    for (let i = 0; i < length; ++i) {\r\n      const val = convertToNumber(float16bitsArray[i]);\r\n      if (ReflectApply(callback, thisArg, [val, i, this])) {\r\n        ArrayPrototypePush(kept, val);\r\n      }\r\n    }\r\n\r\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\r\n    const array = new Constructor(kept);\r\n    assertSpeciesTypedArray(array);\r\n\r\n    return /** @type {any} */ (array);\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce */\r\n  reduce(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    if (length === 0 && opts.length === 0) {\r\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\r\n    }\r\n\r\n    let accumulator, start;\r\n    if (opts.length === 0) {\r\n      accumulator = convertToNumber(float16bitsArray[0]);\r\n      start = 1;\r\n    } else {\r\n      accumulator = opts[0];\r\n      start = 0;\r\n    }\r\n\r\n    for (let i = start; i < length; ++i) {\r\n      accumulator = callback(\r\n        accumulator,\r\n        convertToNumber(float16bitsArray[i]),\r\n        i,\r\n        this\r\n      );\r\n    }\r\n\r\n    return accumulator;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright */\r\n  reduceRight(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    if (length === 0 && opts.length === 0) {\r\n      throw NativeTypeError(REDUCE_OF_EMPTY_ARRAY_WITH_NO_INITIAL_VALUE);\r\n    }\r\n\r\n    let accumulator, start;\r\n    if (opts.length === 0) {\r\n      accumulator = convertToNumber(float16bitsArray[length - 1]);\r\n      start = length - 2;\r\n    } else {\r\n      accumulator = opts[0];\r\n      start = length - 1;\r\n    }\r\n\r\n    for (let i = start; i >= 0; --i) {\r\n      accumulator = callback(\r\n        accumulator,\r\n        convertToNumber(float16bitsArray[i]),\r\n        i,\r\n        this\r\n      );\r\n    }\r\n\r\n    return accumulator;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach */\r\n  forEach(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      ReflectApply(callback, thisArg, [\r\n        convertToNumber(float16bitsArray[i]),\r\n        i,\r\n        this,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.find */\r\n  find(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      const value = convertToNumber(float16bitsArray[i]);\r\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex */\r\n  findIndex(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      const value = convertToNumber(float16bitsArray[i]);\r\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlast */\r\n  findLast(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = length - 1; i >= 0; --i) {\r\n      const value = convertToNumber(float16bitsArray[i]);\r\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @see https://tc39.es/proposal-array-find-from-last/index.html#sec-%typedarray%.prototype.findlastindex */\r\n  findLastIndex(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = length - 1; i >= 0; --i) {\r\n      const value = convertToNumber(float16bitsArray[i]);\r\n      if (ReflectApply(callback, thisArg, [value, i, this])) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.every */\r\n  every(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      if (\r\n        !ReflectApply(callback, thisArg, [\r\n          convertToNumber(float16bitsArray[i]),\r\n          i,\r\n          this,\r\n        ])\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.some */\r\n  some(callback, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const thisArg = opts[0];\r\n\r\n    for (let i = 0; i < length; ++i) {\r\n      if (\r\n        ReflectApply(callback, thisArg, [\r\n          convertToNumber(float16bitsArray[i]),\r\n          i,\r\n          this,\r\n        ])\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.set */\r\n  set(input, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const targetOffset = ToIntegerOrInfinity(opts[0]);\r\n    if (targetOffset < 0) {\r\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\r\n    }\r\n\r\n    if (input == null) {\r\n      throw NativeTypeError(\r\n        CANNOT_CONVERT_UNDEFINED_OR_NULL_TO_OBJECT\r\n      );\r\n    }\r\n\r\n    if (isNativeBigIntTypedArray(input)) {\r\n      throw NativeTypeError(\r\n        CANNOT_MIX_BIGINT_AND_OTHER_TYPES\r\n      );\r\n    }\r\n\r\n    // for optimization\r\n    if (isFloat16Array(input)) {\r\n      // peel off Proxy\r\n      return TypedArrayPrototypeSet(\r\n        getFloat16BitsArray(this),\r\n        getFloat16BitsArray(input),\r\n        targetOffset\r\n      );\r\n    }\r\n\r\n    if (isNativeTypedArray(input)) {\r\n      const buffer = TypedArrayPrototypeGetBuffer(input);\r\n      if (IsDetachedBuffer(buffer)) {\r\n        throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\r\n      }\r\n    }\r\n\r\n    const targetLength = TypedArrayPrototypeGetLength(float16bitsArray);\r\n\r\n    const src = NativeObject(input);\r\n    const srcLength = ToLength(src.length);\r\n\r\n    if (targetOffset === Infinity || srcLength + targetOffset > targetLength) {\r\n      throw NativeRangeError(OFFSET_IS_OUT_OF_BOUNDS);\r\n    }\r\n\r\n    for (let i = 0; i < srcLength; ++i) {\r\n      float16bitsArray[i + targetOffset] = roundToFloat16Bits(src[i]);\r\n    }\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse */\r\n  reverse() {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    TypedArrayPrototypeReverse(float16bitsArray);\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toReversed */\r\n  toReversed() {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    // don't use SpeciesConstructor\r\n    const uint16 = new NativeUint16Array(\r\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n      TypedArrayPrototypeGetLength(float16bitsArray)\r\n    );\r\n    const cloned = new Float16Array(\r\n      TypedArrayPrototypeGetBuffer(\r\n        TypedArrayPrototypeSlice(uint16)\r\n      )\r\n    );\r\n\r\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\r\n    TypedArrayPrototypeReverse(clonedFloat16bitsArray);\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill */\r\n  fill(value, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    TypedArrayPrototypeFill(\r\n      float16bitsArray,\r\n      roundToFloat16Bits(value),\r\n      ...safeIfNeeded(opts)\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin */\r\n  copyWithin(target, start, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    TypedArrayPrototypeCopyWithin(float16bitsArray, target, start, ...safeIfNeeded(opts));\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort */\r\n  sort(compareFn) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\r\n    TypedArrayPrototypeSort(float16bitsArray, (x, y) => {\r\n      return sortCompare(convertToNumber(x), convertToNumber(y));\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @see https://tc39.es/proposal-change-array-by-copy/#sec-%typedarray%.prototype.toSorted */\r\n  toSorted(compareFn) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    if (compareFn !== undefined && typeof compareFn !== \"function\") {\r\n      throw new NativeTypeError(THE_COMPARISON_FUNCTION_MUST_BE_EITHER_A_FUNCTION_OR_UNDEFINED);\r\n    }\r\n    const sortCompare = compareFn !== undefined ? compareFn : defaultCompare;\r\n\r\n    // don't use SpeciesConstructor\r\n    const uint16 = new NativeUint16Array(\r\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n      TypedArrayPrototypeGetLength(float16bitsArray)\r\n    );\r\n    const cloned = new Float16Array(\r\n      TypedArrayPrototypeGetBuffer(\r\n        TypedArrayPrototypeSlice(uint16)\r\n      )\r\n    );\r\n\r\n    const clonedFloat16bitsArray = getFloat16BitsArray(cloned);\r\n    TypedArrayPrototypeSort(clonedFloat16bitsArray, (x, y) => {\r\n      return sortCompare(convertToNumber(x), convertToNumber(y));\r\n    });\r\n\r\n    return cloned;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice */\r\n  slice(start, end) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\r\n\r\n    // for optimization\r\n    if (Constructor === Float16Array) {\r\n      const uint16 = new NativeUint16Array(\r\n        TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n        TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n        TypedArrayPrototypeGetLength(float16bitsArray)\r\n      );\r\n      return new Float16Array(\r\n        TypedArrayPrototypeGetBuffer(\r\n          TypedArrayPrototypeSlice(uint16, start, end)\r\n        )\r\n      );\r\n    }\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n    const relativeStart = ToIntegerOrInfinity(start);\r\n    const relativeEnd = end === undefined ? length : ToIntegerOrInfinity(end);\r\n\r\n    let k;\r\n    if (relativeStart === -Infinity) {\r\n      k = 0;\r\n    } else if (relativeStart < 0) {\r\n      k = length + relativeStart > 0 ? length + relativeStart : 0;\r\n    } else {\r\n      k = length < relativeStart ? length : relativeStart;\r\n    }\r\n\r\n    let final;\r\n    if (relativeEnd === -Infinity) {\r\n      final = 0;\r\n    } else if (relativeEnd < 0) {\r\n      final = length + relativeEnd > 0 ? length + relativeEnd : 0;\r\n    } else {\r\n      final = length < relativeEnd ? length : relativeEnd;\r\n    }\r\n\r\n    const count = final - k > 0 ? final - k : 0;\r\n    const array = new Constructor(count);\r\n    assertSpeciesTypedArray(array, count);\r\n\r\n    if (count === 0) {\r\n      return array;\r\n    }\r\n\r\n    const buffer = TypedArrayPrototypeGetBuffer(float16bitsArray);\r\n    if (IsDetachedBuffer(buffer)) {\r\n      throw NativeTypeError(ATTEMPTING_TO_ACCESS_DETACHED_ARRAYBUFFER);\r\n    }\r\n\r\n    let n = 0;\r\n    while (k < final) {\r\n      array[n] = convertToNumber(float16bitsArray[k]);\r\n      ++k;\r\n      ++n;\r\n    }\r\n\r\n    return /** @type {any} */ (array);\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray */\r\n  subarray(begin, end) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const Constructor = SpeciesConstructor(float16bitsArray, Float16Array);\r\n\r\n    const uint16 = new NativeUint16Array(\r\n      TypedArrayPrototypeGetBuffer(float16bitsArray),\r\n      TypedArrayPrototypeGetByteOffset(float16bitsArray),\r\n      TypedArrayPrototypeGetLength(float16bitsArray)\r\n    );\r\n    const uint16Subarray = TypedArrayPrototypeSubarray(uint16, begin, end);\r\n\r\n    const array = new Constructor(\r\n      TypedArrayPrototypeGetBuffer(uint16Subarray),\r\n      TypedArrayPrototypeGetByteOffset(uint16Subarray),\r\n      TypedArrayPrototypeGetLength(uint16Subarray)\r\n    );\r\n    assertSpeciesTypedArray(array);\r\n\r\n    return /** @type {any} */ (array);\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof */\r\n  indexOf(element, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n\r\n    let from = ToIntegerOrInfinity(opts[0]);\r\n    if (from === Infinity) {\r\n      return -1;\r\n    }\r\n\r\n    if (from < 0) {\r\n      from += length;\r\n      if (from < 0) {\r\n        from = 0;\r\n      }\r\n    }\r\n\r\n    for (let i = from; i < length; ++i) {\r\n      if (\r\n        ObjectHasOwn(float16bitsArray, i) &&\r\n        convertToNumber(float16bitsArray[i]) === element\r\n      ) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof */\r\n  lastIndexOf(element, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n\r\n    let from = opts.length >= 1 ? ToIntegerOrInfinity(opts[0]) : length - 1;\r\n    if (from === -Infinity) {\r\n      return -1;\r\n    }\r\n\r\n    if (from >= 0) {\r\n      from = from < length - 1 ? from : length - 1;\r\n    } else {\r\n      from += length;\r\n    }\r\n\r\n    for (let i = from; i >= 0; --i) {\r\n      if (\r\n        ObjectHasOwn(float16bitsArray, i) &&\r\n        convertToNumber(float16bitsArray[i]) === element\r\n      ) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes */\r\n  includes(element, ...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const length = TypedArrayPrototypeGetLength(float16bitsArray);\r\n\r\n    let from = ToIntegerOrInfinity(opts[0]);\r\n    if (from === Infinity) {\r\n      return false;\r\n    }\r\n\r\n    if (from < 0) {\r\n      from += length;\r\n      if (from < 0) {\r\n        from = 0;\r\n      }\r\n    }\r\n\r\n    const isNaN = NumberIsNaN(element);\r\n    for (let i = from; i < length; ++i) {\r\n      const value = convertToNumber(float16bitsArray[i]);\r\n\r\n      if (isNaN && NumberIsNaN(value)) {\r\n        return true;\r\n      }\r\n\r\n      if (value === element) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.join */\r\n  join(separator) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const array = copyToArray(float16bitsArray);\r\n\r\n    return ArrayPrototypeJoin(array, separator);\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring */\r\n  toLocaleString(...opts) {\r\n    assertFloat16Array(this);\r\n    const float16bitsArray = getFloat16BitsArray(this);\r\n\r\n    const array = copyToArray(float16bitsArray);\r\n\r\n    return ArrayPrototypeToLocaleString(array, ...safeIfNeeded(opts));\r\n  }\r\n\r\n  /** @see https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag */\r\n  get [SymbolToStringTag]() {\r\n    if (isFloat16Array(this)) {\r\n      return /** @type {any} */ (\"Float16Array\");\r\n    }\r\n  }\r\n}\r\n\r\n/** @see https://tc39.es/ecma262/#sec-typedarray.bytes_per_element */\r\nObjectDefineProperty(Float16Array, \"BYTES_PER_ELEMENT\", {\r\n  value: BYTES_PER_ELEMENT,\r\n});\r\n\r\n// limitation: It is peaked by `Object.getOwnPropertySymbols(Float16Array)` and `Reflect.ownKeys(Float16Array)`\r\nObjectDefineProperty(Float16Array, brand, {});\r\n\r\n/** @see https://tc39.es/ecma262/#sec-properties-of-the-typedarray-constructors */\r\nReflectSetPrototypeOf(Float16Array, TypedArray);\r\n\r\nconst Float16ArrayPrototype = Float16Array.prototype;\r\n\r\n/** @see https://tc39.es/ecma262/#sec-typedarray.prototype.bytes_per_element */\r\nObjectDefineProperty(Float16ArrayPrototype, \"BYTES_PER_ELEMENT\", {\r\n  value: BYTES_PER_ELEMENT,\r\n});\r\n\r\n/** @see https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator */\r\nObjectDefineProperty(Float16ArrayPrototype, SymbolIterator, {\r\n  value: Float16ArrayPrototype.values,\r\n  writable: true,\r\n  configurable: true,\r\n});\r\n\r\nReflectSetPrototypeOf(Float16ArrayPrototype, TypedArrayPrototype);\r\n", "import { safeIfNeeded } from \"./_util/arrayIterator.mjs\";\r\nimport { convertToNumber, roundToFloat16Bits } from \"./_util/converter.mjs\";\r\nimport {\r\n  DataViewPrototypeGetUint16,\r\n  DataViewPrototypeSetUint16,\r\n} from \"./_util/primordials.mjs\";\r\n\r\n/**\r\n * returns an unsigned 16-bit float at the specified byte offset from the start of the DataView\r\n *\r\n * @param {DataView} dataView\r\n * @param {number} byteOffset\r\n * @param {[boolean]} opts\r\n * @returns {number}\r\n */\r\nexport function getFloat16(dataView, byteOffset, ...opts) {\r\n  return convertToNumber(\r\n    DataViewPrototypeGetUint16(dataView, byteOffset, ...safeIfNeeded(opts))\r\n  );\r\n}\r\n\r\n/**\r\n * stores an unsigned 16-bit float value at the specified byte offset from the start of the DataView\r\n *\r\n * @param {DataView} dataView\r\n * @param {number} byteOffset\r\n * @param {number} value\r\n * @param {[boolean]} opts\r\n */\r\nexport function setFloat16(dataView, byteOffset, value, ...opts) {\r\n  return DataViewPrototypeSetUint16(\r\n    dataView,\r\n    byteOffset,\r\n    roundToFloat16Bits(value),\r\n    ...safeIfNeeded(opts)\r\n  );\r\n}\r\n", "/** @module geotiffimage */\r\nimport { getFloat16 } from '@petamoriken/float16';\r\nimport getAttribute from 'xml-utils/get-attribute.js';\r\nimport findTagsByName from 'xml-utils/find-tags-by-name.js';\r\n\r\nimport { photometricInterpretations, ExtraSamplesValues } from './globals.js';\r\nimport { fromWhiteIsZero, fromBlackIsZero, fromPalette, fromCMYK, fromYCbCr, fromCIELab } from './rgb.js';\r\nimport { getDecoder } from './compression/index.js';\r\nimport { resample, resampleInterleaved } from './resample.js';\r\n\r\n/**\r\n * @typedef {Object} ReadRasterOptions\r\n * @property {Array<number>} [window=whole window] the subset to read data from in pixels.\r\n * @property {Array<number>} [bbox=whole image] the subset to read data from in\r\n *                                           geographical coordinates.\r\n * @property {Array<number>} [samples=all samples] the selection of samples to read from. Default is all samples.\r\n * @property {boolean} [interleave=false] whether the data shall be read\r\n *                                             in one single array or separate\r\n *                                             arrays.\r\n * @property {Pool} [pool=null] The optional decoder pool to use.\r\n * @property {number} [width] The desired width of the output. When the width is not the\r\n *                                 same as the images, resampling will be performed.\r\n * @property {number} [height] The desired height of the output. When the width is not the\r\n *                                  same as the images, resampling will be performed.\r\n * @property {string} [resampleMethod='nearest'] The desired resampling method.\r\n * @property {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                                       to be aborted\r\n * @property {number|number[]} [fillValue] The value to use for parts of the image\r\n *                                              outside of the images extent. When multiple\r\n *                                              samples are requested, an array of fill values\r\n *                                              can be passed.\r\n */\r\n\r\n/** @typedef {import(\"./geotiff.js\").TypedArray} TypedArray */\r\n/** @typedef {import(\"./geotiff.js\").ReadRasterResult} ReadRasterResult */\r\n\r\nfunction sum(array, start, end) {\r\n  let s = 0;\r\n  for (let i = start; i < end; ++i) {\r\n    s += array[i];\r\n  }\r\n  return s;\r\n}\r\n\r\nfunction arrayForType(format, bitsPerSample, size) {\r\n  switch (format) {\r\n    case 1: // unsigned integer data\r\n      if (bitsPerSample <= 8) {\r\n        return new Uint8Array(size);\r\n      } else if (bitsPerSample <= 16) {\r\n        return new Uint16Array(size);\r\n      } else if (bitsPerSample <= 32) {\r\n        return new Uint32Array(size);\r\n      }\r\n      break;\r\n    case 2: // twos complement signed integer data\r\n      if (bitsPerSample === 8) {\r\n        return new Int8Array(size);\r\n      } else if (bitsPerSample === 16) {\r\n        return new Int16Array(size);\r\n      } else if (bitsPerSample === 32) {\r\n        return new Int32Array(size);\r\n      }\r\n      break;\r\n    case 3: // floating point data\r\n      switch (bitsPerSample) {\r\n        case 16:\r\n        case 32:\r\n          return new Float32Array(size);\r\n        case 64:\r\n          return new Float64Array(size);\r\n        default:\r\n          break;\r\n      }\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  throw Error('Unsupported data format/bitsPerSample');\r\n}\r\n\r\nfunction needsNormalization(format, bitsPerSample) {\r\n  if ((format === 1 || format === 2) && bitsPerSample <= 32 && bitsPerSample % 8 === 0) {\r\n    return false;\r\n  } else if (format === 3 && (bitsPerSample === 16 || bitsPerSample === 32 || bitsPerSample === 64)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction normalizeArray(inBuffer, format, planarConfiguration, samplesPerPixel, bitsPerSample, tileWidth, tileHeight) {\r\n  // const inByteArray = new Uint8Array(inBuffer);\r\n  const view = new DataView(inBuffer);\r\n  const outSize = planarConfiguration === 2\r\n    ? tileHeight * tileWidth\r\n    : tileHeight * tileWidth * samplesPerPixel;\r\n  const samplesToTransfer = planarConfiguration === 2\r\n    ? 1 : samplesPerPixel;\r\n  const outArray = arrayForType(format, bitsPerSample, outSize);\r\n  // let pixel = 0;\r\n\r\n  const bitMask = parseInt('1'.repeat(bitsPerSample), 2);\r\n\r\n  if (format === 1) { // unsigned integer\r\n    // translation of https://github.com/OSGeo/gdal/blob/master/gdal/frmts/gtiff/geotiff.cpp#L7337\r\n    let pixelBitSkip;\r\n    // let sampleBitOffset = 0;\r\n    if (planarConfiguration === 1) {\r\n      pixelBitSkip = samplesPerPixel * bitsPerSample;\r\n      // sampleBitOffset = (samplesPerPixel - 1) * bitsPerSample;\r\n    } else {\r\n      pixelBitSkip = bitsPerSample;\r\n    }\r\n\r\n    // Bits per line rounds up to next byte boundary.\r\n    let bitsPerLine = tileWidth * pixelBitSkip;\r\n    if ((bitsPerLine & 7) !== 0) {\r\n      bitsPerLine = (bitsPerLine + 7) & (~7);\r\n    }\r\n\r\n    for (let y = 0; y < tileHeight; ++y) {\r\n      const lineBitOffset = y * bitsPerLine;\r\n      for (let x = 0; x < tileWidth; ++x) {\r\n        const pixelBitOffset = lineBitOffset + (x * samplesToTransfer * bitsPerSample);\r\n        for (let i = 0; i < samplesToTransfer; ++i) {\r\n          const bitOffset = pixelBitOffset + (i * bitsPerSample);\r\n          const outIndex = (((y * tileWidth) + x) * samplesToTransfer) + i;\r\n\r\n          const byteOffset = Math.floor(bitOffset / 8);\r\n          const innerBitOffset = bitOffset % 8;\r\n          if (innerBitOffset + bitsPerSample <= 8) {\r\n            outArray[outIndex] = (view.getUint8(byteOffset) >> (8 - bitsPerSample) - innerBitOffset) & bitMask;\r\n          } else if (innerBitOffset + bitsPerSample <= 16) {\r\n            outArray[outIndex] = (view.getUint16(byteOffset) >> (16 - bitsPerSample) - innerBitOffset) & bitMask;\r\n          } else if (innerBitOffset + bitsPerSample <= 24) {\r\n            const raw = (view.getUint16(byteOffset) << 8) | (view.getUint8(byteOffset + 2));\r\n            outArray[outIndex] = (raw >> (24 - bitsPerSample) - innerBitOffset) & bitMask;\r\n          } else {\r\n            outArray[outIndex] = (view.getUint32(byteOffset) >> (32 - bitsPerSample) - innerBitOffset) & bitMask;\r\n          }\r\n\r\n          // let outWord = 0;\r\n          // for (let bit = 0; bit < bitsPerSample; ++bit) {\r\n          //   if (inByteArray[bitOffset >> 3]\r\n          //     & (0x80 >> (bitOffset & 7))) {\r\n          //     outWord |= (1 << (bitsPerSample - 1 - bit));\r\n          //   }\r\n          //   ++bitOffset;\r\n          // }\r\n\r\n          // outArray[outIndex] = outWord;\r\n          // outArray[pixel] = outWord;\r\n          // pixel += 1;\r\n        }\r\n        // bitOffset = bitOffset + pixelBitSkip - bitsPerSample;\r\n      }\r\n    }\r\n  } else if (format === 3) { // floating point\r\n    // Float16 is handled elsewhere\r\n    // normalize 16/24 bit floats to 32 bit floats in the array\r\n    // console.time();\r\n    // if (bitsPerSample === 16) {\r\n    //   for (let byte = 0, outIndex = 0; byte < inBuffer.byteLength; byte += 2, ++outIndex) {\r\n    //     outArray[outIndex] = getFloat16(view, byte);\r\n    //   }\r\n    // }\r\n    // console.timeEnd()\r\n  }\r\n\r\n  return outArray.buffer;\r\n}\r\n\r\n/**\r\n * GeoTIFF sub-file image.\r\n */\r\nclass GeoTIFFImage {\r\n  /**\r\n   * @constructor\r\n   * @param {Object} fileDirectory The parsed file directory\r\n   * @param {Object} geoKeys The parsed geo-keys\r\n   * @param {DataView} dataView The DataView for the underlying file.\r\n   * @param {Boolean} littleEndian Whether the file is encoded in little or big endian\r\n   * @param {Boolean} cache Whether or not decoded tiles shall be cached\r\n   * @param {import('./source/basesource').BaseSource} source The datasource to read from\r\n   */\r\n  constructor(fileDirectory, geoKeys, dataView, littleEndian, cache, source) {\r\n    this.fileDirectory = fileDirectory;\r\n    this.geoKeys = geoKeys;\r\n    this.dataView = dataView;\r\n    this.littleEndian = littleEndian;\r\n    this.tiles = cache ? {} : null;\r\n    this.isTiled = !fileDirectory.StripOffsets;\r\n    const planarConfiguration = fileDirectory.PlanarConfiguration;\r\n    this.planarConfiguration = (typeof planarConfiguration === 'undefined') ? 1 : planarConfiguration;\r\n    if (this.planarConfiguration !== 1 && this.planarConfiguration !== 2) {\r\n      throw new Error('Invalid planar configuration.');\r\n    }\r\n\r\n    this.source = source;\r\n  }\r\n\r\n  /**\r\n   * Returns the associated parsed file directory.\r\n   * @returns {Object} the parsed file directory\r\n   */\r\n  getFileDirectory() {\r\n    return this.fileDirectory;\r\n  }\r\n\r\n  /**\r\n   * Returns the associated parsed geo keys.\r\n   * @returns {Object} the parsed geo keys\r\n   */\r\n  getGeoKeys() {\r\n    return this.geoKeys;\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the image.\r\n   * @returns {Number} the width of the image\r\n   */\r\n  getWidth() {\r\n    return this.fileDirectory.ImageWidth;\r\n  }\r\n\r\n  /**\r\n   * Returns the height of the image.\r\n   * @returns {Number} the height of the image\r\n   */\r\n  getHeight() {\r\n    return this.fileDirectory.ImageLength;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of samples per pixel.\r\n   * @returns {Number} the number of samples per pixel\r\n   */\r\n  getSamplesPerPixel() {\r\n    return typeof this.fileDirectory.SamplesPerPixel !== 'undefined'\r\n      ? this.fileDirectory.SamplesPerPixel : 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the width of each tile.\r\n   * @returns {Number} the width of each tile\r\n   */\r\n  getTileWidth() {\r\n    return this.isTiled ? this.fileDirectory.TileWidth : this.getWidth();\r\n  }\r\n\r\n  /**\r\n   * Returns the height of each tile.\r\n   * @returns {Number} the height of each tile\r\n   */\r\n  getTileHeight() {\r\n    if (this.isTiled) {\r\n      return this.fileDirectory.TileLength;\r\n    }\r\n    if (typeof this.fileDirectory.RowsPerStrip !== 'undefined') {\r\n      return Math.min(this.fileDirectory.RowsPerStrip, this.getHeight());\r\n    }\r\n    return this.getHeight();\r\n  }\r\n\r\n  getBlockWidth() {\r\n    return this.getTileWidth();\r\n  }\r\n\r\n  getBlockHeight(y) {\r\n    if (this.isTiled || (y + 1) * this.getTileHeight() <= this.getHeight()) {\r\n      return this.getTileHeight();\r\n    } else {\r\n      return this.getHeight() - (y * this.getTileHeight());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates the number of bytes for each pixel across all samples. Only full\r\n   * bytes are supported, an exception is thrown when this is not the case.\r\n   * @returns {Number} the bytes per pixel\r\n   */\r\n  getBytesPerPixel() {\r\n    let bytes = 0;\r\n    for (let i = 0; i < this.fileDirectory.BitsPerSample.length; ++i) {\r\n      bytes += this.getSampleByteSize(i);\r\n    }\r\n    return bytes;\r\n  }\r\n\r\n  getSampleByteSize(i) {\r\n    if (i >= this.fileDirectory.BitsPerSample.length) {\r\n      throw new RangeError(`Sample index ${i} is out of range.`);\r\n    }\r\n    return Math.ceil(this.fileDirectory.BitsPerSample[i] / 8);\r\n  }\r\n\r\n  getReaderForSample(sampleIndex) {\r\n    const format = this.fileDirectory.SampleFormat\r\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\r\n    const bitsPerSample = this.fileDirectory.BitsPerSample[sampleIndex];\r\n    switch (format) {\r\n      case 1: // unsigned integer data\r\n        if (bitsPerSample <= 8) {\r\n          return DataView.prototype.getUint8;\r\n        } else if (bitsPerSample <= 16) {\r\n          return DataView.prototype.getUint16;\r\n        } else if (bitsPerSample <= 32) {\r\n          return DataView.prototype.getUint32;\r\n        }\r\n        break;\r\n      case 2: // twos complement signed integer data\r\n        if (bitsPerSample <= 8) {\r\n          return DataView.prototype.getInt8;\r\n        } else if (bitsPerSample <= 16) {\r\n          return DataView.prototype.getInt16;\r\n        } else if (bitsPerSample <= 32) {\r\n          return DataView.prototype.getInt32;\r\n        }\r\n        break;\r\n      case 3:\r\n        switch (bitsPerSample) {\r\n          case 16:\r\n            return function (offset, littleEndian) {\r\n              return getFloat16(this, offset, littleEndian);\r\n            };\r\n          case 32:\r\n            return DataView.prototype.getFloat32;\r\n          case 64:\r\n            return DataView.prototype.getFloat64;\r\n          default:\r\n            break;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    throw Error('Unsupported data format/bitsPerSample');\r\n  }\r\n\r\n  getSampleFormat(sampleIndex = 0) {\r\n    return this.fileDirectory.SampleFormat\r\n      ? this.fileDirectory.SampleFormat[sampleIndex] : 1;\r\n  }\r\n\r\n  getBitsPerSample(sampleIndex = 0) {\r\n    return this.fileDirectory.BitsPerSample[sampleIndex];\r\n  }\r\n\r\n  getArrayForSample(sampleIndex, size) {\r\n    const format = this.getSampleFormat(sampleIndex);\r\n    const bitsPerSample = this.getBitsPerSample(sampleIndex);\r\n    return arrayForType(format, bitsPerSample, size);\r\n  }\r\n\r\n  /**\r\n   * Returns the decoded strip or tile.\r\n   * @param {Number} x the strip or tile x-offset\r\n   * @param {Number} y the tile y-offset (0 for stripped images)\r\n   * @param {Number} sample the sample to get for separated samples\r\n   * @param {import(\"./geotiff\").Pool|import(\"./geotiff\").BaseDecoder} poolOrDecoder the decoder or decoder pool\r\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n   *                               to be aborted\r\n   * @returns {Promise.<ArrayBuffer>}\r\n   */\r\n  async getTileOrStrip(x, y, sample, poolOrDecoder, signal) {\r\n    const numTilesPerRow = Math.ceil(this.getWidth() / this.getTileWidth());\r\n    const numTilesPerCol = Math.ceil(this.getHeight() / this.getTileHeight());\r\n    let index;\r\n    const { tiles } = this;\r\n    if (this.planarConfiguration === 1) {\r\n      index = (y * numTilesPerRow) + x;\r\n    } else if (this.planarConfiguration === 2) {\r\n      index = (sample * numTilesPerRow * numTilesPerCol) + (y * numTilesPerRow) + x;\r\n    }\r\n\r\n    let offset;\r\n    let byteCount;\r\n    if (this.isTiled) {\r\n      offset = this.fileDirectory.TileOffsets[index];\r\n      byteCount = this.fileDirectory.TileByteCounts[index];\r\n    } else {\r\n      offset = this.fileDirectory.StripOffsets[index];\r\n      byteCount = this.fileDirectory.StripByteCounts[index];\r\n    }\r\n    const slice = (await this.source.fetch([{ offset, length: byteCount }], signal))[0];\r\n\r\n    let request;\r\n    if (tiles === null || !tiles[index]) {\r\n    // resolve each request by potentially applying array normalization\r\n      request = (async () => {\r\n        let data = await poolOrDecoder.decode(this.fileDirectory, slice);\r\n        const sampleFormat = this.getSampleFormat();\r\n        const bitsPerSample = this.getBitsPerSample();\r\n        if (needsNormalization(sampleFormat, bitsPerSample)) {\r\n          data = normalizeArray(\r\n            data,\r\n            sampleFormat,\r\n            this.planarConfiguration,\r\n            this.getSamplesPerPixel(),\r\n            bitsPerSample,\r\n            this.getTileWidth(),\r\n            this.getBlockHeight(y),\r\n          );\r\n        }\r\n        return data;\r\n      })();\r\n\r\n      // set the cache\r\n      if (tiles !== null) {\r\n        tiles[index] = request;\r\n      }\r\n    } else {\r\n      // get from the cache\r\n      request = tiles[index];\r\n    }\r\n\r\n    // cache the tile request\r\n    return { x, y, sample, data: await request };\r\n  }\r\n\r\n  /**\r\n   * Internal read function.\r\n   * @private\r\n   * @param {Array} imageWindow The image window in pixel coordinates\r\n   * @param {Array} samples The selected samples (0-based indices)\r\n   * @param {TypedArray|TypedArray[]} valueArrays The array(s) to write into\r\n   * @param {Boolean} interleave Whether or not to write in an interleaved manner\r\n   * @param {import(\"./geotiff\").Pool|AbstractDecoder} poolOrDecoder the decoder or decoder pool\r\n   * @param {number} width the width of window to be read into\r\n   * @param {number} height the height of window to be read into\r\n   * @param {number} resampleMethod the resampling method to be used when interpolating\r\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n   *                               to be aborted\r\n   * @returns {Promise<ReadRasterResult>}\r\n   */\r\n  async _readRaster(imageWindow, samples, valueArrays, interleave, poolOrDecoder, width,\r\n    height, resampleMethod, signal) {\r\n    const tileWidth = this.getTileWidth();\r\n    const tileHeight = this.getTileHeight();\r\n    const imageWidth = this.getWidth();\r\n    const imageHeight = this.getHeight();\r\n\r\n    const minXTile = Math.max(Math.floor(imageWindow[0] / tileWidth), 0);\r\n    const maxXTile = Math.min(\r\n      Math.ceil(imageWindow[2] / tileWidth),\r\n      Math.ceil(imageWidth / tileWidth),\r\n    );\r\n    const minYTile = Math.max(Math.floor(imageWindow[1] / tileHeight), 0);\r\n    const maxYTile = Math.min(\r\n      Math.ceil(imageWindow[3] / tileHeight),\r\n      Math.ceil(imageHeight / tileHeight),\r\n    );\r\n    const windowWidth = imageWindow[2] - imageWindow[0];\r\n\r\n    let bytesPerPixel = this.getBytesPerPixel();\r\n\r\n    const srcSampleOffsets = [];\r\n    const sampleReaders = [];\r\n    for (let i = 0; i < samples.length; ++i) {\r\n      if (this.planarConfiguration === 1) {\r\n        srcSampleOffsets.push(sum(this.fileDirectory.BitsPerSample, 0, samples[i]) / 8);\r\n      } else {\r\n        srcSampleOffsets.push(0);\r\n      }\r\n      sampleReaders.push(this.getReaderForSample(samples[i]));\r\n    }\r\n\r\n    const promises = [];\r\n    const { littleEndian } = this;\r\n\r\n    for (let yTile = minYTile; yTile < maxYTile; ++yTile) {\r\n      for (let xTile = minXTile; xTile < maxXTile; ++xTile) {\r\n        for (let sampleIndex = 0; sampleIndex < samples.length; ++sampleIndex) {\r\n          const si = sampleIndex;\r\n          const sample = samples[sampleIndex];\r\n          if (this.planarConfiguration === 2) {\r\n            bytesPerPixel = this.getSampleByteSize(sampleIndex);\r\n          }\r\n          const promise = this.getTileOrStrip(xTile, yTile, sample, poolOrDecoder, signal).then((tile) => {\r\n            const buffer = tile.data;\r\n            const dataView = new DataView(buffer);\r\n            const blockHeight = this.getBlockHeight(tile.y);\r\n            const firstLine = tile.y * tileHeight;\r\n            const firstCol = tile.x * tileWidth;\r\n            const lastLine = firstLine + blockHeight;\r\n            const lastCol = (tile.x + 1) * tileWidth;\r\n            const reader = sampleReaders[si];\r\n\r\n            const ymax = Math.min(blockHeight, blockHeight - (lastLine - imageWindow[3]), imageHeight - firstLine);\r\n            const xmax = Math.min(tileWidth, tileWidth - (lastCol - imageWindow[2]), imageWidth - firstCol);\r\n\r\n            for (let y = Math.max(0, imageWindow[1] - firstLine); y < ymax; ++y) {\r\n              for (let x = Math.max(0, imageWindow[0] - firstCol); x < xmax; ++x) {\r\n                const pixelOffset = ((y * tileWidth) + x) * bytesPerPixel;\r\n                const value = reader.call(\r\n                  dataView, pixelOffset + srcSampleOffsets[si], littleEndian,\r\n                );\r\n                let windowCoordinate;\r\n                if (interleave) {\r\n                  windowCoordinate = ((y + firstLine - imageWindow[1]) * windowWidth * samples.length)\r\n                    + ((x + firstCol - imageWindow[0]) * samples.length)\r\n                    + si;\r\n                  valueArrays[windowCoordinate] = value;\r\n                } else {\r\n                  windowCoordinate = (\r\n                    (y + firstLine - imageWindow[1]) * windowWidth\r\n                  ) + x + firstCol - imageWindow[0];\r\n                  valueArrays[si][windowCoordinate] = value;\r\n                }\r\n              }\r\n            }\r\n          });\r\n          promises.push(promise);\r\n        }\r\n      }\r\n    }\r\n    await Promise.all(promises);\r\n\r\n    if ((width && (imageWindow[2] - imageWindow[0]) !== width)\r\n        || (height && (imageWindow[3] - imageWindow[1]) !== height)) {\r\n      let resampled;\r\n      if (interleave) {\r\n        resampled = resampleInterleaved(\r\n          valueArrays,\r\n          imageWindow[2] - imageWindow[0],\r\n          imageWindow[3] - imageWindow[1],\r\n          width, height,\r\n          samples.length,\r\n          resampleMethod,\r\n        );\r\n      } else {\r\n        resampled = resample(\r\n          valueArrays,\r\n          imageWindow[2] - imageWindow[0],\r\n          imageWindow[3] - imageWindow[1],\r\n          width, height,\r\n          resampleMethod,\r\n        );\r\n      }\r\n      resampled.width = width;\r\n      resampled.height = height;\r\n      return resampled;\r\n    }\r\n\r\n    valueArrays.width = width || imageWindow[2] - imageWindow[0];\r\n    valueArrays.height = height || imageWindow[3] - imageWindow[1];\r\n\r\n    return valueArrays;\r\n  }\r\n\r\n  /**\r\n   * Reads raster data from the image. This function reads all selected samples\r\n   * into separate arrays of the correct type for that sample or into a single\r\n   * combined array when `interleave` is set. When provided, only a subset\r\n   * of the raster is read for each sample.\r\n   *\r\n   * @param {ReadRasterOptions} [options={}] optional parameters\r\n   * @returns {Promise<ReadRasterResult>} the decoded arrays as a promise\r\n   */\r\n  async readRasters({\r\n    window: wnd, samples = [], interleave, pool = null,\r\n    width, height, resampleMethod, fillValue, signal,\r\n  } = {}) {\r\n    const imageWindow = wnd || [0, 0, this.getWidth(), this.getHeight()];\r\n\r\n    // check parameters\r\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\r\n      throw new Error('Invalid subsets');\r\n    }\r\n\r\n    const imageWindowWidth = imageWindow[2] - imageWindow[0];\r\n    const imageWindowHeight = imageWindow[3] - imageWindow[1];\r\n    const numPixels = imageWindowWidth * imageWindowHeight;\r\n    const samplesPerPixel = this.getSamplesPerPixel();\r\n\r\n    if (!samples || !samples.length) {\r\n      for (let i = 0; i < samplesPerPixel; ++i) {\r\n        samples.push(i);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < samples.length; ++i) {\r\n        if (samples[i] >= samplesPerPixel) {\r\n          return Promise.reject(new RangeError(`Invalid sample index '${samples[i]}'.`));\r\n        }\r\n      }\r\n    }\r\n    let valueArrays;\r\n    if (interleave) {\r\n      const format = this.fileDirectory.SampleFormat\r\n        ? Math.max.apply(null, this.fileDirectory.SampleFormat) : 1;\r\n      const bitsPerSample = Math.max.apply(null, this.fileDirectory.BitsPerSample);\r\n      valueArrays = arrayForType(format, bitsPerSample, numPixels * samples.length);\r\n      if (fillValue) {\r\n        valueArrays.fill(fillValue);\r\n      }\r\n    } else {\r\n      valueArrays = [];\r\n      for (let i = 0; i < samples.length; ++i) {\r\n        const valueArray = this.getArrayForSample(samples[i], numPixels);\r\n        if (Array.isArray(fillValue) && i < fillValue.length) {\r\n          valueArray.fill(fillValue[i]);\r\n        } else if (fillValue && !Array.isArray(fillValue)) {\r\n          valueArray.fill(fillValue);\r\n        }\r\n        valueArrays.push(valueArray);\r\n      }\r\n    }\r\n\r\n    const poolOrDecoder = pool || await getDecoder(this.fileDirectory);\r\n\r\n    const result = await this._readRaster(\r\n      imageWindow, samples, valueArrays, interleave, poolOrDecoder, width, height, resampleMethod, signal,\r\n    );\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Reads raster data from the image as RGB. The result is always an\r\n   * interleaved typed array.\r\n   * Colorspaces other than RGB will be transformed to RGB, color maps expanded.\r\n   * When no other method is applicable, the first sample is used to produce a\r\n   * grayscale image.\r\n   * When provided, only a subset of the raster is read for each sample.\r\n   *\r\n   * @param {Object} [options] optional parameters\r\n   * @param {Array<number>} [options.window] the subset to read data from in pixels.\r\n   * @param {boolean} [options.interleave=true] whether the data shall be read\r\n   *                                             in one single array or separate\r\n   *                                             arrays.\r\n   * @param {import(\"./geotiff\").Pool} [options.pool=null] The optional decoder pool to use.\r\n   * @param {number} [options.width] The desired width of the output. When the width is no the\r\n   *                                 same as the images, resampling will be performed.\r\n   * @param {number} [options.height] The desired height of the output. When the width is no the\r\n   *                                  same as the images, resampling will be performed.\r\n   * @param {string} [options.resampleMethod='nearest'] The desired resampling method.\r\n   * @param {boolean} [options.enableAlpha=false] Enable reading alpha channel if present.\r\n   * @param {AbortSignal} [options.signal] An AbortSignal that may be signalled if the request is\r\n   *                                       to be aborted\r\n   * @returns {Promise<ReadRasterResult>} the RGB array as a Promise\r\n   */\r\n  async readRGB({ window, interleave = true, pool = null, width, height,\r\n    resampleMethod, enableAlpha = false, signal } = {}) {\r\n    const imageWindow = window || [0, 0, this.getWidth(), this.getHeight()];\r\n\r\n    // check parameters\r\n    if (imageWindow[0] > imageWindow[2] || imageWindow[1] > imageWindow[3]) {\r\n      throw new Error('Invalid subsets');\r\n    }\r\n\r\n    const pi = this.fileDirectory.PhotometricInterpretation;\r\n\r\n    if (pi === photometricInterpretations.RGB) {\r\n      let s = [0, 1, 2];\r\n      if ((!(this.fileDirectory.ExtraSamples === ExtraSamplesValues.Unspecified)) && enableAlpha) {\r\n        s = [];\r\n        for (let i = 0; i < this.fileDirectory.BitsPerSample.length; i += 1) {\r\n          s.push(i);\r\n        }\r\n      }\r\n      return this.readRasters({\r\n        window,\r\n        interleave,\r\n        samples: s,\r\n        pool,\r\n        width,\r\n        height,\r\n        resampleMethod,\r\n        signal,\r\n      });\r\n    }\r\n\r\n    let samples;\r\n    switch (pi) {\r\n      case photometricInterpretations.WhiteIsZero:\r\n      case photometricInterpretations.BlackIsZero:\r\n      case photometricInterpretations.Palette:\r\n        samples = [0];\r\n        break;\r\n      case photometricInterpretations.CMYK:\r\n        samples = [0, 1, 2, 3];\r\n        break;\r\n      case photometricInterpretations.YCbCr:\r\n      case photometricInterpretations.CIELab:\r\n        samples = [0, 1, 2];\r\n        break;\r\n      default:\r\n        throw new Error('Invalid or unsupported photometric interpretation.');\r\n    }\r\n\r\n    const subOptions = {\r\n      window: imageWindow,\r\n      interleave: true,\r\n      samples,\r\n      pool,\r\n      width,\r\n      height,\r\n      resampleMethod,\r\n      signal,\r\n    };\r\n    const { fileDirectory } = this;\r\n    const raster = await this.readRasters(subOptions);\r\n\r\n    const max = 2 ** this.fileDirectory.BitsPerSample[0];\r\n    let data;\r\n    switch (pi) {\r\n      case photometricInterpretations.WhiteIsZero:\r\n        data = fromWhiteIsZero(raster, max);\r\n        break;\r\n      case photometricInterpretations.BlackIsZero:\r\n        data = fromBlackIsZero(raster, max);\r\n        break;\r\n      case photometricInterpretations.Palette:\r\n        data = fromPalette(raster, fileDirectory.ColorMap);\r\n        break;\r\n      case photometricInterpretations.CMYK:\r\n        data = fromCMYK(raster);\r\n        break;\r\n      case photometricInterpretations.YCbCr:\r\n        data = fromYCbCr(raster);\r\n        break;\r\n      case photometricInterpretations.CIELab:\r\n        data = fromCIELab(raster);\r\n        break;\r\n      default:\r\n        throw new Error('Unsupported photometric interpretation.');\r\n    }\r\n\r\n    // if non-interleaved data is requested, we must split the channels\r\n    // into their respective arrays\r\n    if (!interleave) {\r\n      const red = new Uint8Array(data.length / 3);\r\n      const green = new Uint8Array(data.length / 3);\r\n      const blue = new Uint8Array(data.length / 3);\r\n      for (let i = 0, j = 0; i < data.length; i += 3, ++j) {\r\n        red[j] = data[i];\r\n        green[j] = data[i + 1];\r\n        blue[j] = data[i + 2];\r\n      }\r\n      data = [red, green, blue];\r\n    }\r\n\r\n    data.width = raster.width;\r\n    data.height = raster.height;\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of tiepoints.\r\n   * @returns {Object[]}\r\n   */\r\n  getTiePoints() {\r\n    if (!this.fileDirectory.ModelTiepoint) {\r\n      return [];\r\n    }\r\n\r\n    const tiePoints = [];\r\n    for (let i = 0; i < this.fileDirectory.ModelTiepoint.length; i += 6) {\r\n      tiePoints.push({\r\n        i: this.fileDirectory.ModelTiepoint[i],\r\n        j: this.fileDirectory.ModelTiepoint[i + 1],\r\n        k: this.fileDirectory.ModelTiepoint[i + 2],\r\n        x: this.fileDirectory.ModelTiepoint[i + 3],\r\n        y: this.fileDirectory.ModelTiepoint[i + 4],\r\n        z: this.fileDirectory.ModelTiepoint[i + 5],\r\n      });\r\n    }\r\n    return tiePoints;\r\n  }\r\n\r\n  /**\r\n   * Returns the parsed GDAL metadata items.\r\n   *\r\n   * If sample is passed to null, dataset-level metadata will be returned.\r\n   * Otherwise only metadata specific to the provided sample will be returned.\r\n   *\r\n   * @param {number} [sample=null] The sample index.\r\n   * @returns {Object}\r\n   */\r\n  getGDALMetadata(sample = null) {\r\n    const metadata = {};\r\n    if (!this.fileDirectory.GDAL_METADATA) {\r\n      return null;\r\n    }\r\n    const string = this.fileDirectory.GDAL_METADATA;\r\n\r\n    let items = findTagsByName(string, 'Item');\r\n\r\n    if (sample === null) {\r\n      items = items.filter((item) => getAttribute(item, 'sample') === undefined);\r\n    } else {\r\n      items = items.filter((item) => Number(getAttribute(item, 'sample')) === sample);\r\n    }\r\n\r\n    for (let i = 0; i < items.length; ++i) {\r\n      const item = items[i];\r\n      metadata[getAttribute(item, 'name')] = item.inner;\r\n    }\r\n    return metadata;\r\n  }\r\n\r\n  /**\r\n   * Returns the GDAL nodata value\r\n   * @returns {number|null}\r\n   */\r\n  getGDALNoData() {\r\n    if (!this.fileDirectory.GDAL_NODATA) {\r\n      return null;\r\n    }\r\n    const string = this.fileDirectory.GDAL_NODATA;\r\n    return Number(string.substring(0, string.length - 1));\r\n  }\r\n\r\n  /**\r\n   * Returns the image origin as a XYZ-vector. When the image has no affine\r\n   * transformation, then an exception is thrown.\r\n   * @returns {Array<number>} The origin as a vector\r\n   */\r\n  getOrigin() {\r\n    const tiePoints = this.fileDirectory.ModelTiepoint;\r\n    const modelTransformation = this.fileDirectory.ModelTransformation;\r\n    if (tiePoints && tiePoints.length === 6) {\r\n      return [\r\n        tiePoints[3],\r\n        tiePoints[4],\r\n        tiePoints[5],\r\n      ];\r\n    }\r\n    if (modelTransformation) {\r\n      return [\r\n        modelTransformation[3],\r\n        modelTransformation[7],\r\n        modelTransformation[11],\r\n      ];\r\n    }\r\n    throw new Error('The image does not have an affine transformation.');\r\n  }\r\n\r\n  /**\r\n   * Returns the image resolution as a XYZ-vector. When the image has no affine\r\n   * transformation, then an exception is thrown.\r\n   * @param {GeoTIFFImage} [referenceImage=null] A reference image to calculate the resolution from\r\n   *                                             in cases when the current image does not have the\r\n   *                                             required tags on its own.\r\n   * @returns {Array<number>} The resolution as a vector\r\n   */\r\n  getResolution(referenceImage = null) {\r\n    const modelPixelScale = this.fileDirectory.ModelPixelScale;\r\n    const modelTransformation = this.fileDirectory.ModelTransformation;\r\n\r\n    if (modelPixelScale) {\r\n      return [\r\n        modelPixelScale[0],\r\n        -modelPixelScale[1],\r\n        modelPixelScale[2],\r\n      ];\r\n    }\r\n    if (modelTransformation) {\r\n      return [\r\n        modelTransformation[0],\r\n        modelTransformation[5],\r\n        modelTransformation[10],\r\n      ];\r\n    }\r\n\r\n    if (referenceImage) {\r\n      const [refResX, refResY, refResZ] = referenceImage.getResolution();\r\n      return [\r\n        refResX * referenceImage.getWidth() / this.getWidth(),\r\n        refResY * referenceImage.getHeight() / this.getHeight(),\r\n        refResZ * referenceImage.getWidth() / this.getWidth(),\r\n      ];\r\n    }\r\n\r\n    throw new Error('The image does not have an affine transformation.');\r\n  }\r\n\r\n  /**\r\n   * Returns whether or not the pixels of the image depict an area (or point).\r\n   * @returns {Boolean} Whether the pixels are a point\r\n   */\r\n  pixelIsArea() {\r\n    return this.geoKeys.GTRasterTypeGeoKey === 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the image bounding box as an array of 4 values: min-x, min-y,\r\n   * max-x and max-y. When the image has no affine transformation, then an\r\n   * exception is thrown.\r\n   * @returns {Array<number>} The bounding box\r\n   */\r\n  getBoundingBox() {\r\n    const origin = this.getOrigin();\r\n    const resolution = this.getResolution();\r\n\r\n    const x1 = origin[0];\r\n    const y1 = origin[1];\r\n\r\n    const x2 = x1 + (resolution[0] * this.getWidth());\r\n    const y2 = y1 + (resolution[1] * this.getHeight());\r\n\r\n    return [\r\n      Math.min(x1, x2),\r\n      Math.min(y1, y2),\r\n      Math.max(x1, x2),\r\n      Math.max(y1, y2),\r\n    ];\r\n  }\r\n}\r\n\r\nexport default GeoTIFFImage;\r\n", "export function fromWhiteIsZero(raster, max) {\r\n  const { width, height } = raster;\r\n  const rgbRaster = new Uint8Array(width * height * 3);\r\n  let value;\r\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\r\n    value = 256 - (raster[i] / max * 256);\r\n    rgbRaster[j] = value;\r\n    rgbRaster[j + 1] = value;\r\n    rgbRaster[j + 2] = value;\r\n  }\r\n  return rgbRaster;\r\n}\r\n\r\nexport function fromBlackIsZero(raster, max) {\r\n  const { width, height } = raster;\r\n  const rgbRaster = new Uint8Array(width * height * 3);\r\n  let value;\r\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\r\n    value = raster[i] / max * 256;\r\n    rgbRaster[j] = value;\r\n    rgbRaster[j + 1] = value;\r\n    rgbRaster[j + 2] = value;\r\n  }\r\n  return rgbRaster;\r\n}\r\n\r\nexport function fromPalette(raster, colorMap) {\r\n  const { width, height } = raster;\r\n  const rgbRaster = new Uint8Array(width * height * 3);\r\n  const greenOffset = colorMap.length / 3;\r\n  const blueOffset = colorMap.length / 3 * 2;\r\n  for (let i = 0, j = 0; i < raster.length; ++i, j += 3) {\r\n    const mapIndex = raster[i];\r\n    rgbRaster[j] = colorMap[mapIndex] / 65536 * 256;\r\n    rgbRaster[j + 1] = colorMap[mapIndex + greenOffset] / 65536 * 256;\r\n    rgbRaster[j + 2] = colorMap[mapIndex + blueOffset] / 65536 * 256;\r\n  }\r\n  return rgbRaster;\r\n}\r\n\r\nexport function fromCMYK(cmykRaster) {\r\n  const { width, height } = cmykRaster;\r\n  const rgbRaster = new Uint8Array(width * height * 3);\r\n  for (let i = 0, j = 0; i < cmykRaster.length; i += 4, j += 3) {\r\n    const c = cmykRaster[i];\r\n    const m = cmykRaster[i + 1];\r\n    const y = cmykRaster[i + 2];\r\n    const k = cmykRaster[i + 3];\r\n\r\n    rgbRaster[j] = 255 * ((255 - c) / 256) * ((255 - k) / 256);\r\n    rgbRaster[j + 1] = 255 * ((255 - m) / 256) * ((255 - k) / 256);\r\n    rgbRaster[j + 2] = 255 * ((255 - y) / 256) * ((255 - k) / 256);\r\n  }\r\n  return rgbRaster;\r\n}\r\n\r\nexport function fromYCbCr(yCbCrRaster) {\r\n  const { width, height } = yCbCrRaster;\r\n  const rgbRaster = new Uint8ClampedArray(width * height * 3);\r\n  for (let i = 0, j = 0; i < yCbCrRaster.length; i += 3, j += 3) {\r\n    const y = yCbCrRaster[i];\r\n    const cb = yCbCrRaster[i + 1];\r\n    const cr = yCbCrRaster[i + 2];\r\n\r\n    rgbRaster[j] = (y + (1.40200 * (cr - 0x80)));\r\n    rgbRaster[j + 1] = (y - (0.34414 * (cb - 0x80)) - (0.71414 * (cr - 0x80)));\r\n    rgbRaster[j + 2] = (y + (1.77200 * (cb - 0x80)));\r\n  }\r\n  return rgbRaster;\r\n}\r\n\r\nconst Xn = 0.95047;\r\nconst Yn = 1.00000;\r\nconst Zn = 1.08883;\r\n\r\n// from https://github.com/antimatter15/rgb-lab/blob/master/color.js\r\n\r\nexport function fromCIELab(cieLabRaster) {\r\n  const { width, height } = cieLabRaster;\r\n  const rgbRaster = new Uint8Array(width * height * 3);\r\n\r\n  for (let i = 0, j = 0; i < cieLabRaster.length; i += 3, j += 3) {\r\n    const L = cieLabRaster[i + 0];\r\n    const a_ = cieLabRaster[i + 1] << 24 >> 24; // conversion from uint8 to int8\r\n    const b_ = cieLabRaster[i + 2] << 24 >> 24; // same\r\n\r\n    let y = (L + 16) / 116;\r\n    let x = (a_ / 500) + y;\r\n    let z = y - (b_ / 200);\r\n    let r;\r\n    let g;\r\n    let b;\r\n\r\n    x = Xn * ((x * x * x > 0.008856) ? x * x * x : (x - (16 / 116)) / 7.787);\r\n    y = Yn * ((y * y * y > 0.008856) ? y * y * y : (y - (16 / 116)) / 7.787);\r\n    z = Zn * ((z * z * z > 0.008856) ? z * z * z : (z - (16 / 116)) / 7.787);\r\n\r\n    r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\r\n    g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\r\n    b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\r\n\r\n    r = (r > 0.0031308) ? ((1.055 * (r ** (1 / 2.4))) - 0.055) : 12.92 * r;\r\n    g = (g > 0.0031308) ? ((1.055 * (g ** (1 / 2.4))) - 0.055) : 12.92 * g;\r\n    b = (b > 0.0031308) ? ((1.055 * (b ** (1 / 2.4))) - 0.055) : 12.92 * b;\r\n\r\n    rgbRaster[j] = Math.max(0, Math.min(1, r)) * 255;\r\n    rgbRaster[j + 1] = Math.max(0, Math.min(1, g)) * 255;\r\n    rgbRaster[j + 2] = Math.max(0, Math.min(1, b)) * 255;\r\n  }\r\n  return rgbRaster;\r\n}\r\n", "const registry = new Map();\r\n\r\nexport function addDecoder(cases, importFn) {\r\n  if (!Array.isArray(cases)) {\r\n    cases = [cases]; // eslint-disable-line no-param-reassign\r\n  }\r\n  cases.forEach((c) => registry.set(c, importFn));\r\n}\r\n\r\nexport async function getDecoder(fileDirectory) {\r\n  const importFn = registry.get(fileDirectory.Compression);\r\n  if (!importFn) {\r\n    throw new Error(`Unknown compression method identifier: ${fileDirectory.Compression}`);\r\n  }\r\n  const Decoder = await importFn();\r\n  return new Decoder(fileDirectory);\r\n}\r\n\r\n// Add default decoders to registry (end-user may override with other implementations)\r\naddDecoder([undefined, 1], () => import('./raw.js').then((m) => m.default));\r\naddDecoder(5, () => import('./lzw.js').then((m) => m.default));\r\naddDecoder(6, () => {\r\n  throw new Error('old style JPEG compression is not supported.');\r\n});\r\naddDecoder(7, () => import('./jpeg.js').then((m) => m.default));\r\naddDecoder([8, 32946], () => import('./deflate.js').then((m) => m.default));\r\naddDecoder(32773, () => import('./packbits.js').then((m) => m.default));\r\naddDecoder(34887, () => import('./lerc.js').then((m) => m.default));\r\naddDecoder(50001, () => import('./webimage.js').then((m) => m.default));\r\n", "/**\r\n * @module resample\r\n */\r\n\r\nfunction copyNewSize(array, width, height, samplesPerPixel = 1) {\r\n  return new (Object.getPrototypeOf(array).constructor)(width * height * samplesPerPixel);\r\n}\r\n\r\n/**\r\n * Resample the input arrays using nearest neighbor value selection.\r\n * @param {TypedArray[]} valueArrays The input arrays to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @returns {TypedArray[]} The resampled rasters\r\n */\r\nexport function resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight) {\r\n  const relX = inWidth / outWidth;\r\n  const relY = inHeight / outHeight;\r\n  return valueArrays.map((array) => {\r\n    const newArray = copyNewSize(array, outWidth, outHeight);\r\n    for (let y = 0; y < outHeight; ++y) {\r\n      const cy = Math.min(Math.round(relY * y), inHeight - 1);\r\n      for (let x = 0; x < outWidth; ++x) {\r\n        const cx = Math.min(Math.round(relX * x), inWidth - 1);\r\n        const value = array[(cy * inWidth) + cx];\r\n        newArray[(y * outWidth) + x] = value;\r\n      }\r\n    }\r\n    return newArray;\r\n  });\r\n}\r\n\r\n// simple linear interpolation, code from:\r\n// https://en.wikipedia.org/wiki/Linear_interpolation#Programming_language_support\r\nfunction lerp(v0, v1, t) {\r\n  return ((1 - t) * v0) + (t * v1);\r\n}\r\n\r\n/**\r\n * Resample the input arrays using bilinear interpolation.\r\n * @param {TypedArray[]} valueArrays The input arrays to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @returns {TypedArray[]} The resampled rasters\r\n */\r\nexport function resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight) {\r\n  const relX = inWidth / outWidth;\r\n  const relY = inHeight / outHeight;\r\n\r\n  return valueArrays.map((array) => {\r\n    const newArray = copyNewSize(array, outWidth, outHeight);\r\n    for (let y = 0; y < outHeight; ++y) {\r\n      const rawY = relY * y;\r\n\r\n      const yl = Math.floor(rawY);\r\n      const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\r\n\r\n      for (let x = 0; x < outWidth; ++x) {\r\n        const rawX = relX * x;\r\n        const tx = rawX % 1;\r\n\r\n        const xl = Math.floor(rawX);\r\n        const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\r\n\r\n        const ll = array[(yl * inWidth) + xl];\r\n        const hl = array[(yl * inWidth) + xh];\r\n        const lh = array[(yh * inWidth) + xl];\r\n        const hh = array[(yh * inWidth) + xh];\r\n\r\n        const value = lerp(\r\n          lerp(ll, hl, tx),\r\n          lerp(lh, hh, tx),\r\n          rawY % 1,\r\n        );\r\n        newArray[(y * outWidth) + x] = value;\r\n      }\r\n    }\r\n    return newArray;\r\n  });\r\n}\r\n\r\n/**\r\n * Resample the input arrays using the selected resampling method.\r\n * @param {TypedArray[]} valueArrays The input arrays to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @param {string} [method = 'nearest'] The desired resampling method\r\n * @returns {TypedArray[]} The resampled rasters\r\n */\r\nexport function resample(valueArrays, inWidth, inHeight, outWidth, outHeight, method = 'nearest') {\r\n  switch (method.toLowerCase()) {\r\n    case 'nearest':\r\n      return resampleNearest(valueArrays, inWidth, inHeight, outWidth, outHeight);\r\n    case 'bilinear':\r\n    case 'linear':\r\n      return resampleBilinear(valueArrays, inWidth, inHeight, outWidth, outHeight);\r\n    default:\r\n      throw new Error(`Unsupported resampling method: '${method}'`);\r\n  }\r\n}\r\n\r\n/**\r\n * Resample the pixel interleaved input array using nearest neighbor value selection.\r\n * @param {TypedArray} valueArrays The input arrays to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @param {number} samples The number of samples per pixel for pixel\r\n *                         interleaved data\r\n * @returns {TypedArray} The resampled raster\r\n */\r\nexport function resampleNearestInterleaved(\r\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\r\n  const relX = inWidth / outWidth;\r\n  const relY = inHeight / outHeight;\r\n\r\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\r\n  for (let y = 0; y < outHeight; ++y) {\r\n    const cy = Math.min(Math.round(relY * y), inHeight - 1);\r\n    for (let x = 0; x < outWidth; ++x) {\r\n      const cx = Math.min(Math.round(relX * x), inWidth - 1);\r\n      for (let i = 0; i < samples; ++i) {\r\n        const value = valueArray[(cy * inWidth * samples) + (cx * samples) + i];\r\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\r\n      }\r\n    }\r\n  }\r\n  return newArray;\r\n}\r\n\r\n/**\r\n * Resample the pixel interleaved input array using bilinear interpolation.\r\n * @param {TypedArray} valueArrays The input arrays to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @param {number} samples The number of samples per pixel for pixel\r\n *                         interleaved data\r\n * @returns {TypedArray} The resampled raster\r\n */\r\nexport function resampleBilinearInterleaved(\r\n  valueArray, inWidth, inHeight, outWidth, outHeight, samples) {\r\n  const relX = inWidth / outWidth;\r\n  const relY = inHeight / outHeight;\r\n  const newArray = copyNewSize(valueArray, outWidth, outHeight, samples);\r\n  for (let y = 0; y < outHeight; ++y) {\r\n    const rawY = relY * y;\r\n\r\n    const yl = Math.floor(rawY);\r\n    const yh = Math.min(Math.ceil(rawY), (inHeight - 1));\r\n\r\n    for (let x = 0; x < outWidth; ++x) {\r\n      const rawX = relX * x;\r\n      const tx = rawX % 1;\r\n\r\n      const xl = Math.floor(rawX);\r\n      const xh = Math.min(Math.ceil(rawX), (inWidth - 1));\r\n\r\n      for (let i = 0; i < samples; ++i) {\r\n        const ll = valueArray[(yl * inWidth * samples) + (xl * samples) + i];\r\n        const hl = valueArray[(yl * inWidth * samples) + (xh * samples) + i];\r\n        const lh = valueArray[(yh * inWidth * samples) + (xl * samples) + i];\r\n        const hh = valueArray[(yh * inWidth * samples) + (xh * samples) + i];\r\n\r\n        const value = lerp(\r\n          lerp(ll, hl, tx),\r\n          lerp(lh, hh, tx),\r\n          rawY % 1,\r\n        );\r\n        newArray[(y * outWidth * samples) + (x * samples) + i] = value;\r\n      }\r\n    }\r\n  }\r\n  return newArray;\r\n}\r\n\r\n/**\r\n * Resample the pixel interleaved input array using the selected resampling method.\r\n * @param {TypedArray} valueArray The input array to resample\r\n * @param {number} inWidth The width of the input rasters\r\n * @param {number} inHeight The height of the input rasters\r\n * @param {number} outWidth The desired width of the output rasters\r\n * @param {number} outHeight The desired height of the output rasters\r\n * @param {number} samples The number of samples per pixel for pixel\r\n *                                 interleaved data\r\n * @param {string} [method = 'nearest'] The desired resampling method\r\n * @returns {TypedArray} The resampled rasters\r\n */\r\nexport function resampleInterleaved(valueArray, inWidth, inHeight, outWidth, outHeight, samples, method = 'nearest') {\r\n  switch (method.toLowerCase()) {\r\n    case 'nearest':\r\n      return resampleNearestInterleaved(\r\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\r\n      );\r\n    case 'bilinear':\r\n    case 'linear':\r\n      return resampleBilinearInterleaved(\r\n        valueArray, inWidth, inHeight, outWidth, outHeight, samples,\r\n      );\r\n    default:\r\n      throw new Error(`Unsupported resampling method: '${method}'`);\r\n  }\r\n}\r\n", "import { getFloat16 } from '@petamoriken/float16';\r\n\r\nexport default class DataView64 {\r\n  constructor(arrayBuffer) {\r\n    this._dataView = new DataView(arrayBuffer);\r\n  }\r\n\r\n  get buffer() {\r\n    return this._dataView.buffer;\r\n  }\r\n\r\n  getUint64(offset, littleEndian) {\r\n    const left = this.getUint32(offset, littleEndian);\r\n    const right = this.getUint32(offset + 4, littleEndian);\r\n    let combined;\r\n    if (littleEndian) {\r\n      combined = left + ((2 ** 32) * right);\r\n      if (!Number.isSafeInteger(combined)) {\r\n        throw new Error(\r\n          `${combined} exceeds MAX_SAFE_INTEGER. `\r\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\r\n        );\r\n      }\r\n      return combined;\r\n    }\r\n    combined = ((2 ** 32) * left) + right;\r\n    if (!Number.isSafeInteger(combined)) {\r\n      throw new Error(\r\n        `${combined} exceeds MAX_SAFE_INTEGER. `\r\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\r\n      );\r\n    }\r\n\r\n    return combined;\r\n  }\r\n\r\n  // adapted from https://stackoverflow.com/a/55338384/8060591\r\n  getInt64(offset, littleEndian) {\r\n    let value = 0;\r\n    const isNegative = (this._dataView.getUint8(offset + (littleEndian ? 7 : 0)) & 0x80) > 0;\r\n    let carrying = true;\r\n    for (let i = 0; i < 8; i++) {\r\n      let byte = this._dataView.getUint8(offset + (littleEndian ? i : 7 - i));\r\n      if (isNegative) {\r\n        if (carrying) {\r\n          if (byte !== 0x00) {\r\n            byte = ~(byte - 1) & 0xff;\r\n            carrying = false;\r\n          }\r\n        } else {\r\n          byte = ~byte & 0xff;\r\n        }\r\n      }\r\n      value += byte * (256 ** i);\r\n    }\r\n    if (isNegative) {\r\n      value = -value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  getUint8(offset, littleEndian) {\r\n    return this._dataView.getUint8(offset, littleEndian);\r\n  }\r\n\r\n  getInt8(offset, littleEndian) {\r\n    return this._dataView.getInt8(offset, littleEndian);\r\n  }\r\n\r\n  getUint16(offset, littleEndian) {\r\n    return this._dataView.getUint16(offset, littleEndian);\r\n  }\r\n\r\n  getInt16(offset, littleEndian) {\r\n    return this._dataView.getInt16(offset, littleEndian);\r\n  }\r\n\r\n  getUint32(offset, littleEndian) {\r\n    return this._dataView.getUint32(offset, littleEndian);\r\n  }\r\n\r\n  getInt32(offset, littleEndian) {\r\n    return this._dataView.getInt32(offset, littleEndian);\r\n  }\r\n\r\n  getFloat16(offset, littleEndian) {\r\n    return getFloat16(this._dataView, offset, littleEndian);\r\n  }\r\n\r\n  getFloat32(offset, littleEndian) {\r\n    return this._dataView.getFloat32(offset, littleEndian);\r\n  }\r\n\r\n  getFloat64(offset, littleEndian) {\r\n    return this._dataView.getFloat64(offset, littleEndian);\r\n  }\r\n}\r\n", "export default class DataSlice {\r\n  constructor(arrayBuffer, sliceOffset, littleEndian, bigTiff) {\r\n    this._dataView = new DataView(arrayBuffer);\r\n    this._sliceOffset = sliceOffset;\r\n    this._littleEndian = littleEndian;\r\n    this._bigTiff = bigTiff;\r\n  }\r\n\r\n  get sliceOffset() {\r\n    return this._sliceOffset;\r\n  }\r\n\r\n  get sliceTop() {\r\n    return this._sliceOffset + this.buffer.byteLength;\r\n  }\r\n\r\n  get littleEndian() {\r\n    return this._littleEndian;\r\n  }\r\n\r\n  get bigTiff() {\r\n    return this._bigTiff;\r\n  }\r\n\r\n  get buffer() {\r\n    return this._dataView.buffer;\r\n  }\r\n\r\n  covers(offset, length) {\r\n    return this.sliceOffset <= offset && this.sliceTop >= offset + length;\r\n  }\r\n\r\n  readUint8(offset) {\r\n    return this._dataView.getUint8(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readInt8(offset) {\r\n    return this._dataView.getInt8(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readUint16(offset) {\r\n    return this._dataView.getUint16(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readInt16(offset) {\r\n    return this._dataView.getInt16(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readUint32(offset) {\r\n    return this._dataView.getUint32(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readInt32(offset) {\r\n    return this._dataView.getInt32(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readFloat32(offset) {\r\n    return this._dataView.getFloat32(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readFloat64(offset) {\r\n    return this._dataView.getFloat64(\r\n      offset - this._sliceOffset, this._littleEndian,\r\n    );\r\n  }\r\n\r\n  readUint64(offset) {\r\n    const left = this.readUint32(offset);\r\n    const right = this.readUint32(offset + 4);\r\n    let combined;\r\n    if (this._littleEndian) {\r\n      combined = left + ((2 ** 32) * right);\r\n      if (!Number.isSafeInteger(combined)) {\r\n        throw new Error(\r\n          `${combined} exceeds MAX_SAFE_INTEGER. `\r\n          + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\r\n        );\r\n      }\r\n      return combined;\r\n    }\r\n    combined = ((2 ** 32) * left) + right;\r\n    if (!Number.isSafeInteger(combined)) {\r\n      throw new Error(\r\n        `${combined} exceeds MAX_SAFE_INTEGER. `\r\n        + 'Precision may be lost. Please report if you get this message to https://github.com/geotiffjs/geotiff.js/issues',\r\n      );\r\n    }\r\n\r\n    return combined;\r\n  }\r\n\r\n  // adapted from https://stackoverflow.com/a/55338384/8060591\r\n  readInt64(offset) {\r\n    let value = 0;\r\n    const isNegative = (this._dataView.getUint8(offset + (this._littleEndian ? 7 : 0)) & 0x80)\r\n      > 0;\r\n    let carrying = true;\r\n    for (let i = 0; i < 8; i++) {\r\n      let byte = this._dataView.getUint8(\r\n        offset + (this._littleEndian ? i : 7 - i),\r\n      );\r\n      if (isNegative) {\r\n        if (carrying) {\r\n          if (byte !== 0x00) {\r\n            byte = ~(byte - 1) & 0xff;\r\n            carrying = false;\r\n          }\r\n        } else {\r\n          byte = ~byte & 0xff;\r\n        }\r\n      }\r\n      value += byte * (256 ** i);\r\n    }\r\n    if (isNegative) {\r\n      value = -value;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOffset(offset) {\r\n    if (this._bigTiff) {\r\n      return this.readUint64(offset);\r\n    }\r\n    return this.readUint32(offset);\r\n  }\r\n}\r\n", "import { getDecoder } from './compression/index.js';\r\n\r\nconst defaultPoolSize = typeof navigator !== 'undefined' ? (navigator.hardwareConcurrency || 2) : 2;\r\n\r\n/**\r\n * @module pool\r\n */\r\n\r\n/**\r\n * Pool for workers to decode chunks of the images.\r\n */\r\nclass Pool {\r\n  /**\r\n   * @constructor\r\n   * @param {Number} [size] The size of the pool. Defaults to the number of CPUs\r\n   *                      available. When this parameter is `null` or 0, then the\r\n   *                      decoding will be done in the main thread.\r\n   * @param {function(): Worker} [createWorker] A function that creates the decoder worker.\r\n   * Defaults to a worker with all decoders that ship with geotiff.js. The `createWorker()`\r\n   * function is expected to return a `Worker` compatible with Web Workers. For code that\r\n   * runs in Node, [web-worker](https://www.npmjs.com/package/web-worker) is a good choice.\r\n   *\r\n   * A worker that uses a custom lzw decoder would look like this `my-custom-worker.js` file:\r\n   * ```js\r\n   * import { addDecoder, getDecoder } from 'geotiff';\r\n   * addDecoder(5, () => import ('./my-custom-lzw').then((m) => m.default));\r\n   * self.addEventListener('message', async (e) => {\r\n   *   const { id, fileDirectory, buffer } = e.data;\r\n   *   const decoder = await getDecoder(fileDirectory);\r\n   *   const decoded = await decoder.decode(fileDirectory, buffer);\r\n   *   self.postMessage({ decoded, id }, [decoded]);\r\n   * });\r\n   * ```\r\n   * The way the above code is built into a worker by the `createWorker()` function\r\n   * depends on the used bundler. For most bundlers, something like this will work:\r\n   * ```js\r\n   * function createWorker() {\r\n   *   return new Worker(new URL('./my-custom-worker.js', import.meta.url));\r\n   * }\r\n   * ```\r\n   */\r\n  constructor(size = defaultPoolSize, createWorker) {\r\n    this.workers = null;\r\n    this._awaitingDecoder = null;\r\n    this.size = size;\r\n    this.messageId = 0;\r\n    if (size) {\r\n      this._awaitingDecoder = createWorker ? Promise.resolve(createWorker) : new Promise((resolve) => {\r\n        import('./worker/decoder.js').then((module) => {\r\n          resolve(module.create);\r\n        });\r\n      });\r\n      this._awaitingDecoder.then((create) => {\r\n        this._awaitingDecoder = null;\r\n        this.workers = [];\r\n        for (let i = 0; i < size; i++) {\r\n          this.workers.push({ worker: create(), idle: true });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decode the given block of bytes with the set compression method.\r\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\r\n   * @returns {Promise<ArrayBuffer>} the decoded result as a `Promise`\r\n   */\r\n  async decode(fileDirectory, buffer) {\r\n    if (this._awaitingDecoder) {\r\n      await this._awaitingDecoder;\r\n    }\r\n    return this.size === 0\r\n      ? getDecoder(fileDirectory).then((decoder) => decoder.decode(fileDirectory, buffer))\r\n      : new Promise((resolve) => {\r\n        const worker = this.workers.find((candidate) => candidate.idle)\r\n          || this.workers[Math.floor(Math.random() * this.size)];\r\n        worker.idle = false;\r\n        const id = this.messageId++;\r\n        const onMessage = (e) => {\r\n          if (e.data.id === id) {\r\n            worker.idle = true;\r\n            resolve(e.data.decoded);\r\n            worker.worker.removeEventListener('message', onMessage);\r\n          }\r\n        };\r\n        worker.worker.addEventListener('message', onMessage);\r\n        worker.worker.postMessage({ fileDirectory, buffer, id }, [buffer]);\r\n      });\r\n  }\r\n\r\n  destroy() {\r\n    if (this.workers) {\r\n      this.workers.forEach((worker) => {\r\n        worker.worker.terminate();\r\n      });\r\n      this.workers = null;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Pool;\r\n", "const CRLFCRLF = '\\r\\n\\r\\n';\r\n\r\n/*\r\n * Shim for 'Object.fromEntries'\r\n */\r\nfunction itemsToObject(items) {\r\n  if (typeof Object.fromEntries !== 'undefined') {\r\n    return Object.fromEntries(items);\r\n  }\r\n  const obj = {};\r\n  for (const [key, value] of items) {\r\n    obj[key.toLowerCase()] = value;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Parse HTTP headers from a given string.\r\n * @param {String} text the text to parse the headers from\r\n * @returns {Object} the parsed headers with lowercase keys\r\n */\r\nfunction parseHeaders(text) {\r\n  const items = text\r\n    .split('\\r\\n')\r\n    .map((line) => {\r\n      const kv = line.split(':').map((str) => str.trim());\r\n      kv[0] = kv[0].toLowerCase();\r\n      return kv;\r\n    });\r\n\r\n  return itemsToObject(items);\r\n}\r\n\r\n/**\r\n * Parse a 'Content-Type' header value to the content-type and parameters\r\n * @param {String} rawContentType the raw string to parse from\r\n * @returns {Object} the parsed content type with the fields: type and params\r\n */\r\nexport function parseContentType(rawContentType) {\r\n  const [type, ...rawParams] = rawContentType.split(';').map((s) => s.trim());\r\n  const paramsItems = rawParams.map((param) => param.split('='));\r\n  return { type, params: itemsToObject(paramsItems) };\r\n}\r\n\r\n/**\r\n * Parse a 'Content-Range' header value to its start, end, and total parts\r\n * @param {String} rawContentRange the raw string to parse from\r\n * @returns {Object} the parsed parts\r\n */\r\nexport function parseContentRange(rawContentRange) {\r\n  let start;\r\n  let end;\r\n  let total;\r\n\r\n  if (rawContentRange) {\r\n    [, start, end, total] = rawContentRange.match(/bytes (\\d+)-(\\d+)\\/(\\d+)/);\r\n    start = parseInt(start, 10);\r\n    end = parseInt(end, 10);\r\n    total = parseInt(total, 10);\r\n  }\r\n\r\n  return { start, end, total };\r\n}\r\n\r\n/**\r\n * Parses a list of byteranges from the given 'multipart/byteranges' HTTP response.\r\n * Each item in the list has the following properties:\r\n * - headers: the HTTP headers\r\n * - data: the sliced ArrayBuffer for that specific part\r\n * - offset: the offset of the byterange within its originating file\r\n * - length: the length of the byterange\r\n * @param {ArrayBuffer} responseArrayBuffer the response to be parsed and split\r\n * @param {String} boundary the boundary string used to split the sections\r\n * @returns {Object[]} the parsed byteranges\r\n */\r\nexport function parseByteRanges(responseArrayBuffer, boundary) {\r\n  let offset = null;\r\n  const decoder = new TextDecoder('ascii');\r\n  const out = [];\r\n\r\n  const startBoundary = `--${boundary}`;\r\n  const endBoundary = `${startBoundary}--`;\r\n\r\n  // search for the initial boundary, may be offset by some bytes\r\n  // TODO: more efficient to check for `--` in bytes directly\r\n  for (let i = 0; i < 10; ++i) {\r\n    const text = decoder.decode(\r\n      new Uint8Array(responseArrayBuffer, i, startBoundary.length),\r\n    );\r\n    if (text === startBoundary) {\r\n      offset = i;\r\n    }\r\n  }\r\n\r\n  if (offset === null) {\r\n    throw new Error('Could not find initial boundary');\r\n  }\r\n\r\n  while (offset < responseArrayBuffer.byteLength) {\r\n    const text = decoder.decode(\r\n      new Uint8Array(responseArrayBuffer, offset,\r\n        Math.min(startBoundary.length + 1024, responseArrayBuffer.byteLength - offset),\r\n      ),\r\n    );\r\n\r\n    // break if we arrived at the end\r\n    if (text.length === 0 || text.startsWith(endBoundary)) {\r\n      break;\r\n    }\r\n\r\n    // assert that we are actually dealing with a byterange and are at the correct offset\r\n    if (!text.startsWith(startBoundary)) {\r\n      throw new Error('Part does not start with boundary');\r\n    }\r\n\r\n    // get a substring from where we read the headers\r\n    const innerText = text.substr(startBoundary.length + 2);\r\n\r\n    if (innerText.length === 0) {\r\n      break;\r\n    }\r\n\r\n    // find the double linebreak that denotes the end of the headers\r\n    const endOfHeaders = innerText.indexOf(CRLFCRLF);\r\n\r\n    // parse the headers to get the content range size\r\n    const headers = parseHeaders(innerText.substr(0, endOfHeaders));\r\n    const { start, end, total } = parseContentRange(headers['content-range']);\r\n\r\n    // calculate the length of the slice and the next offset\r\n    const startOfData = offset + startBoundary.length + endOfHeaders + CRLFCRLF.length;\r\n    const length = parseInt(end, 10) + 1 - parseInt(start, 10);\r\n    out.push({\r\n      headers,\r\n      data: responseArrayBuffer.slice(startOfData, startOfData + length),\r\n      offset: start,\r\n      length,\r\n      fileSize: total,\r\n    });\r\n\r\n    offset = startOfData + length + 4;\r\n  }\r\n\r\n  return out;\r\n}\r\n", "/**\r\n * @typedef Slice\r\n * @property {number} offset\r\n * @property {number} length\r\n */\r\n\r\nexport class BaseSource {\r\n  /**\r\n   *\r\n   * @param {Slice[]} slices\r\n   * @returns {ArrayBuffer[]}\r\n   */\r\n  async fetch(slices, signal = undefined) {\r\n    return Promise.all(\r\n      slices.map((slice) => this.fetchSlice(slice, signal)),\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Slice} slice\r\n   * @returns {ArrayBuffer}\r\n   */\r\n  async fetchSlice(slice) {\r\n    throw new Error(`fetching of slice ${slice} not possible, not implemented`);\r\n  }\r\n\r\n  /**\r\n   * Returns the filesize if already determined and null otherwise\r\n   */\r\n  get fileSize() {\r\n    return null;\r\n  }\r\n\r\n  async close() {\r\n    // no-op by default\r\n  }\r\n}\r\n", "export default class QuickLRU extends Map {\r\n\tconstructor(options = {}) {\r\n\t\tsuper();\r\n\r\n\t\tif (!(options.maxSize && options.maxSize > 0)) {\r\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\r\n\t\t}\r\n\r\n\t\tif (typeof options.maxAge === 'number' && options.maxAge === 0) {\r\n\t\t\tthrow new TypeError('`maxAge` must be a number greater than 0');\r\n\t\t}\r\n\r\n\t\t// TODO: Use private class fields when ESLint supports them.\r\n\t\tthis.maxSize = options.maxSize;\r\n\t\tthis.maxAge = options.maxAge || Number.POSITIVE_INFINITY;\r\n\t\tthis.onEviction = options.onEviction;\r\n\t\tthis.cache = new Map();\r\n\t\tthis.oldCache = new Map();\r\n\t\tthis._size = 0;\r\n\t}\r\n\r\n\t// TODO: Use private class methods when targeting Node.js 16.\r\n\t_emitEvictions(cache) {\r\n\t\tif (typeof this.onEviction !== 'function') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tfor (const [key, item] of cache) {\r\n\t\t\tthis.onEviction(key, item.value);\r\n\t\t}\r\n\t}\r\n\r\n\t_deleteIfExpired(key, item) {\r\n\t\tif (typeof item.expiry === 'number' && item.expiry <= Date.now()) {\r\n\t\t\tif (typeof this.onEviction === 'function') {\r\n\t\t\t\tthis.onEviction(key, item.value);\r\n\t\t\t}\r\n\r\n\t\t\treturn this.delete(key);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t_getOrDeleteIfExpired(key, item) {\r\n\t\tconst deleted = this._deleteIfExpired(key, item);\r\n\t\tif (deleted === false) {\r\n\t\t\treturn item.value;\r\n\t\t}\r\n\t}\r\n\r\n\t_getItemValue(key, item) {\r\n\t\treturn item.expiry ? this._getOrDeleteIfExpired(key, item) : item.value;\r\n\t}\r\n\r\n\t_peek(key, cache) {\r\n\t\tconst item = cache.get(key);\r\n\r\n\t\treturn this._getItemValue(key, item);\r\n\t}\r\n\r\n\t_set(key, value) {\r\n\t\tthis.cache.set(key, value);\r\n\t\tthis._size++;\r\n\r\n\t\tif (this._size >= this.maxSize) {\r\n\t\t\tthis._size = 0;\r\n\t\t\tthis._emitEvictions(this.oldCache);\r\n\t\t\tthis.oldCache = this.cache;\r\n\t\t\tthis.cache = new Map();\r\n\t\t}\r\n\t}\r\n\r\n\t_moveToRecent(key, item) {\r\n\t\tthis.oldCache.delete(key);\r\n\t\tthis._set(key, item);\r\n\t}\r\n\r\n\t* _entriesAscending() {\r\n\t\tfor (const item of this.oldCache) {\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tif (!this.cache.has(key)) {\r\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\t\tif (deleted === false) {\r\n\t\t\t\t\tyield item;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const item of this.cache) {\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\tif (deleted === false) {\r\n\t\t\t\tyield item;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget(key) {\r\n\t\tif (this.cache.has(key)) {\r\n\t\t\tconst item = this.cache.get(key);\r\n\r\n\t\t\treturn this._getItemValue(key, item);\r\n\t\t}\r\n\r\n\t\tif (this.oldCache.has(key)) {\r\n\t\t\tconst item = this.oldCache.get(key);\r\n\t\t\tif (this._deleteIfExpired(key, item) === false) {\r\n\t\t\t\tthis._moveToRecent(key, item);\r\n\t\t\t\treturn item.value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tset(key, value, {maxAge = this.maxAge} = {}) {\r\n\t\tconst expiry =\r\n\t\t\ttypeof maxAge === 'number' && maxAge !== Number.POSITIVE_INFINITY ?\r\n\t\t\t\tDate.now() + maxAge :\r\n\t\t\t\tundefined;\r\n\t\tif (this.cache.has(key)) {\r\n\t\t\tthis.cache.set(key, {\r\n\t\t\t\tvalue,\r\n\t\t\t\texpiry\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis._set(key, {value, expiry});\r\n\t\t}\r\n\t}\r\n\r\n\thas(key) {\r\n\t\tif (this.cache.has(key)) {\r\n\t\t\treturn !this._deleteIfExpired(key, this.cache.get(key));\r\n\t\t}\r\n\r\n\t\tif (this.oldCache.has(key)) {\r\n\t\t\treturn !this._deleteIfExpired(key, this.oldCache.get(key));\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tpeek(key) {\r\n\t\tif (this.cache.has(key)) {\r\n\t\t\treturn this._peek(key, this.cache);\r\n\t\t}\r\n\r\n\t\tif (this.oldCache.has(key)) {\r\n\t\t\treturn this._peek(key, this.oldCache);\r\n\t\t}\r\n\t}\r\n\r\n\tdelete(key) {\r\n\t\tconst deleted = this.cache.delete(key);\r\n\t\tif (deleted) {\r\n\t\t\tthis._size--;\r\n\t\t}\r\n\r\n\t\treturn this.oldCache.delete(key) || deleted;\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.cache.clear();\r\n\t\tthis.oldCache.clear();\r\n\t\tthis._size = 0;\r\n\t}\r\n\r\n\tresize(newSize) {\r\n\t\tif (!(newSize && newSize > 0)) {\r\n\t\t\tthrow new TypeError('`maxSize` must be a number greater than 0');\r\n\t\t}\r\n\r\n\t\tconst items = [...this._entriesAscending()];\r\n\t\tconst removeCount = items.length - newSize;\r\n\t\tif (removeCount < 0) {\r\n\t\t\tthis.cache = new Map(items);\r\n\t\t\tthis.oldCache = new Map();\r\n\t\t\tthis._size = items.length;\r\n\t\t} else {\r\n\t\t\tif (removeCount > 0) {\r\n\t\t\t\tthis._emitEvictions(items.slice(0, removeCount));\r\n\t\t\t}\r\n\r\n\t\t\tthis.oldCache = new Map(items.slice(removeCount));\r\n\t\t\tthis.cache = new Map();\r\n\t\t\tthis._size = 0;\r\n\t\t}\r\n\r\n\t\tthis.maxSize = newSize;\r\n\t}\r\n\r\n\t* keys() {\r\n\t\tfor (const [key] of this) {\r\n\t\t\tyield key;\r\n\t\t}\r\n\t}\r\n\r\n\t* values() {\r\n\t\tfor (const [, value] of this) {\r\n\t\t\tyield value;\r\n\t\t}\r\n\t}\r\n\r\n\t* [Symbol.iterator]() {\r\n\t\tfor (const item of this.cache) {\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\tif (deleted === false) {\r\n\t\t\t\tyield [key, value.value];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (const item of this.oldCache) {\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tif (!this.cache.has(key)) {\r\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\t\tif (deleted === false) {\r\n\t\t\t\t\tyield [key, value.value];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t* entriesDescending() {\r\n\t\tlet items = [...this.cache];\r\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\r\n\t\t\tconst item = items[i];\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\tif (deleted === false) {\r\n\t\t\t\tyield [key, value.value];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\titems = [...this.oldCache];\r\n\t\tfor (let i = items.length - 1; i >= 0; --i) {\r\n\t\t\tconst item = items[i];\r\n\t\t\tconst [key, value] = item;\r\n\t\t\tif (!this.cache.has(key)) {\r\n\t\t\t\tconst deleted = this._deleteIfExpired(key, value);\r\n\t\t\t\tif (deleted === false) {\r\n\t\t\t\t\tyield [key, value.value];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t* entriesAscending() {\r\n\t\tfor (const [key, value] of this._entriesAscending()) {\r\n\t\t\tyield [key, value.value];\r\n\t\t}\r\n\t}\r\n\r\n\tget size() {\r\n\t\tif (!this._size) {\r\n\t\t\treturn this.oldCache.size;\r\n\t\t}\r\n\r\n\t\tlet oldCacheSize = 0;\r\n\t\tfor (const key of this.oldCache.keys()) {\r\n\t\t\tif (!this.cache.has(key)) {\r\n\t\t\t\toldCacheSize++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn Math.min(this._size + oldCacheSize, this.maxSize);\r\n\t}\r\n\r\n\tentries() {\r\n\t\treturn this.entriesAscending();\r\n\t}\r\n\r\n\tforEach(callbackFunction, thisArgument = this) {\r\n\t\tfor (const [key, value] of this.entriesAscending()) {\r\n\t\t\tcallbackFunction.call(thisArgument, value, key, this);\r\n\t\t}\r\n\t}\r\n\r\n\tget [Symbol.toStringTag]() {\r\n\t\treturn JSON.stringify([...this.entriesAscending()]);\r\n\t}\r\n}\r\n", "export function assign(target, source) {\r\n  for (const key in source) {\r\n    if (source.hasOwnProperty(key)) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n}\r\n\r\nexport function chunk(iterable, length) {\r\n  const results = [];\r\n  const lengthOfIterable = iterable.length;\r\n  for (let i = 0; i < lengthOfIterable; i += length) {\r\n    const chunked = [];\r\n    for (let ci = i; ci < i + length; ci++) {\r\n      chunked.push(iterable[ci]);\r\n    }\r\n    results.push(chunked);\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function endsWith(string, expectedEnding) {\r\n  if (string.length < expectedEnding.length) {\r\n    return false;\r\n  }\r\n  const actualEnding = string.substr(string.length - expectedEnding.length);\r\n  return actualEnding === expectedEnding;\r\n}\r\n\r\nexport function forEach(iterable, func) {\r\n  const { length } = iterable;\r\n  for (let i = 0; i < length; i++) {\r\n    func(iterable[i], i);\r\n  }\r\n}\r\n\r\nexport function invert(oldObj) {\r\n  const newObj = {};\r\n  for (const key in oldObj) {\r\n    if (oldObj.hasOwnProperty(key)) {\r\n      const value = oldObj[key];\r\n      newObj[value] = key;\r\n    }\r\n  }\r\n  return newObj;\r\n}\r\n\r\nexport function range(n) {\r\n  const results = [];\r\n  for (let i = 0; i < n; i++) {\r\n    results.push(i);\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function times(numTimes, func) {\r\n  const results = [];\r\n  for (let i = 0; i < numTimes; i++) {\r\n    results.push(func(i));\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function toArray(iterable) {\r\n  const results = [];\r\n  const { length } = iterable;\r\n  for (let i = 0; i < length; i++) {\r\n    results.push(iterable[i]);\r\n  }\r\n  return results;\r\n}\r\n\r\nexport function toArrayRecursively(input) {\r\n  if (input.length) {\r\n    return toArray(input).map(toArrayRecursively);\r\n  }\r\n  return input;\r\n}\r\n\r\n// copied from https://github.com/academia-de-codigo/parse-content-range-header/blob/master/index.js\r\nexport function parseContentRange(headerValue) {\r\n  if (!headerValue) {\r\n    return null;\r\n  }\r\n\r\n  if (typeof headerValue !== 'string') {\r\n    throw new Error('invalid argument');\r\n  }\r\n\r\n  const parseInt = (number) => Number.parseInt(number, 10);\r\n\r\n  // Check for presence of unit\r\n  let matches = headerValue.match(/^(\\w*) /);\r\n  const unit = matches && matches[1];\r\n\r\n  // check for start-end/size header format\r\n  matches = headerValue.match(/(\\d+)-(\\d+)\\/(\\d+|\\*)/);\r\n  if (matches) {\r\n    return {\r\n      unit,\r\n      first: parseInt(matches[1]),\r\n      last: parseInt(matches[2]),\r\n      length: matches[3] === '*' ? null : parseInt(matches[3]),\r\n    };\r\n  }\r\n\r\n  // check for size header format\r\n  matches = headerValue.match(/(\\d+|\\*)/);\r\n  if (matches) {\r\n    return {\r\n      unit,\r\n      first: null,\r\n      last: null,\r\n      length: matches[1] === '*' ? null : parseInt(matches[1]),\r\n    };\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/*\r\n * Promisified wrapper around 'setTimeout' to allow 'await'\r\n */\r\nexport async function wait(milliseconds) {\r\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\r\n}\r\n\r\nexport function zip(a, b) {\r\n  const A = Array.isArray(a) ? a : Array.from(a);\r\n  const B = Array.isArray(b) ? b : Array.from(b);\r\n  return A.map((k, i) => [k, B[i]]);\r\n}\r\n\r\n// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\r\nexport class AbortError extends Error {\r\n  constructor(params) {\r\n    // Pass remaining arguments (including vendor specific ones) to parent constructor\r\n    super(params);\r\n\r\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, AbortError);\r\n    }\r\n\r\n    this.name = 'AbortError';\r\n  }\r\n}\r\n\r\nexport class CustomAggregateError extends Error {\r\n  constructor(errors, message) {\r\n    super(message);\r\n    this.errors = errors;\r\n    this.message = message;\r\n    this.name = 'AggregateError';\r\n  }\r\n}\r\n\r\nexport const AggregateError = CustomAggregateError;\r\n", "import QuickLRU from 'quick-lru';\r\nimport { BaseSource } from './basesource.js';\r\nimport { AbortError, AggregateError, wait, zip } from '../utils.js';\r\n\r\nclass Block {\r\n  /**\r\n   *\r\n   * @param {number} offset\r\n   * @param {number} length\r\n   * @param {ArrayBuffer} [data]\r\n   */\r\n  constructor(offset, length, data = null) {\r\n    this.offset = offset;\r\n    this.length = length;\r\n    this.data = data;\r\n  }\r\n\r\n  /**\r\n   * @returns {number} the top byte border\r\n   */\r\n  get top() {\r\n    return this.offset + this.length;\r\n  }\r\n}\r\n\r\nclass BlockGroup {\r\n  /**\r\n   *\r\n   * @param {number} offset\r\n   * @param {number} length\r\n   * @param {number[]} blockIds\r\n   */\r\n  constructor(offset, length, blockIds) {\r\n    this.offset = offset;\r\n    this.length = length;\r\n    this.blockIds = blockIds;\r\n  }\r\n}\r\n\r\nexport class BlockedSource extends BaseSource {\r\n  /**\r\n   *\r\n   * @param {BaseSource} source The underlying source that shall be blocked and cached\r\n   * @param {object} options\r\n   * @param {number} [options.blockSize]\r\n   * @param {number} [options.cacheSize]\r\n   */\r\n  constructor(source, { blockSize = 65536, cacheSize = 100 } = {}) {\r\n    super();\r\n    this.source = source;\r\n    this.blockSize = blockSize;\r\n\r\n    this.blockCache = new QuickLRU({\r\n      maxSize: cacheSize,\r\n      onEviction: (blockId, block) => {\r\n        this.evictedBlocks.set(blockId, block);\r\n      },\r\n    });\r\n\r\n    /** @type {Map<number, Block>} */\r\n    this.evictedBlocks = new Map();\r\n\r\n    // mapping blockId -> Block instance\r\n    this.blockRequests = new Map();\r\n\r\n    // set of blockIds missing for the current requests\r\n    this.blockIdsToFetch = new Set();\r\n\r\n    this.abortedBlockIds = new Set();\r\n  }\r\n\r\n  get fileSize() {\r\n    return this.source.fileSize;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {import(\"./basesource\").Slice[]} slices\r\n   */\r\n  async fetch(slices, signal) {\r\n    const blockRequests = [];\r\n    const missingBlockIds = [];\r\n    const allBlockIds = [];\r\n    this.evictedBlocks.clear();\r\n\r\n    for (const { offset, length } of slices) {\r\n      let top = offset + length;\r\n\r\n      const { fileSize } = this;\r\n      if (fileSize !== null) {\r\n        top = Math.min(top, fileSize);\r\n      }\r\n\r\n      const firstBlockOffset = Math.floor(offset / this.blockSize) * this.blockSize;\r\n\r\n      for (let current = firstBlockOffset; current < top; current += this.blockSize) {\r\n        const blockId = Math.floor(current / this.blockSize);\r\n        if (!this.blockCache.has(blockId) && !this.blockRequests.has(blockId)) {\r\n          this.blockIdsToFetch.add(blockId);\r\n          missingBlockIds.push(blockId);\r\n        }\r\n        if (this.blockRequests.has(blockId)) {\r\n          blockRequests.push(this.blockRequests.get(blockId));\r\n        }\r\n        allBlockIds.push(blockId);\r\n      }\r\n    }\r\n\r\n    // allow additional block requests to accumulate\r\n    await wait();\r\n    this.fetchBlocks(signal);\r\n\r\n    // Gather all of the new requests that this fetch call is contributing to `fetch`.\r\n    const missingRequests = [];\r\n    for (const blockId of missingBlockIds) {\r\n      // The requested missing block could already be in the cache\r\n      // instead of having its request still be outstanding.\r\n      if (this.blockRequests.has(blockId)) {\r\n        missingRequests.push(this.blockRequests.get(blockId));\r\n      }\r\n    }\r\n\r\n    // Actually await all pending requests that are needed for this `fetch`.\r\n    await Promise.allSettled(blockRequests);\r\n    await Promise.allSettled(missingRequests);\r\n\r\n    // Perform retries if a block was interrupted by a previous signal\r\n    const abortedBlockRequests = [];\r\n    const abortedBlockIds = allBlockIds\r\n      .filter((id) => this.abortedBlockIds.has(id) || !this.blockCache.has(id));\r\n    abortedBlockIds.forEach((id) => this.blockIdsToFetch.add(id));\r\n    // start the retry of some blocks if required\r\n    if (abortedBlockIds.length > 0 && signal && !signal.aborted) {\r\n      this.fetchBlocks(null);\r\n      for (const blockId of abortedBlockIds) {\r\n        const block = this.blockRequests.get(blockId);\r\n        if (!block) {\r\n          throw new Error(`Block ${blockId} is not in the block requests`);\r\n        }\r\n        abortedBlockRequests.push(block);\r\n      }\r\n      await Promise.allSettled(abortedBlockRequests);\r\n    }\r\n\r\n    // throw an  abort error\r\n    if (signal && signal.aborted) {\r\n      throw new AbortError('Request was aborted');\r\n    }\r\n\r\n    const blocks = allBlockIds.map((id) => this.blockCache.get(id) || this.evictedBlocks.get(id));\r\n    const failedBlocks = blocks.filter((i) => !i);\r\n    if (failedBlocks.length) {\r\n      throw new AggregateError(failedBlocks, 'Request failed');\r\n    }\r\n\r\n    // create a final Map, with all required blocks for this request to satisfy\r\n    const requiredBlocks = new Map(zip(allBlockIds, blocks));\r\n\r\n    // TODO: satisfy each slice\r\n    return this.readSliceData(slices, requiredBlocks);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {AbortSignal} signal\r\n   */\r\n  fetchBlocks(signal) {\r\n    // check if we still need to\r\n    if (this.blockIdsToFetch.size > 0) {\r\n      const groups = this.groupBlocks(this.blockIdsToFetch);\r\n\r\n      // start requesting slices of data\r\n      const groupRequests = this.source.fetch(groups, signal);\r\n\r\n      for (let groupIndex = 0; groupIndex < groups.length; ++groupIndex) {\r\n        const group = groups[groupIndex];\r\n\r\n        for (const blockId of group.blockIds) {\r\n          // make an async IIFE for each block\r\n          this.blockRequests.set(blockId, (async () => {\r\n            try {\r\n              const response = (await groupRequests)[groupIndex];\r\n              const blockOffset = blockId * this.blockSize;\r\n              const o = blockOffset - response.offset;\r\n              const t = Math.min(o + this.blockSize, response.data.byteLength);\r\n              const data = response.data.slice(o, t);\r\n              const block = new Block(\r\n                blockOffset,\r\n                data.byteLength,\r\n                data,\r\n                blockId,\r\n              );\r\n              this.blockCache.set(blockId, block);\r\n              this.abortedBlockIds.delete(blockId);\r\n            } catch (err) {\r\n              if (err.name === 'AbortError') {\r\n                // store the signal here, we need it to determine later if an\r\n                // error was caused by this signal\r\n                err.signal = signal;\r\n                this.blockCache.delete(blockId);\r\n                this.abortedBlockIds.add(blockId);\r\n              } else {\r\n                throw err;\r\n              }\r\n            } finally {\r\n              this.blockRequests.delete(blockId);\r\n            }\r\n          })());\r\n        }\r\n      }\r\n      this.blockIdsToFetch.clear();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Set} blockIds\r\n   * @returns {BlockGroup[]}\r\n   */\r\n  groupBlocks(blockIds) {\r\n    const sortedBlockIds = Array.from(blockIds).sort((a, b) => a - b);\r\n    if (sortedBlockIds.length === 0) {\r\n      return [];\r\n    }\r\n    let current = [];\r\n    let lastBlockId = null;\r\n    const groups = [];\r\n\r\n    for (const blockId of sortedBlockIds) {\r\n      if (lastBlockId === null || lastBlockId + 1 === blockId) {\r\n        current.push(blockId);\r\n        lastBlockId = blockId;\r\n      } else {\r\n        groups.push(new BlockGroup(\r\n          current[0] * this.blockSize,\r\n          current.length * this.blockSize,\r\n          current,\r\n        ));\r\n        current = [blockId];\r\n        lastBlockId = blockId;\r\n      }\r\n    }\r\n\r\n    groups.push(new BlockGroup(\r\n      current[0] * this.blockSize,\r\n      current.length * this.blockSize,\r\n      current,\r\n    ));\r\n\r\n    return groups;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {import(\"./basesource\").Slice[]} slices\r\n   * @param {Map} blocks\r\n   */\r\n  readSliceData(slices, blocks) {\r\n    return slices.map((slice) => {\r\n      let top = slice.offset + slice.length;\r\n      if (this.fileSize !== null) {\r\n        top = Math.min(this.fileSize, top);\r\n      }\r\n      const blockIdLow = Math.floor(slice.offset / this.blockSize);\r\n      const blockIdHigh = Math.floor(top / this.blockSize);\r\n      const sliceData = new ArrayBuffer(slice.length);\r\n      const sliceView = new Uint8Array(sliceData);\r\n\r\n      for (let blockId = blockIdLow; blockId <= blockIdHigh; ++blockId) {\r\n        const block = blocks.get(blockId);\r\n        const delta = block.offset - slice.offset;\r\n        const topDelta = block.top - top;\r\n        let blockInnerOffset = 0;\r\n        let rangeInnerOffset = 0;\r\n        let usedBlockLength;\r\n\r\n        if (delta < 0) {\r\n          blockInnerOffset = -delta;\r\n        } else if (delta > 0) {\r\n          rangeInnerOffset = delta;\r\n        }\r\n\r\n        if (topDelta < 0) {\r\n          usedBlockLength = block.length - blockInnerOffset;\r\n        } else {\r\n          usedBlockLength = top - block.offset - blockInnerOffset;\r\n        }\r\n\r\n        const blockView = new Uint8Array(block.data, blockInnerOffset, usedBlockLength);\r\n        sliceView.set(blockView, rangeInnerOffset);\r\n      }\r\n\r\n      return sliceData;\r\n    });\r\n  }\r\n}\r\n", "export class BaseResponse {\r\n  /**\r\n   * Returns whether the response has an ok'ish status code\r\n   */\r\n  get ok() {\r\n    return this.status >= 200 && this.status <= 299;\r\n  }\r\n\r\n  /**\r\n   * Returns the status code of the response\r\n   */\r\n  get status() {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /**\r\n   * Returns the value of the specified header\r\n   * @param {string} headerName the header name\r\n   * @returns {string} the header value\r\n   */\r\n  getHeader(headerName) { // eslint-disable-line no-unused-vars\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  /**\r\n   * @returns {ArrayBuffer} the response data of the request\r\n   */\r\n  async getData() {\r\n    throw new Error('not implemented');\r\n  }\r\n}\r\n\r\nexport class BaseClient {\r\n  constructor(url) {\r\n    this.url = url;\r\n  }\r\n\r\n  /**\r\n   * Send a request with the options\r\n   * @param {object} [options]\r\n   */\r\n  async request({ headers, credentials, signal } = {}) { // eslint-disable-line no-unused-vars\r\n    throw new Error('request is not implemented');\r\n  }\r\n}\r\n", "import { BaseClient, BaseResponse } from './base.js';\r\n\r\nclass FetchResponse extends BaseResponse {\r\n  /**\r\n   * BaseResponse facade for fetch API Response\r\n   * @param {Response} response\r\n   */\r\n  constructor(response) {\r\n    super();\r\n    this.response = response;\r\n  }\r\n\r\n  get status() {\r\n    return this.response.status;\r\n  }\r\n\r\n  getHeader(name) {\r\n    return this.response.headers.get(name);\r\n  }\r\n\r\n  async getData() {\r\n    const data = this.response.arrayBuffer\r\n      ? await this.response.arrayBuffer()\r\n      : (await this.response.buffer()).buffer;\r\n    return data;\r\n  }\r\n}\r\n\r\nexport class FetchClient extends BaseClient {\r\n  constructor(url, credentials) {\r\n    super(url);\r\n    this.credentials = credentials;\r\n  }\r\n\r\n  async request({ headers, credentials, signal } = {}) {\r\n    const response = await fetch(this.url, {\r\n      headers, credentials, signal,\r\n    });\r\n    return new FetchResponse(response);\r\n  }\r\n}\r\n", "import { BaseClient, BaseResponse } from './base.js';\r\nimport { AbortError } from '../../utils.js';\r\n\r\nclass XHRResponse extends BaseResponse {\r\n  /**\r\n   * BaseResponse facade for XMLHttpRequest\r\n   * @param {XMLHttpRequest} xhr\r\n   * @param {ArrayBuffer} data\r\n   */\r\n  constructor(xhr, data) {\r\n    super();\r\n    this.xhr = xhr;\r\n    this.data = data;\r\n  }\r\n\r\n  get status() {\r\n    return this.xhr.status;\r\n  }\r\n\r\n  getHeader(name) {\r\n    return this.xhr.getResponseHeader(name);\r\n  }\r\n\r\n  async getData() {\r\n    return this.data;\r\n  }\r\n}\r\n\r\nexport class XHRClient extends BaseClient {\r\n  constructRequest(headers, signal) {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', this.url);\r\n      xhr.responseType = 'arraybuffer';\r\n      for (const [key, value] of Object.entries(headers)) {\r\n        xhr.setRequestHeader(key, value);\r\n      }\r\n\r\n      // hook signals\r\n      xhr.onload = () => {\r\n        const data = xhr.response;\r\n        resolve(new XHRResponse(xhr, data));\r\n      };\r\n      xhr.onerror = reject;\r\n      xhr.onabort = () => reject(new AbortError('Request aborted'));\r\n      xhr.send();\r\n\r\n      if (signal) {\r\n        if (signal.aborted) {\r\n          xhr.abort();\r\n        }\r\n        signal.addEventListener('abort', () => xhr.abort());\r\n      }\r\n    });\r\n  }\r\n\r\n  async request({ headers, signal } = {}) {\r\n    const response = await this.constructRequest(headers, signal);\r\n    return response;\r\n  }\r\n}\r\n", "import http from 'http';\r\nimport https from 'https';\r\nimport urlMod from 'url';\r\n\r\nimport { BaseClient, BaseResponse } from './base.js';\r\nimport { AbortError } from '../../utils.js';\r\n\r\nclass HttpResponse extends BaseResponse {\r\n  /**\r\n   * BaseResponse facade for node HTTP/HTTPS API Response\r\n   * @param {http.ServerResponse} response\r\n   */\r\n  constructor(response, dataPromise) {\r\n    super();\r\n    this.response = response;\r\n    this.dataPromise = dataPromise;\r\n  }\r\n\r\n  get status() {\r\n    return this.response.statusCode;\r\n  }\r\n\r\n  getHeader(name) {\r\n    return this.response.headers[name];\r\n  }\r\n\r\n  async getData() {\r\n    const data = await this.dataPromise;\r\n    return data;\r\n  }\r\n}\r\n\r\nexport class HttpClient extends BaseClient {\r\n  constructor(url) {\r\n    super(url);\r\n    this.parsedUrl = urlMod.parse(this.url);\r\n    this.httpApi = (this.parsedUrl.protocol === 'http:' ? http : https);\r\n  }\r\n\r\n  constructRequest(headers, signal) {\r\n    return new Promise((resolve, reject) => {\r\n      const request = this.httpApi.get(\r\n        {\r\n          ...this.parsedUrl,\r\n          headers,\r\n        },\r\n        (response) => {\r\n          const dataPromise = new Promise((resolveData) => {\r\n            const chunks = [];\r\n\r\n            // collect chunks\r\n            response.on('data', (chunk) => {\r\n              chunks.push(chunk);\r\n            });\r\n\r\n            // concatenate all chunks and resolve the promise with the resulting buffer\r\n            response.on('end', () => {\r\n              const data = Buffer.concat(chunks).buffer;\r\n              resolveData(data);\r\n            });\r\n            response.on('error', reject);\r\n          });\r\n          resolve(new HttpResponse(response, dataPromise));\r\n        },\r\n      );\r\n      request.on('error', reject);\r\n\r\n      if (signal) {\r\n        if (signal.aborted) {\r\n          request.destroy(new AbortError('Request aborted'));\r\n        }\r\n        signal.addEventListener('abort', () => request.destroy(new AbortError('Request aborted')));\r\n      }\r\n    });\r\n  }\r\n\r\n  async request({ headers, signal } = {}) {\r\n    const response = await this.constructRequest(headers, signal);\r\n    return response;\r\n  }\r\n}\r\n", "import { parseByteRanges, parseContentRange, parseContentType } from './httputils.js';\r\nimport { BaseSource } from './basesource.js';\r\nimport { BlockedSource } from './blockedsource.js';\r\n\r\nimport { FetchClient } from './client/fetch.js';\r\nimport { XHRClient } from './client/xhr.js';\r\nimport { HttpClient } from './client/http.js';\r\n\r\nclass RemoteSource extends BaseSource {\r\n  /**\r\n   *\r\n   * @param {BaseClient} client\r\n   * @param {object} headers\r\n   * @param {numbers} maxRanges\r\n   * @param {boolean} allowFullFile\r\n   */\r\n  constructor(client, headers, maxRanges, allowFullFile) {\r\n    super();\r\n    this.client = client;\r\n    this.headers = headers;\r\n    this.maxRanges = maxRanges;\r\n    this.allowFullFile = allowFullFile;\r\n    this._fileSize = null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Slice[]} slices\r\n   */\r\n  async fetch(slices, signal) {\r\n    // if we allow multi-ranges, split the incoming request into that many sub-requests\r\n    // and join them afterwards\r\n    if (this.maxRanges >= slices.length) {\r\n      return this.fetchSlices(slices, signal);\r\n    } else if (this.maxRanges > 0 && slices.length > 1) {\r\n      // TODO: split into multiple multi-range requests\r\n\r\n      // const subSlicesRequests = [];\r\n      // for (let i = 0; i < slices.length; i += this.maxRanges) {\r\n      //   subSlicesRequests.push(\r\n      //     this.fetchSlices(slices.slice(i, i + this.maxRanges), signal),\r\n      //   );\r\n      // }\r\n      // return (await Promise.all(subSlicesRequests)).flat();\r\n    }\r\n\r\n    // otherwise make a single request for each slice\r\n    return Promise.all(\r\n      slices.map((slice) => this.fetchSlice(slice, signal)),\r\n    );\r\n  }\r\n\r\n  async fetchSlices(slices, signal) {\r\n    const response = await this.client.request({\r\n      headers: {\r\n        ...this.headers,\r\n        Range: `bytes=${slices\r\n          .map(({ offset, length }) => `${offset}-${offset + length}`)\r\n          .join(',')\r\n        }`,\r\n      },\r\n      signal,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Error fetching data.');\r\n    } else if (response.status === 206) {\r\n      const { type, params } = parseContentType(response.getHeader('content-type'));\r\n      if (type === 'multipart/byteranges') {\r\n        const byteRanges = parseByteRanges(await response.getData(), params.boundary);\r\n        this._fileSize = byteRanges[0].fileSize || null;\r\n        return byteRanges;\r\n      }\r\n\r\n      const data = await response.getData();\r\n\r\n      const { start, end, total } = parseContentRange(response.getHeader('content-range'));\r\n      this._fileSize = total || null;\r\n      const first = [{\r\n        data,\r\n        offset: start,\r\n        length: end - start,\r\n      }];\r\n\r\n      if (slices.length > 1) {\r\n        // we requested more than one slice, but got only the first\r\n        // unfortunately, some HTTP Servers don't support multi-ranges\r\n        // and return only the first\r\n\r\n        // get the rest of the slices and fetch them iteratively\r\n        const others = await Promise.all(slices.slice(1).map((slice) => this.fetchSlice(slice, signal)));\r\n        return first.concat(others);\r\n      }\r\n      return first;\r\n    } else {\r\n      if (!this.allowFullFile) {\r\n        throw new Error('Server responded with full file');\r\n      }\r\n      const data = await response.getData();\r\n      this._fileSize = data.byteLength;\r\n      return [{\r\n        data,\r\n        offset: 0,\r\n        length: data.byteLength,\r\n      }];\r\n    }\r\n  }\r\n\r\n  async fetchSlice(slice, signal) {\r\n    const { offset, length } = slice;\r\n    const response = await this.client.request({\r\n      headers: {\r\n        ...this.headers,\r\n        Range: `bytes=${offset}-${offset + length}`,\r\n      },\r\n      signal,\r\n    });\r\n\r\n    // check the response was okay and if the server actually understands range requests\r\n    if (!response.ok) {\r\n      throw new Error('Error fetching data.');\r\n    } else if (response.status === 206) {\r\n      const data = await response.getData();\r\n\r\n      const { total } = parseContentRange(response.getHeader('content-range'));\r\n      this._fileSize = total || null;\r\n      return {\r\n        data,\r\n        offset,\r\n        length,\r\n      };\r\n    } else {\r\n      if (!this.allowFullFile) {\r\n        throw new Error('Server responded with full file');\r\n      }\r\n\r\n      const data = await response.getData();\r\n\r\n      this._fileSize = data.byteLength;\r\n      return {\r\n        data,\r\n        offset: 0,\r\n        length: data.byteLength,\r\n      };\r\n    }\r\n  }\r\n\r\n  get fileSize() {\r\n    return this._fileSize;\r\n  }\r\n}\r\n\r\nfunction maybeWrapInBlockedSource(source, { blockSize, cacheSize }) {\r\n  if (blockSize === null) {\r\n    return source;\r\n  }\r\n  return new BlockedSource(source, { blockSize, cacheSize });\r\n}\r\n\r\nexport function makeFetchSource(url, { headers = {}, credentials, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\r\n  const client = new FetchClient(url, credentials);\r\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\r\n  return maybeWrapInBlockedSource(source, blockOptions);\r\n}\r\n\r\nexport function makeXHRSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\r\n  const client = new XHRClient(url);\r\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\r\n  return maybeWrapInBlockedSource(source, blockOptions);\r\n}\r\n\r\nexport function makeHttpSource(url, { headers = {}, maxRanges = 0, allowFullFile = false, ...blockOptions } = {}) {\r\n  const client = new HttpClient(url);\r\n  const source = new RemoteSource(client, headers, maxRanges, allowFullFile);\r\n  return maybeWrapInBlockedSource(source, blockOptions);\r\n}\r\n\r\n/**\r\n *\r\n * @param {string} url\r\n * @param {object} options\r\n */\r\nexport function makeRemoteSource(url, { forceXHR = false, ...clientOptions } = {}) {\r\n  if (typeof fetch === 'function' && !forceXHR) {\r\n    return makeFetchSource(url, clientOptions);\r\n  }\r\n  if (typeof XMLHttpRequest !== 'undefined') {\r\n    return makeXHRSource(url, clientOptions);\r\n  }\r\n  return makeHttpSource(url, clientOptions);\r\n}\r\n", "import { BaseSource } from './basesource.js';\r\n\r\nclass FileReaderSource extends BaseSource {\r\n  constructor(file) {\r\n    super();\r\n    this.file = file;\r\n  }\r\n\r\n  async fetchSlice(slice, signal) {\r\n    return new Promise((resolve, reject) => {\r\n      const blob = this.file.slice(slice.offset, slice.offset + slice.length);\r\n      const reader = new FileReader();\r\n      reader.onload = (event) => resolve(event.target.result);\r\n      reader.onerror = reject;\r\n      reader.onabort = reject;\r\n      reader.readAsArrayBuffer(blob);\r\n\r\n      if (signal) {\r\n        signal.addEventListener('abort', () => reader.abort());\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create a new source from a given file/blob.\r\n * @param {Blob} file The file or blob to read from.\r\n * @returns The constructed source\r\n */\r\nexport function makeFileReaderSource(file) {\r\n  return new FileReaderSource(file);\r\n}\r\n", "import fs from 'fs';\r\nimport { BaseSource } from './basesource.js';\r\n\r\nfunction closeAsync(fd) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.close(fd, (err) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction openAsync(path, flags, mode = undefined) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.open(path, flags, mode, (err, fd) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve(fd);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction readAsync(...args) {\r\n  return new Promise((resolve, reject) => {\r\n    fs.read(...args, (err, bytesRead, buffer) => {\r\n      if (err) {\r\n        reject(err);\r\n      } else {\r\n        resolve({ bytesRead, buffer });\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nclass FileSource extends BaseSource {\r\n  constructor(path) {\r\n    super();\r\n    this.path = path;\r\n    this.openRequest = openAsync(path, 'r');\r\n  }\r\n\r\n  async fetchSlice(slice) {\r\n    // TODO: use `signal`\r\n    const fd = await this.openRequest;\r\n    const { buffer } = await readAsync(\r\n      fd,\r\n      Buffer.alloc(slice.length),\r\n      0,\r\n      slice.length,\r\n      slice.offset,\r\n    );\r\n    return buffer.buffer;\r\n  }\r\n\r\n  async close() {\r\n    const fd = await this.openRequest;\r\n    await closeAsync(fd);\r\n  }\r\n}\r\n\r\nexport function makeFileSource(path) {\r\n  return new FileSource(path);\r\n}\r\n", "/*\r\n  Some parts of this file are based on UTIF.js,\r\n  which was released under the MIT License.\r\n  You can view that here:\r\n  https://github.com/photopea/UTIF.js/blob/master/LICENSE\r\n*/\r\nimport { fieldTagNames, fieldTagTypes, fieldTypeNames, geoKeyNames } from './globals.js';\r\nimport { assign, endsWith, forEach, invert, times } from './utils.js';\r\n\r\nconst tagName2Code = invert(fieldTagNames);\r\nconst geoKeyName2Code = invert(geoKeyNames);\r\nconst name2code = {};\r\nassign(name2code, tagName2Code);\r\nassign(name2code, geoKeyName2Code);\r\nconst typeName2byte = invert(fieldTypeNames);\r\n\r\n// config variables\r\nconst numBytesInIfd = 1000;\r\n\r\nconst _binBE = {\r\n  nextZero: (data, o) => {\r\n    let oincr = o;\r\n    while (data[oincr] !== 0) {\r\n      oincr++;\r\n    }\r\n    return oincr;\r\n  },\r\n  readUshort: (buff, p) => {\r\n    return (buff[p] << 8) | buff[p + 1];\r\n  },\r\n  readShort: (buff, p) => {\r\n    const a = _binBE.ui8;\r\n    a[0] = buff[p + 1];\r\n    a[1] = buff[p + 0];\r\n    return _binBE.i16[0];\r\n  },\r\n  readInt: (buff, p) => {\r\n    const a = _binBE.ui8;\r\n    a[0] = buff[p + 3];\r\n    a[1] = buff[p + 2];\r\n    a[2] = buff[p + 1];\r\n    a[3] = buff[p + 0];\r\n    return _binBE.i32[0];\r\n  },\r\n  readUint: (buff, p) => {\r\n    const a = _binBE.ui8;\r\n    a[0] = buff[p + 3];\r\n    a[1] = buff[p + 2];\r\n    a[2] = buff[p + 1];\r\n    a[3] = buff[p + 0];\r\n    return _binBE.ui32[0];\r\n  },\r\n  readASCII: (buff, p, l) => {\r\n    return l.map((i) => String.fromCharCode(buff[p + i])).join('');\r\n  },\r\n  readFloat: (buff, p) => {\r\n    const a = _binBE.ui8;\r\n    times(4, (i) => {\r\n      a[i] = buff[p + 3 - i];\r\n    });\r\n    return _binBE.fl32[0];\r\n  },\r\n  readDouble: (buff, p) => {\r\n    const a = _binBE.ui8;\r\n    times(8, (i) => {\r\n      a[i] = buff[p + 7 - i];\r\n    });\r\n    return _binBE.fl64[0];\r\n  },\r\n  writeUshort: (buff, p, n) => {\r\n    buff[p] = (n >> 8) & 255;\r\n    buff[p + 1] = n & 255;\r\n  },\r\n  writeUint: (buff, p, n) => {\r\n    buff[p] = (n >> 24) & 255;\r\n    buff[p + 1] = (n >> 16) & 255;\r\n    buff[p + 2] = (n >> 8) & 255;\r\n    buff[p + 3] = (n >> 0) & 255;\r\n  },\r\n  writeASCII: (buff, p, s) => {\r\n    times(s.length, (i) => {\r\n      buff[p + i] = s.charCodeAt(i);\r\n    });\r\n  },\r\n  ui8: new Uint8Array(8),\r\n};\r\n\r\n_binBE.fl64 = new Float64Array(_binBE.ui8.buffer);\r\n\r\n_binBE.writeDouble = (buff, p, n) => {\r\n  _binBE.fl64[0] = n;\r\n  times(8, (i) => {\r\n    buff[p + i] = _binBE.ui8[7 - i];\r\n  });\r\n};\r\n\r\nconst _writeIFD = (bin, data, _offset, ifd) => {\r\n  let offset = _offset;\r\n\r\n  const keys = Object.keys(ifd).filter((key) => {\r\n    return key !== undefined && key !== null && key !== 'undefined';\r\n  });\r\n\r\n  bin.writeUshort(data, offset, keys.length);\r\n  offset += 2;\r\n\r\n  let eoff = offset + (12 * keys.length) + 4;\r\n\r\n  for (const key of keys) {\r\n    let tag = null;\r\n    if (typeof key === 'number') {\r\n      tag = key;\r\n    } else if (typeof key === 'string') {\r\n      tag = parseInt(key, 10);\r\n    }\r\n\r\n    const typeName = fieldTagTypes[tag];\r\n    const typeNum = typeName2byte[typeName];\r\n\r\n    if (typeName == null || typeName === undefined || typeof typeName === 'undefined') {\r\n      throw new Error(`unknown type of tag: ${tag}`);\r\n    }\r\n\r\n    let val = ifd[key];\r\n\r\n    if (val === undefined) {\r\n      throw new Error(`failed to get value for key ${key}`);\r\n    }\r\n\r\n    // ASCIIZ format with trailing 0 character\r\n    // http://www.fileformat.info/format/tiff/corion.htm\r\n    // https://stackoverflow.com/questions/7783044/whats-the-difference-between-asciiz-vs-ascii\r\n    if (typeName === 'ASCII' && typeof val === 'string' && endsWith(val, '\\u0000') === false) {\r\n      val += '\\u0000';\r\n    }\r\n\r\n    const num = val.length;\r\n\r\n    bin.writeUshort(data, offset, tag);\r\n    offset += 2;\r\n\r\n    bin.writeUshort(data, offset, typeNum);\r\n    offset += 2;\r\n\r\n    bin.writeUint(data, offset, num);\r\n    offset += 4;\r\n\r\n    let dlen = [-1, 1, 1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 8][typeNum] * num;\r\n    let toff = offset;\r\n\r\n    if (dlen > 4) {\r\n      bin.writeUint(data, offset, eoff);\r\n      toff = eoff;\r\n    }\r\n\r\n    if (typeName === 'ASCII') {\r\n      bin.writeASCII(data, toff, val);\r\n    } else if (typeName === 'SHORT') {\r\n      times(num, (i) => {\r\n        bin.writeUshort(data, toff + (2 * i), val[i]);\r\n      });\r\n    } else if (typeName === 'LONG') {\r\n      times(num, (i) => {\r\n        bin.writeUint(data, toff + (4 * i), val[i]);\r\n      });\r\n    } else if (typeName === 'RATIONAL') {\r\n      times(num, (i) => {\r\n        bin.writeUint(data, toff + (8 * i), Math.round(val[i] * 10000));\r\n        bin.writeUint(data, toff + (8 * i) + 4, 10000);\r\n      });\r\n    } else if (typeName === 'DOUBLE') {\r\n      times(num, (i) => {\r\n        bin.writeDouble(data, toff + (8 * i), val[i]);\r\n      });\r\n    }\r\n\r\n    if (dlen > 4) {\r\n      dlen += (dlen & 1);\r\n      eoff += dlen;\r\n    }\r\n\r\n    offset += 4;\r\n  }\r\n\r\n  return [offset, eoff];\r\n};\r\n\r\nconst encodeIfds = (ifds) => {\r\n  const data = new Uint8Array(numBytesInIfd);\r\n  let offset = 4;\r\n  const bin = _binBE;\r\n\r\n  // set big-endian byte-order\r\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\r\n  data[0] = 77;\r\n  data[1] = 77;\r\n\r\n  // set format-version number\r\n  // https://en.wikipedia.org/wiki/TIFF#Byte_order\r\n  data[3] = 42;\r\n\r\n  let ifdo = 8;\r\n\r\n  bin.writeUint(data, offset, ifdo);\r\n\r\n  offset += 4;\r\n\r\n  ifds.forEach((ifd, i) => {\r\n    const noffs = _writeIFD(bin, data, ifdo, ifd);\r\n    ifdo = noffs[1];\r\n    if (i < ifds.length - 1) {\r\n      bin.writeUint(data, noffs[0], ifdo);\r\n    }\r\n  });\r\n\r\n  if (data.slice) {\r\n    return data.slice(0, ifdo).buffer;\r\n  }\r\n\r\n  // node hasn't implemented slice on Uint8Array yet\r\n  const result = new Uint8Array(ifdo);\r\n  for (let i = 0; i < ifdo; i++) {\r\n    result[i] = data[i];\r\n  }\r\n  return result.buffer;\r\n};\r\n\r\nconst encodeImage = (values, width, height, metadata) => {\r\n  if (height === undefined || height === null) {\r\n    throw new Error(`you passed into encodeImage a width of type ${height}`);\r\n  }\r\n\r\n  if (width === undefined || width === null) {\r\n    throw new Error(`you passed into encodeImage a width of type ${width}`);\r\n  }\r\n\r\n  const ifd = {\r\n    256: [width], // ImageWidth\r\n    257: [height], // ImageLength\r\n    273: [numBytesInIfd], // strips offset\r\n    278: [height], // RowsPerStrip\r\n    305: 'geotiff.js', // no array for ASCII(Z)\r\n  };\r\n\r\n  if (metadata) {\r\n    for (const i in metadata) {\r\n      if (metadata.hasOwnProperty(i)) {\r\n        ifd[i] = metadata[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  const prfx = new Uint8Array(encodeIfds([ifd]));\r\n\r\n  const img = new Uint8Array(values);\r\n\r\n  const samplesPerPixel = ifd[277];\r\n\r\n  const data = new Uint8Array(numBytesInIfd + (width * height * samplesPerPixel));\r\n  times(prfx.length, (i) => {\r\n    data[i] = prfx[i];\r\n  });\r\n  forEach(img, (value, i) => {\r\n    data[numBytesInIfd + i] = value;\r\n  });\r\n\r\n  return data.buffer;\r\n};\r\n\r\nconst convertToTids = (input) => {\r\n  const result = {};\r\n  for (const key in input) {\r\n    if (key !== 'StripOffsets') {\r\n      if (!name2code[key]) {\r\n        console.error(key, 'not in name2code:', Object.keys(name2code));\r\n      }\r\n      result[name2code[key]] = input[key];\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\nconst toArray = (input) => {\r\n  if (Array.isArray(input)) {\r\n    return input;\r\n  }\r\n  return [input];\r\n};\r\n\r\nconst metadataDefaults = [\r\n  ['Compression', 1], // no compression\r\n  ['PlanarConfiguration', 1],\r\n  ['ExtraSamples', 0],\r\n];\r\n\r\nexport function writeGeotiff(data, metadata) {\r\n  const isFlattened = typeof data[0] === 'number';\r\n\r\n  let height;\r\n  let numBands;\r\n  let width;\r\n  let flattenedValues;\r\n\r\n  if (isFlattened) {\r\n    height = metadata.height || metadata.ImageLength;\r\n    width = metadata.width || metadata.ImageWidth;\r\n    numBands = data.length / (height * width);\r\n    flattenedValues = data;\r\n  } else {\r\n    numBands = data.length;\r\n    height = data[0].length;\r\n    width = data[0][0].length;\r\n    flattenedValues = [];\r\n    times(height, (rowIndex) => {\r\n      times(width, (columnIndex) => {\r\n        times(numBands, (bandIndex) => {\r\n          flattenedValues.push(data[bandIndex][rowIndex][columnIndex]);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  metadata.ImageLength = height;\r\n  delete metadata.height;\r\n  metadata.ImageWidth = width;\r\n  delete metadata.width;\r\n\r\n  // consult https://www.loc.gov/preservation/digital/formats/content/tiff_tags.shtml\r\n\r\n  if (!metadata.BitsPerSample) {\r\n    metadata.BitsPerSample = times(numBands, () => 8);\r\n  }\r\n\r\n  metadataDefaults.forEach((tag) => {\r\n    const key = tag[0];\r\n    if (!metadata[key]) {\r\n      const value = tag[1];\r\n      metadata[key] = value;\r\n    }\r\n  });\r\n\r\n  // The color space of the image data.\r\n  // 1=black is zero and 2=RGB.\r\n  if (!metadata.PhotometricInterpretation) {\r\n    metadata.PhotometricInterpretation = metadata.BitsPerSample.length === 3 ? 2 : 1;\r\n  }\r\n\r\n  // The number of components per pixel.\r\n  if (!metadata.SamplesPerPixel) {\r\n    metadata.SamplesPerPixel = [numBands];\r\n  }\r\n\r\n  if (!metadata.StripByteCounts) {\r\n    // we are only writing one strip\r\n    metadata.StripByteCounts = [numBands * height * width];\r\n  }\r\n\r\n  if (!metadata.ModelPixelScale) {\r\n    // assumes raster takes up exactly the whole globe\r\n    metadata.ModelPixelScale = [360 / width, 180 / height, 0];\r\n  }\r\n\r\n  if (!metadata.SampleFormat) {\r\n    metadata.SampleFormat = times(numBands, () => 1);\r\n  }\r\n\r\n  // if didn't pass in projection information, assume the popular 4326 \"geographic projection\"\r\n  if (!metadata.hasOwnProperty('GeographicTypeGeoKey') && !metadata.hasOwnProperty('ProjectedCSTypeGeoKey')) {\r\n    metadata.GeographicTypeGeoKey = 4326;\r\n    metadata.ModelTiepoint = [0, 0, 0, -180, 90, 0]; // raster fits whole globe\r\n    metadata.GeogCitationGeoKey = 'WGS 84';\r\n    metadata.GTModelTypeGeoKey = 2;\r\n  }\r\n\r\n  const geoKeys = Object.keys(metadata)\r\n    .filter((key) => endsWith(key, 'GeoKey'))\r\n    .sort((a, b) => name2code[a] - name2code[b]);\r\n\r\n  if (!metadata.GeoAsciiParams) {\r\n    let geoAsciiParams = '';\r\n    geoKeys.forEach((name) => {\r\n      const code = Number(name2code[name]);\r\n      const tagType = fieldTagTypes[code];\r\n      if (tagType === 'ASCII') {\r\n        geoAsciiParams += `${metadata[name].toString()}\\u0000`;\r\n      }\r\n    });\r\n    if (geoAsciiParams.length > 0) {\r\n      metadata.GeoAsciiParams = geoAsciiParams;\r\n    }\r\n  }\r\n\r\n  if (!metadata.GeoKeyDirectory) {\r\n    const NumberOfKeys = geoKeys.length;\r\n\r\n    const GeoKeyDirectory = [1, 1, 0, NumberOfKeys];\r\n    geoKeys.forEach((geoKey) => {\r\n      const KeyID = Number(name2code[geoKey]);\r\n      GeoKeyDirectory.push(KeyID);\r\n\r\n      let Count;\r\n      let TIFFTagLocation;\r\n      let valueOffset;\r\n      if (fieldTagTypes[KeyID] === 'SHORT') {\r\n        Count = 1;\r\n        TIFFTagLocation = 0;\r\n        valueOffset = metadata[geoKey];\r\n      } else if (geoKey === 'GeogCitationGeoKey') {\r\n        Count = metadata.GeoAsciiParams.length;\r\n        TIFFTagLocation = Number(name2code.GeoAsciiParams);\r\n        valueOffset = 0;\r\n      } else {\r\n        console.log(`[geotiff.js] couldn't get TIFFTagLocation for ${geoKey}`);\r\n      }\r\n      GeoKeyDirectory.push(TIFFTagLocation);\r\n      GeoKeyDirectory.push(Count);\r\n      GeoKeyDirectory.push(valueOffset);\r\n    });\r\n    metadata.GeoKeyDirectory = GeoKeyDirectory;\r\n  }\r\n\r\n  // delete GeoKeys from metadata, because stored in GeoKeyDirectory tag\r\n  for (const geoKey in geoKeys) {\r\n    if (geoKeys.hasOwnProperty(geoKey)) {\r\n      delete metadata[geoKey];\r\n    }\r\n  }\r\n\r\n  [\r\n    'Compression',\r\n    'ExtraSamples',\r\n    'GeographicTypeGeoKey',\r\n    'GTModelTypeGeoKey',\r\n    'GTRasterTypeGeoKey',\r\n    'ImageLength', // synonym of ImageHeight\r\n    'ImageWidth',\r\n    'Orientation',\r\n    'PhotometricInterpretation',\r\n    'ProjectedCSTypeGeoKey',\r\n    'PlanarConfiguration',\r\n    'ResolutionUnit',\r\n    'SamplesPerPixel',\r\n    'XPosition',\r\n    'YPosition',\r\n  ].forEach((name) => {\r\n    if (metadata[name]) {\r\n      metadata[name] = toArray(metadata[name]);\r\n    }\r\n  });\r\n\r\n  const encodedMetadata = convertToTids(metadata);\r\n\r\n  const outputImage = encodeImage(flattenedValues, width, height, encodedMetadata);\r\n\r\n  return outputImage;\r\n}\r\n", "/**\r\n * A no-op logger\r\n */\r\nclass DummyLogger {\r\n  log() {}\r\n\r\n  debug() {}\r\n\r\n  info() {}\r\n\r\n  warn() {}\r\n\r\n  error() {}\r\n\r\n  time() {}\r\n\r\n  timeEnd() {}\r\n}\r\n\r\nlet LOGGER = new DummyLogger();\r\n\r\n/**\r\n *\r\n * @param {object} logger the new logger. e.g `console`\r\n */\r\nexport function setLogger(logger = new DummyLogger()) {\r\n  LOGGER = logger;\r\n}\r\n\r\nexport function debug(...args) {\r\n  return LOGGER.debug(...args);\r\n}\r\n\r\nexport function log(...args) {\r\n  return LOGGER.log(...args);\r\n}\r\n\r\nexport function info(...args) {\r\n  return LOGGER.info(...args);\r\n}\r\n\r\nexport function warn(...args) {\r\n  return LOGGER.warn(...args);\r\n}\r\n\r\nexport function error(...args) {\r\n  return LOGGER.error(...args);\r\n}\r\n\r\nexport function time(...args) {\r\n  return LOGGER.time(...args);\r\n}\r\n\r\nexport function timeEnd(...args) {\r\n  return LOGGER.timeEnd(...args);\r\n}\r\n", "/** @module geotiff */\r\nimport GeoTIFFImage from './geotiffimage.js';\r\nimport DataView64 from './dataview64.js';\r\nimport DataSlice from './dataslice.js';\r\nimport Pool from './pool.js';\r\n\r\nimport { makeRemoteSource } from './source/remote.js';\r\nimport { makeBufferSource } from './source/arraybuffer.js';\r\nimport { makeFileReaderSource } from './source/filereader.js';\r\nimport { makeFileSource } from './source/file.js';\r\n\r\nimport { fieldTypes, fieldTagNames, arrayFields, geoKeyNames } from './globals.js';\r\nimport { writeGeotiff } from './geotiffwriter.js';\r\nimport * as globals from './globals.js';\r\nimport * as rgb from './rgb.js';\r\nimport { getDecoder, addDecoder } from './compression/index.js';\r\nimport { setLogger } from './logging.js';\r\n\r\nexport { globals };\r\nexport { rgb };\r\nexport { default as BaseDecoder } from './compression/basedecoder.js';\r\nexport { getDecoder, addDecoder };\r\nexport { setLogger };\r\n\r\n/**\r\n * @typedef {Uint8Array | Int8Array | Uint16Array | Int16Array | Uint32Array | Int32Array | Float32Array | Float64Array}\r\n * TypedArray\r\n */\r\n\r\n/**\r\n * @typedef {{ height:number, width: number }} Dimensions\r\n */\r\n\r\n/**\r\n * The autogenerated docs are a little confusing here. The effective type is:\r\n *\r\n * `TypedArray & { height: number; width: number}`\r\n * @typedef {TypedArray & Dimensions} TypedArrayWithDimensions\r\n */\r\n\r\n/**\r\n * The autogenerated docs are a little confusing here. The effective type is:\r\n *\r\n * `TypedArray[] & { height: number; width: number}`\r\n * @typedef {TypedArray[] & Dimensions} TypedArrayArrayWithDimensions\r\n */\r\n\r\n/**\r\n *  The autogenerated docs are a little confusing here. The effective type is:\r\n *\r\n * `(TypedArray | TypedArray[]) & { height: number; width: number}`\r\n * @typedef {TypedArrayWithDimensions | TypedArrayArrayWithDimensions} ReadRasterResult\r\n */\r\n\r\nfunction getFieldTypeLength(fieldType) {\r\n  switch (fieldType) {\r\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.SBYTE: case fieldTypes.UNDEFINED:\r\n      return 1;\r\n    case fieldTypes.SHORT: case fieldTypes.SSHORT:\r\n      return 2;\r\n    case fieldTypes.LONG: case fieldTypes.SLONG: case fieldTypes.FLOAT: case fieldTypes.IFD:\r\n      return 4;\r\n    case fieldTypes.RATIONAL: case fieldTypes.SRATIONAL: case fieldTypes.DOUBLE:\r\n    case fieldTypes.LONG8: case fieldTypes.SLONG8: case fieldTypes.IFD8:\r\n      return 8;\r\n    default:\r\n      throw new RangeError(`Invalid field type: ${fieldType}`);\r\n  }\r\n}\r\n\r\nfunction parseGeoKeyDirectory(fileDirectory) {\r\n  const rawGeoKeyDirectory = fileDirectory.GeoKeyDirectory;\r\n  if (!rawGeoKeyDirectory) {\r\n    return null;\r\n  }\r\n\r\n  const geoKeyDirectory = {};\r\n  for (let i = 4; i <= rawGeoKeyDirectory[3] * 4; i += 4) {\r\n    const key = geoKeyNames[rawGeoKeyDirectory[i]];\r\n    const location = (rawGeoKeyDirectory[i + 1])\r\n      ? (fieldTagNames[rawGeoKeyDirectory[i + 1]]) : null;\r\n    const count = rawGeoKeyDirectory[i + 2];\r\n    const offset = rawGeoKeyDirectory[i + 3];\r\n\r\n    let value = null;\r\n    if (!location) {\r\n      value = offset;\r\n    } else {\r\n      value = fileDirectory[location];\r\n      if (typeof value === 'undefined' || value === null) {\r\n        throw new Error(`Could not get value of geoKey '${key}'.`);\r\n      } else if (typeof value === 'string') {\r\n        value = value.substring(offset, offset + count - 1);\r\n      } else if (value.subarray) {\r\n        value = value.subarray(offset, offset + count);\r\n        if (count === 1) {\r\n          value = value[0];\r\n        }\r\n      }\r\n    }\r\n    geoKeyDirectory[key] = value;\r\n  }\r\n  return geoKeyDirectory;\r\n}\r\n\r\nfunction getValues(dataSlice, fieldType, count, offset) {\r\n  let values = null;\r\n  let readMethod = null;\r\n  const fieldTypeLength = getFieldTypeLength(fieldType);\r\n\r\n  switch (fieldType) {\r\n    case fieldTypes.BYTE: case fieldTypes.ASCII: case fieldTypes.UNDEFINED:\r\n      values = new Uint8Array(count); readMethod = dataSlice.readUint8;\r\n      break;\r\n    case fieldTypes.SBYTE:\r\n      values = new Int8Array(count); readMethod = dataSlice.readInt8;\r\n      break;\r\n    case fieldTypes.SHORT:\r\n      values = new Uint16Array(count); readMethod = dataSlice.readUint16;\r\n      break;\r\n    case fieldTypes.SSHORT:\r\n      values = new Int16Array(count); readMethod = dataSlice.readInt16;\r\n      break;\r\n    case fieldTypes.LONG: case fieldTypes.IFD:\r\n      values = new Uint32Array(count); readMethod = dataSlice.readUint32;\r\n      break;\r\n    case fieldTypes.SLONG:\r\n      values = new Int32Array(count); readMethod = dataSlice.readInt32;\r\n      break;\r\n    case fieldTypes.LONG8: case fieldTypes.IFD8:\r\n      values = new Array(count); readMethod = dataSlice.readUint64;\r\n      break;\r\n    case fieldTypes.SLONG8:\r\n      values = new Array(count); readMethod = dataSlice.readInt64;\r\n      break;\r\n    case fieldTypes.RATIONAL:\r\n      values = new Uint32Array(count * 2); readMethod = dataSlice.readUint32;\r\n      break;\r\n    case fieldTypes.SRATIONAL:\r\n      values = new Int32Array(count * 2); readMethod = dataSlice.readInt32;\r\n      break;\r\n    case fieldTypes.FLOAT:\r\n      values = new Float32Array(count); readMethod = dataSlice.readFloat32;\r\n      break;\r\n    case fieldTypes.DOUBLE:\r\n      values = new Float64Array(count); readMethod = dataSlice.readFloat64;\r\n      break;\r\n    default:\r\n      throw new RangeError(`Invalid field type: ${fieldType}`);\r\n  }\r\n\r\n  // normal fields\r\n  if (!(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\r\n    for (let i = 0; i < count; ++i) {\r\n      values[i] = readMethod.call(\r\n        dataSlice, offset + (i * fieldTypeLength),\r\n      );\r\n    }\r\n  } else { // RATIONAL or SRATIONAL\r\n    for (let i = 0; i < count; i += 2) {\r\n      values[i] = readMethod.call(\r\n        dataSlice, offset + (i * fieldTypeLength),\r\n      );\r\n      values[i + 1] = readMethod.call(\r\n        dataSlice, offset + ((i * fieldTypeLength) + 4),\r\n      );\r\n    }\r\n  }\r\n\r\n  if (fieldType === fieldTypes.ASCII) {\r\n    return new TextDecoder('utf-8').decode(values);\r\n  }\r\n  return values;\r\n}\r\n\r\n/**\r\n * Data class to store the parsed file directory, geo key directory and\r\n * offset to the next IFD\r\n */\r\nclass ImageFileDirectory {\r\n  constructor(fileDirectory, geoKeyDirectory, nextIFDByteOffset) {\r\n    this.fileDirectory = fileDirectory;\r\n    this.geoKeyDirectory = geoKeyDirectory;\r\n    this.nextIFDByteOffset = nextIFDByteOffset;\r\n  }\r\n}\r\n\r\n/**\r\n * Error class for cases when an IFD index was requested, that does not exist\r\n * in the file.\r\n */\r\nclass GeoTIFFImageIndexError extends Error {\r\n  constructor(index) {\r\n    super(`No image at index ${index}`);\r\n    this.index = index;\r\n  }\r\n}\r\n\r\nclass GeoTIFFBase {\r\n  /**\r\n   * (experimental) Reads raster data from the best fitting image. This function uses\r\n   * the image with the lowest resolution that is still a higher resolution than the\r\n   * requested resolution.\r\n   * When specified, the `bbox` option is translated to the `window` option and the\r\n   * `resX` and `resY` to `width` and `height` respectively.\r\n   * Then, the [readRasters]{@link GeoTIFFImage#readRasters} method of the selected\r\n   * image is called and the result returned.\r\n   * @see GeoTIFFImage.readRasters\r\n   * @param {import('./geotiffimage').ReadRasterOptions} [options={}] optional parameters\r\n   * @returns {Promise<ReadRasterResult>} the decoded array(s), with `height` and `width`, as a promise\r\n   */\r\n  async readRasters(options = {}) {\r\n    const { window: imageWindow, width, height } = options;\r\n    let { resX, resY, bbox } = options;\r\n\r\n    const firstImage = await this.getImage();\r\n    let usedImage = firstImage;\r\n    const imageCount = await this.getImageCount();\r\n    const imgBBox = firstImage.getBoundingBox();\r\n\r\n    if (imageWindow && bbox) {\r\n      throw new Error('Both \"bbox\" and \"window\" passed.');\r\n    }\r\n\r\n    // if width/height is passed, transform it to resolution\r\n    if (width || height) {\r\n      // if we have an image window (pixel coordinates), transform it to a BBox\r\n      // using the origin/resolution of the first image.\r\n      if (imageWindow) {\r\n        const [oX, oY] = firstImage.getOrigin();\r\n        const [rX, rY] = firstImage.getResolution();\r\n\r\n        bbox = [\r\n          oX + (imageWindow[0] * rX),\r\n          oY + (imageWindow[1] * rY),\r\n          oX + (imageWindow[2] * rX),\r\n          oY + (imageWindow[3] * rY),\r\n        ];\r\n      }\r\n\r\n      // if we have a bbox (or calculated one)\r\n\r\n      const usedBBox = bbox || imgBBox;\r\n\r\n      if (width) {\r\n        if (resX) {\r\n          throw new Error('Both width and resX passed');\r\n        }\r\n        resX = (usedBBox[2] - usedBBox[0]) / width;\r\n      }\r\n      if (height) {\r\n        if (resY) {\r\n          throw new Error('Both width and resY passed');\r\n        }\r\n        resY = (usedBBox[3] - usedBBox[1]) / height;\r\n      }\r\n    }\r\n\r\n    // if resolution is set or calculated, try to get the image with the worst acceptable resolution\r\n    if (resX || resY) {\r\n      const allImages = [];\r\n      for (let i = 0; i < imageCount; ++i) {\r\n        const image = await this.getImage(i);\r\n        const { SubfileType: subfileType, NewSubfileType: newSubfileType } = image.fileDirectory;\r\n        if (i === 0 || subfileType === 2 || newSubfileType & 1) {\r\n          allImages.push(image);\r\n        }\r\n      }\r\n\r\n      allImages.sort((a, b) => a.getWidth() - b.getWidth());\r\n      for (let i = 0; i < allImages.length; ++i) {\r\n        const image = allImages[i];\r\n        const imgResX = (imgBBox[2] - imgBBox[0]) / image.getWidth();\r\n        const imgResY = (imgBBox[3] - imgBBox[1]) / image.getHeight();\r\n\r\n        usedImage = image;\r\n        if ((resX && resX > imgResX) || (resY && resY > imgResY)) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    let wnd = imageWindow;\r\n    if (bbox) {\r\n      const [oX, oY] = firstImage.getOrigin();\r\n      const [imageResX, imageResY] = usedImage.getResolution(firstImage);\r\n\r\n      wnd = [\r\n        Math.round((bbox[0] - oX) / imageResX),\r\n        Math.round((bbox[1] - oY) / imageResY),\r\n        Math.round((bbox[2] - oX) / imageResX),\r\n        Math.round((bbox[3] - oY) / imageResY),\r\n      ];\r\n      wnd = [\r\n        Math.min(wnd[0], wnd[2]),\r\n        Math.min(wnd[1], wnd[3]),\r\n        Math.max(wnd[0], wnd[2]),\r\n        Math.max(wnd[1], wnd[3]),\r\n      ];\r\n    }\r\n\r\n    return usedImage.readRasters({ ...options, window: wnd });\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} GeoTIFFOptions\r\n * @property {boolean} [cache=false] whether or not decoded tiles shall be cached.\r\n */\r\n\r\n/**\r\n * The abstraction for a whole GeoTIFF file.\r\n * @augments GeoTIFFBase\r\n */\r\nclass GeoTIFF extends GeoTIFFBase {\r\n  /**\r\n   * @constructor\r\n   * @param {*} source The datasource to read from.\r\n   * @param {boolean} littleEndian Whether the image uses little endian.\r\n   * @param {boolean} bigTiff Whether the image uses bigTIFF conventions.\r\n   * @param {number} firstIFDOffset The numeric byte-offset from the start of the image\r\n   *                                to the first IFD.\r\n   * @param {GeoTIFFOptions} [options] further options.\r\n   */\r\n  constructor(source, littleEndian, bigTiff, firstIFDOffset, options = {}) {\r\n    super();\r\n    this.source = source;\r\n    this.littleEndian = littleEndian;\r\n    this.bigTiff = bigTiff;\r\n    this.firstIFDOffset = firstIFDOffset;\r\n    this.cache = options.cache || false;\r\n    this.ifdRequests = [];\r\n    this.ghostValues = null;\r\n  }\r\n\r\n  async getSlice(offset, size) {\r\n    const fallbackSize = this.bigTiff ? 4048 : 1024;\r\n    return new DataSlice(\r\n      (await this.source.fetch([{\r\n        offset,\r\n        length: typeof size !== 'undefined' ? size : fallbackSize,\r\n      }]))[0],\r\n      offset,\r\n      this.littleEndian,\r\n      this.bigTiff,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Instructs to parse an image file directory at the given file offset.\r\n   * As there is no way to ensure that a location is indeed the start of an IFD,\r\n   * this function must be called with caution (e.g only using the IFD offsets from\r\n   * the headers or other IFDs).\r\n   * @param {number} offset the offset to parse the IFD at\r\n   * @returns {Promise<ImageFileDirectory>} the parsed IFD\r\n   */\r\n  async parseFileDirectoryAt(offset) {\r\n    const entrySize = this.bigTiff ? 20 : 12;\r\n    const offsetSize = this.bigTiff ? 8 : 2;\r\n\r\n    let dataSlice = await this.getSlice(offset);\r\n    const numDirEntries = this.bigTiff\r\n      ? dataSlice.readUint64(offset)\r\n      : dataSlice.readUint16(offset);\r\n\r\n    // if the slice does not cover the whole IFD, request a bigger slice, where the\r\n    // whole IFD fits: num of entries + n x tag length + offset to next IFD\r\n    const byteSize = (numDirEntries * entrySize) + (this.bigTiff ? 16 : 6);\r\n    if (!dataSlice.covers(offset, byteSize)) {\r\n      dataSlice = await this.getSlice(offset, byteSize);\r\n    }\r\n\r\n    const fileDirectory = {};\r\n\r\n    // loop over the IFD and create a file directory object\r\n    let i = offset + (this.bigTiff ? 8 : 2);\r\n    for (let entryCount = 0; entryCount < numDirEntries; i += entrySize, ++entryCount) {\r\n      const fieldTag = dataSlice.readUint16(i);\r\n      const fieldType = dataSlice.readUint16(i + 2);\r\n      const typeCount = this.bigTiff\r\n        ? dataSlice.readUint64(i + 4)\r\n        : dataSlice.readUint32(i + 4);\r\n\r\n      let fieldValues;\r\n      let value;\r\n      const fieldTypeLength = getFieldTypeLength(fieldType);\r\n      const valueOffset = i + (this.bigTiff ? 12 : 8);\r\n\r\n      // check whether the value is directly encoded in the tag or refers to a\r\n      // different external byte range\r\n      if (fieldTypeLength * typeCount <= (this.bigTiff ? 8 : 4)) {\r\n        fieldValues = getValues(dataSlice, fieldType, typeCount, valueOffset);\r\n      } else {\r\n        // resolve the reference to the actual byte range\r\n        const actualOffset = dataSlice.readOffset(valueOffset);\r\n        const length = getFieldTypeLength(fieldType) * typeCount;\r\n\r\n        // check, whether we actually cover the referenced byte range; if not,\r\n        // request a new slice of bytes to read from it\r\n        if (dataSlice.covers(actualOffset, length)) {\r\n          fieldValues = getValues(dataSlice, fieldType, typeCount, actualOffset);\r\n        } else {\r\n          const fieldDataSlice = await this.getSlice(actualOffset, length);\r\n          fieldValues = getValues(fieldDataSlice, fieldType, typeCount, actualOffset);\r\n        }\r\n      }\r\n\r\n      // unpack single values from the array\r\n      if (typeCount === 1 && arrayFields.indexOf(fieldTag) === -1\r\n        && !(fieldType === fieldTypes.RATIONAL || fieldType === fieldTypes.SRATIONAL)) {\r\n        value = fieldValues[0];\r\n      } else {\r\n        value = fieldValues;\r\n      }\r\n\r\n      // write the tags value to the file directly\r\n      fileDirectory[fieldTagNames[fieldTag]] = value;\r\n    }\r\n    const geoKeyDirectory = parseGeoKeyDirectory(fileDirectory);\r\n    const nextIFDByteOffset = dataSlice.readOffset(\r\n      offset + offsetSize + (entrySize * numDirEntries),\r\n    );\r\n\r\n    return new ImageFileDirectory(\r\n      fileDirectory,\r\n      geoKeyDirectory,\r\n      nextIFDByteOffset,\r\n    );\r\n  }\r\n\r\n  async requestIFD(index) {\r\n    // see if we already have that IFD index requested.\r\n    if (this.ifdRequests[index]) {\r\n      // attach to an already requested IFD\r\n      return this.ifdRequests[index];\r\n    } else if (index === 0) {\r\n      // special case for index 0\r\n      this.ifdRequests[index] = this.parseFileDirectoryAt(this.firstIFDOffset);\r\n      return this.ifdRequests[index];\r\n    } else if (!this.ifdRequests[index - 1]) {\r\n      // if the previous IFD was not yet loaded, load that one first\r\n      // this is the recursive call.\r\n      try {\r\n        this.ifdRequests[index - 1] = this.requestIFD(index - 1);\r\n      } catch (e) {\r\n        // if the previous one already was an index error, rethrow\r\n        // with the current index\r\n        if (e instanceof GeoTIFFImageIndexError) {\r\n          throw new GeoTIFFImageIndexError(index);\r\n        }\r\n        // rethrow anything else\r\n        throw e;\r\n      }\r\n    }\r\n    // if the previous IFD was loaded, we can finally fetch the one we are interested in.\r\n    // we need to wrap this in an IIFE, otherwise this.ifdRequests[index] would be delayed\r\n    this.ifdRequests[index] = (async () => {\r\n      const previousIfd = await this.ifdRequests[index - 1];\r\n      if (previousIfd.nextIFDByteOffset === 0) {\r\n        throw new GeoTIFFImageIndexError(index);\r\n      }\r\n      return this.parseFileDirectoryAt(previousIfd.nextIFDByteOffset);\r\n    })();\r\n    return this.ifdRequests[index];\r\n  }\r\n\r\n  /**\r\n   * Get the n-th internal subfile of an image. By default, the first is returned.\r\n   *\r\n   * @param {number} [index=0] the index of the image to return.\r\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\r\n   */\r\n  async getImage(index = 0) {\r\n    const ifd = await this.requestIFD(index);\r\n    return new GeoTIFFImage(\r\n      ifd.fileDirectory, ifd.geoKeyDirectory,\r\n      this.dataView, this.littleEndian, this.cache, this.source,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the count of the internal subfiles.\r\n   *\r\n   * @returns {Promise<number>} the number of internal subfile images\r\n   */\r\n  async getImageCount() {\r\n    let index = 0;\r\n    // loop until we run out of IFDs\r\n    let hasNext = true;\r\n    while (hasNext) {\r\n      try {\r\n        await this.requestIFD(index);\r\n        ++index;\r\n      } catch (e) {\r\n        if (e instanceof GeoTIFFImageIndexError) {\r\n          hasNext = false;\r\n        } else {\r\n          throw e;\r\n        }\r\n      }\r\n    }\r\n    return index;\r\n  }\r\n\r\n  /**\r\n   * Get the values of the COG ghost area as a parsed map.\r\n   * See https://gdal.org/drivers/raster/cog.html#header-ghost-area for reference\r\n   * @returns {Promise<Object>} the parsed ghost area or null, if no such area was found\r\n   */\r\n  async getGhostValues() {\r\n    const offset = this.bigTiff ? 16 : 8;\r\n    if (this.ghostValues) {\r\n      return this.ghostValues;\r\n    }\r\n    const detectionString = 'GDAL_STRUCTURAL_METADATA_SIZE=';\r\n    const heuristicAreaSize = detectionString.length + 100;\r\n    let slice = await this.getSlice(offset, heuristicAreaSize);\r\n    if (detectionString === getValues(slice, fieldTypes.ASCII, detectionString.length, offset)) {\r\n      const valuesString = getValues(slice, fieldTypes.ASCII, heuristicAreaSize, offset);\r\n      const firstLine = valuesString.split('\\n')[0];\r\n      const metadataSize = Number(firstLine.split('=')[1].split(' ')[0]) + firstLine.length;\r\n      if (metadataSize > heuristicAreaSize) {\r\n        slice = await this.getSlice(offset, metadataSize);\r\n      }\r\n      const fullString = getValues(slice, fieldTypes.ASCII, metadataSize, offset);\r\n      this.ghostValues = {};\r\n      fullString\r\n        .split('\\n')\r\n        .filter((line) => line.length > 0)\r\n        .map((line) => line.split('='))\r\n        .forEach(([key, value]) => {\r\n          this.ghostValues[key] = value;\r\n        });\r\n    }\r\n    return this.ghostValues;\r\n  }\r\n\r\n  /**\r\n   * Parse a (Geo)TIFF file from the given source.\r\n   *\r\n   * @param {*} source The source of data to parse from.\r\n   * @param {GeoTIFFOptions} [options] Additional options.\r\n   * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n   *                               to be aborted\r\n   */\r\n  static async fromSource(source, options, signal) {\r\n    const headerData = (await source.fetch([{ offset: 0, length: 1024 }], signal))[0];\r\n    const dataView = new DataView64(headerData);\r\n\r\n    const BOM = dataView.getUint16(0, 0);\r\n    let littleEndian;\r\n    if (BOM === 0x4949) {\r\n      littleEndian = true;\r\n    } else if (BOM === 0x4D4D) {\r\n      littleEndian = false;\r\n    } else {\r\n      throw new TypeError('Invalid byte order value.');\r\n    }\r\n\r\n    const magicNumber = dataView.getUint16(2, littleEndian);\r\n    let bigTiff;\r\n    if (magicNumber === 42) {\r\n      bigTiff = false;\r\n    } else if (magicNumber === 43) {\r\n      bigTiff = true;\r\n      const offsetByteSize = dataView.getUint16(4, littleEndian);\r\n      if (offsetByteSize !== 8) {\r\n        throw new Error('Unsupported offset byte-size.');\r\n      }\r\n    } else {\r\n      throw new TypeError('Invalid magic number.');\r\n    }\r\n\r\n    const firstIFDOffset = bigTiff\r\n      ? dataView.getUint64(8, littleEndian)\r\n      : dataView.getUint32(4, littleEndian);\r\n    return new GeoTIFF(source, littleEndian, bigTiff, firstIFDOffset, options);\r\n  }\r\n\r\n  /**\r\n   * Closes the underlying file buffer\r\n   * N.B. After the GeoTIFF has been completely processed it needs\r\n   * to be closed but only if it has been constructed from a file.\r\n   */\r\n  close() {\r\n    if (typeof this.source.close === 'function') {\r\n      return this.source.close();\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport { GeoTIFF };\r\nexport default GeoTIFF;\r\n\r\n/**\r\n * Wrapper for GeoTIFF files that have external overviews.\r\n * @augments GeoTIFFBase\r\n */\r\nclass MultiGeoTIFF extends GeoTIFFBase {\r\n  /**\r\n   * Construct a new MultiGeoTIFF from a main and several overview files.\r\n   * @param {GeoTIFF} mainFile The main GeoTIFF file.\r\n   * @param {GeoTIFF[]} overviewFiles An array of overview files.\r\n   */\r\n  constructor(mainFile, overviewFiles) {\r\n    super();\r\n    this.mainFile = mainFile;\r\n    this.overviewFiles = overviewFiles;\r\n    this.imageFiles = [mainFile].concat(overviewFiles);\r\n\r\n    this.fileDirectoriesPerFile = null;\r\n    this.fileDirectoriesPerFileParsing = null;\r\n    this.imageCount = null;\r\n  }\r\n\r\n  async parseFileDirectoriesPerFile() {\r\n    const requests = [this.mainFile.parseFileDirectoryAt(this.mainFile.firstIFDOffset)]\r\n      .concat(this.overviewFiles.map((file) => file.parseFileDirectoryAt(file.firstIFDOffset)));\r\n\r\n    this.fileDirectoriesPerFile = await Promise.all(requests);\r\n    return this.fileDirectoriesPerFile;\r\n  }\r\n\r\n  /**\r\n   * Get the n-th internal subfile of an image. By default, the first is returned.\r\n   *\r\n   * @param {number} [index=0] the index of the image to return.\r\n   * @returns {Promise<GeoTIFFImage>} the image at the given index\r\n   */\r\n  async getImage(index = 0) {\r\n    await this.getImageCount();\r\n    await this.parseFileDirectoriesPerFile();\r\n    let visited = 0;\r\n    let relativeIndex = 0;\r\n    for (let i = 0; i < this.imageFiles.length; i++) {\r\n      const imageFile = this.imageFiles[i];\r\n      for (let ii = 0; ii < this.imageCounts[i]; ii++) {\r\n        if (index === visited) {\r\n          const ifd = await imageFile.requestIFD(relativeIndex);\r\n          return new GeoTIFFImage(\r\n            ifd.fileDirectory, ifd.geoKeyDirectory,\r\n            imageFile.dataView, imageFile.littleEndian, imageFile.cache, imageFile.source,\r\n          );\r\n        }\r\n        visited++;\r\n        relativeIndex++;\r\n      }\r\n      relativeIndex = 0;\r\n    }\r\n\r\n    throw new RangeError('Invalid image index');\r\n  }\r\n\r\n  /**\r\n   * Returns the count of the internal subfiles.\r\n   *\r\n   * @returns {Promise<number>} the number of internal subfile images\r\n   */\r\n  async getImageCount() {\r\n    if (this.imageCount !== null) {\r\n      return this.imageCount;\r\n    }\r\n    const requests = [this.mainFile.getImageCount()]\r\n      .concat(this.overviewFiles.map((file) => file.getImageCount()));\r\n    this.imageCounts = await Promise.all(requests);\r\n    this.imageCount = this.imageCounts.reduce((count, ifds) => count + ifds, 0);\r\n    return this.imageCount;\r\n  }\r\n}\r\n\r\nexport { MultiGeoTIFF };\r\n\r\n/**\r\n * Creates a new GeoTIFF from a remote URL.\r\n * @param {string} url The URL to access the image from\r\n * @param {object} [options] Additional options to pass to the source.\r\n *                           See {@link makeRemoteSource} for details.\r\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                               to be aborted\r\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\r\n */\r\nexport async function fromUrl(url, options = {}, signal) {\r\n  return GeoTIFF.fromSource(makeRemoteSource(url, options), signal);\r\n}\r\n\r\n/**\r\n * Construct a new GeoTIFF from an\r\n * [ArrayBuffer]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer}.\r\n * @param {ArrayBuffer} arrayBuffer The data to read the file from.\r\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                               to be aborted\r\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\r\n */\r\nexport async function fromArrayBuffer(arrayBuffer, signal) {\r\n  return GeoTIFF.fromSource(makeBufferSource(arrayBuffer), signal);\r\n}\r\n\r\n/**\r\n * Construct a GeoTIFF from a local file path. This uses the node\r\n * [filesystem API]{@link https://nodejs.org/api/fs.html} and is\r\n * not available on browsers.\r\n *\r\n * N.B. After the GeoTIFF has been completely processed it needs\r\n * to be closed but only if it has been constructed from a file.\r\n * @param {string} path The file path to read from.\r\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                               to be aborted\r\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\r\n */\r\nexport async function fromFile(path, signal) {\r\n  return GeoTIFF.fromSource(makeFileSource(path), signal);\r\n}\r\n\r\n/**\r\n * Construct a GeoTIFF from an HTML\r\n * [Blob]{@link https://developer.mozilla.org/en-US/docs/Web/API/Blob} or\r\n * [File]{@link https://developer.mozilla.org/en-US/docs/Web/API/File}\r\n * object.\r\n * @param {Blob|File} blob The Blob or File object to read from.\r\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                               to be aborted\r\n * @returns {Promise<GeoTIFF>} The resulting GeoTIFF file.\r\n */\r\nexport async function fromBlob(blob, signal) {\r\n  return GeoTIFF.fromSource(makeFileReaderSource(blob), signal);\r\n}\r\n\r\n/**\r\n * Construct a MultiGeoTIFF from the given URLs.\r\n * @param {string} mainUrl The URL for the main file.\r\n * @param {string[]} overviewUrls An array of URLs for the overview images.\r\n * @param {Object} [options] Additional options to pass to the source.\r\n *                           See [makeRemoteSource]{@link module:source.makeRemoteSource}\r\n *                           for details.\r\n * @param {AbortSignal} [signal] An AbortSignal that may be signalled if the request is\r\n *                               to be aborted\r\n * @returns {Promise<MultiGeoTIFF>} The resulting MultiGeoTIFF file.\r\n */\r\nexport async function fromUrls(mainUrl, overviewUrls = [], options = {}, signal) {\r\n  const mainFile = await GeoTIFF.fromSource(makeRemoteSource(mainUrl, options), signal);\r\n  const overviewFiles = await Promise.all(\r\n    overviewUrls.map((url) => GeoTIFF.fromSource(makeRemoteSource(url, options))),\r\n  );\r\n\r\n  return new MultiGeoTIFF(mainFile, overviewFiles);\r\n}\r\n\r\n/**\r\n * Main creating function for GeoTIFF files.\r\n * @param {(Array)} array of pixel values\r\n * @returns {metadata} metadata\r\n */\r\nexport function writeArrayBuffer(values, metadata) {\r\n  return writeGeotiff(values, metadata);\r\n}\r\n\r\nexport { Pool };\r\nexport { GeoTIFFImage };\r\n", "/**\r\n * @module ol/source/GeoTIFF\r\n */\r\nimport DataTile from './DataTile.js';\r\nimport TileGrid from '../tilegrid/TileGrid.js';\r\nimport {\r\n  Pool,\r\n  globals as geotiffGlobals,\r\n  fromBlob as tiffFromBlob,\r\n  fromUrl as tiffFromUrl,\r\n  fromUrls as tiffFromUrls,\r\n} from 'geotiff';\r\nimport {\r\n  Projection,\r\n  get as getCachedProjection,\r\n  toUserCoordinate,\r\n  toUserExtent,\r\n} from '../proj.js';\r\nimport {clamp} from '../math.js';\r\nimport {getCenter, getIntersection} from '../extent.js';\r\nimport {error as logError} from '../console.js';\r\nimport {fromCode as unitsFromCode} from '../proj/Units.js';\r\n\r\n/**\r\n * Determine if an image type is a mask.\r\n * See https://www.awaresystems.be/imaging/tiff/tifftags/newsubfiletype.html\r\n * @param {GeoTIFFImage} image The image.\r\n * @return {boolean} The image is a mask.\r\n */\r\nfunction isMask(image) {\r\n  const fileDirectory = image.fileDirectory;\r\n  const type = fileDirectory.NewSubfileType || 0;\r\n  return (type & 4) === 4;\r\n}\r\n\r\n/**\r\n * @param {true|false|'auto'} preference The convertToRGB option.\r\n * @param {GeoTIFFImage} image The image.\r\n * @return {boolean} Use the `image.readRGB()` method.\r\n */\r\nfunction readRGB(preference, image) {\r\n  if (!preference) {\r\n    return false;\r\n  }\r\n  if (preference === true) {\r\n    return true;\r\n  }\r\n  if (image.getSamplesPerPixel() !== 3) {\r\n    return false;\r\n  }\r\n  const interpretation = image.fileDirectory.PhotometricInterpretation;\r\n  const interpretations = geotiffGlobals.photometricInterpretations;\r\n  return (\r\n    interpretation === interpretations.CMYK ||\r\n    interpretation === interpretations.YCbCr ||\r\n    interpretation === interpretations.CIELab ||\r\n    interpretation === interpretations.ICCLab\r\n  );\r\n}\r\n\r\n/**\r\n * @typedef {Object} SourceInfo\r\n * @property {string} [url] URL for the source GeoTIFF.\r\n * @property {Array<string>} [overviews] List of any overview URLs, only applies if the url parameter is given.\r\n * @property {Blob} [blob] Blob containing the source GeoTIFF. `blob` and `url` are mutually exclusive.\r\n * @property {number} [min=0] The minimum source data value.  Rendered values are scaled from 0 to 1 based on\r\n * the configured min and max.  If not provided and raster statistics are available, those will be used instead.\r\n * If neither are available, the minimum for the data type will be used.  To disable this behavior, set\r\n * the `normalize` option to `false` in the constructor.\r\n * @property {number} [max] The maximum source data value.  Rendered values are scaled from 0 to 1 based on\r\n * the configured min and max.  If not provided and raster statistics are available, those will be used instead.\r\n * If neither are available, the maximum for the data type will be used.  To disable this behavior, set\r\n * the `normalize` option to `false` in the constructor.\r\n * @property {number} [nodata] Values to discard (overriding any nodata values in the metadata).\r\n * When provided, an additional alpha band will be added to the data.  Often the GeoTIFF metadata\r\n * will include information about nodata values, so you should only need to set this property if\r\n * you find that it is not already extracted from the metadata.\r\n * @property {Array<number>} [bands] Band numbers to be read from (where the first band is `1`). If not provided, all bands will\r\n * be read. For example, if a GeoTIFF has blue (1), green (2), red (3), and near-infrared (4) bands, and you only need the\r\n * near-infrared band, configure `bands: [4]`.\r\n */\r\n\r\n/**\r\n * @typedef {Object} GeoKeys\r\n * @property {number} GTModelTypeGeoKey Model type.\r\n * @property {number} GTRasterTypeGeoKey Raster type.\r\n * @property {number} GeogAngularUnitsGeoKey Angular units.\r\n * @property {number} GeogInvFlatteningGeoKey Inverse flattening.\r\n * @property {number} GeogSemiMajorAxisGeoKey Semi-major axis.\r\n * @property {number} GeographicTypeGeoKey Geographic coordinate system code.\r\n * @property {number} ProjLinearUnitsGeoKey Projected linear unit code.\r\n * @property {number} ProjectedCSTypeGeoKey Projected coordinate system code.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"geotiff\").GeoTIFF} GeoTIFF\r\n */\r\n\r\n/**\r\n * @typedef {import(\"geotiff\").MultiGeoTIFF} MultiGeoTIFF\r\n */\r\n\r\n/**\r\n * @typedef {Object} GDALMetadata\r\n * @property {string} STATISTICS_MINIMUM The minimum value (as a string).\r\n * @property {string} STATISTICS_MAXIMUM The maximum value (as a string).\r\n */\r\n\r\nconst STATISTICS_MAXIMUM = 'STATISTICS_MAXIMUM';\r\nconst STATISTICS_MINIMUM = 'STATISTICS_MINIMUM';\r\n\r\nconst defaultTileSize = 256;\r\n\r\n/**\r\n * @typedef {import(\"geotiff\").GeoTIFFImage} GeoTIFFImage\r\n */\r\n\r\nlet workerPool;\r\nfunction getWorkerPool() {\r\n  if (!workerPool) {\r\n    workerPool = new Pool();\r\n  }\r\n  return workerPool;\r\n}\r\n\r\n/**\r\n * Get the bounding box of an image.  If the image does not have an affine transform,\r\n * the pixel bounds are returned.\r\n * @param {GeoTIFFImage} image The image.\r\n * @return {Array<number>} The image bounding box.\r\n */\r\nfunction getBoundingBox(image) {\r\n  try {\r\n    return image.getBoundingBox();\r\n  } catch (_) {\r\n    return [0, 0, image.getWidth(), image.getHeight()];\r\n  }\r\n}\r\n\r\n/**\r\n * Get the origin of an image.  If the image does not have an affine transform,\r\n * the top-left corner of the pixel bounds is returned.\r\n * @param {GeoTIFFImage} image The image.\r\n * @return {Array<number>} The image origin.\r\n */\r\nfunction getOrigin(image) {\r\n  try {\r\n    return image.getOrigin().slice(0, 2);\r\n  } catch (_) {\r\n    return [0, image.getHeight()];\r\n  }\r\n}\r\n\r\n/**\r\n * Get the resolution of an image.  If the image does not have an affine transform,\r\n * the width of the image is compared with the reference image.\r\n * @param {GeoTIFFImage} image The image.\r\n * @param {GeoTIFFImage} referenceImage The reference image.\r\n * @return {Array<number>} The map x and y units per pixel.\r\n */\r\nfunction getResolutions(image, referenceImage) {\r\n  try {\r\n    return image.getResolution(referenceImage);\r\n  } catch (_) {\r\n    return [\r\n      referenceImage.getWidth() / image.getWidth(),\r\n      referenceImage.getHeight() / image.getHeight(),\r\n    ];\r\n  }\r\n}\r\n\r\n/**\r\n * @param {GeoTIFFImage} image A GeoTIFF.\r\n * @return {import(\"../proj/Projection.js\").default} The image projection.\r\n */\r\nfunction getProjection(image) {\r\n  const geoKeys = image.geoKeys;\r\n  if (!geoKeys) {\r\n    return null;\r\n  }\r\n\r\n  if (\r\n    geoKeys.ProjectedCSTypeGeoKey &&\r\n    geoKeys.ProjectedCSTypeGeoKey !== 32767\r\n  ) {\r\n    const code = 'EPSG:' + geoKeys.ProjectedCSTypeGeoKey;\r\n    let projection = getCachedProjection(code);\r\n    if (!projection) {\r\n      const units = unitsFromCode(geoKeys.ProjLinearUnitsGeoKey);\r\n      if (units) {\r\n        projection = new Projection({\r\n          code: code,\r\n          units: units,\r\n        });\r\n      }\r\n    }\r\n    return projection;\r\n  }\r\n\r\n  if (geoKeys.GeographicTypeGeoKey && geoKeys.GeographicTypeGeoKey !== 32767) {\r\n    const code = 'EPSG:' + geoKeys.GeographicTypeGeoKey;\r\n    let projection = getCachedProjection(code);\r\n    if (!projection) {\r\n      const units = unitsFromCode(geoKeys.GeogAngularUnitsGeoKey);\r\n      if (units) {\r\n        projection = new Projection({\r\n          code: code,\r\n          units: units,\r\n        });\r\n      }\r\n    }\r\n    return projection;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * @param {GeoTIFF|MultiGeoTIFF} tiff A GeoTIFF.\r\n * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.\r\n */\r\nfunction getImagesForTIFF(tiff) {\r\n  return tiff.getImageCount().then(function (count) {\r\n    const requests = new Array(count);\r\n    for (let i = 0; i < count; ++i) {\r\n      requests[i] = tiff.getImage(i);\r\n    }\r\n    return Promise.all(requests);\r\n  });\r\n}\r\n\r\n/**\r\n * @param {SourceInfo} source The GeoTIFF source.\r\n * @param {Object} options Options for the GeoTIFF source.\r\n * @return {Promise<Array<GeoTIFFImage>>} Resolves to a list of images.\r\n */\r\nfunction getImagesForSource(source, options) {\r\n  let request;\r\n  if (source.blob) {\r\n    request = tiffFromBlob(source.blob);\r\n  } else if (source.overviews) {\r\n    request = tiffFromUrls(source.url, source.overviews, options);\r\n  } else {\r\n    request = tiffFromUrl(source.url, options);\r\n  }\r\n  return request.then(getImagesForTIFF);\r\n}\r\n\r\n/**\r\n * @param {number|Array<number>|Array<Array<number>>} expected Expected value.\r\n * @param {number|Array<number>|Array<Array<number>>} got Actual value.\r\n * @param {number} tolerance Accepted tolerance in fraction of expected between expected and got.\r\n * @param {string} message The error message.\r\n * @param {function(Error):void} rejector A function to be called with any error.\r\n */\r\nfunction assertEqual(expected, got, tolerance, message, rejector) {\r\n  if (Array.isArray(expected)) {\r\n    const length = expected.length;\r\n    if (!Array.isArray(got) || length != got.length) {\r\n      const error = new Error(message);\r\n      rejector(error);\r\n      throw error;\r\n    }\r\n    for (let i = 0; i < length; ++i) {\r\n      assertEqual(expected[i], got[i], tolerance, message, rejector);\r\n    }\r\n    return;\r\n  }\r\n\r\n  got = /** @type {number} */ (got);\r\n  if (Math.abs(expected - got) > tolerance * expected) {\r\n    throw new Error(message);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Array} array The data array.\r\n * @return {number} The minimum value.\r\n */\r\nfunction getMinForDataType(array) {\r\n  if (array instanceof Int8Array) {\r\n    return -128;\r\n  }\r\n  if (array instanceof Int16Array) {\r\n    return -32768;\r\n  }\r\n  if (array instanceof Int32Array) {\r\n    return -2147483648;\r\n  }\r\n  if (array instanceof Float32Array) {\r\n    return 1.2e-38;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/**\r\n * @param {Array} array The data array.\r\n * @return {number} The maximum value.\r\n */\r\nfunction getMaxForDataType(array) {\r\n  if (array instanceof Int8Array) {\r\n    return 127;\r\n  }\r\n  if (array instanceof Uint8Array) {\r\n    return 255;\r\n  }\r\n  if (array instanceof Uint8ClampedArray) {\r\n    return 255;\r\n  }\r\n  if (array instanceof Int16Array) {\r\n    return 32767;\r\n  }\r\n  if (array instanceof Uint16Array) {\r\n    return 65535;\r\n  }\r\n  if (array instanceof Int32Array) {\r\n    return 2147483647;\r\n  }\r\n  if (array instanceof Uint32Array) {\r\n    return 4294967295;\r\n  }\r\n  if (array instanceof Float32Array) {\r\n    return 3.4e38;\r\n  }\r\n  return 255;\r\n}\r\n\r\n/**\r\n * @typedef {Object} GeoTIFFSourceOptions\r\n * @property {boolean} [forceXHR=false] Whether to force the usage of the browsers XMLHttpRequest API.\r\n * @property {Object<string, string>} [headers] additional key-value pairs of headers to be passed with each request. Key is the header name, value the header value.\r\n * @property {string} [credentials] How credentials shall be handled. See\r\n * https://developer.mozilla.org/en-US/docs/Web/API/fetch for reference and possible values\r\n * @property {number} [maxRanges] The maximum amount of ranges to request in a single multi-range request.\r\n * By default only a single range is used.\r\n * @property {boolean} [allowFullFile=false] Whether or not a full file is accepted when only a portion is\r\n * requested. Only use this when you know the source image to be small enough to fit in memory.\r\n * @property {number} [blockSize=65536] The block size to use.\r\n * @property {number} [cacheSize=100] The number of blocks that shall be held in a LRU cache.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<SourceInfo>} sources List of information about GeoTIFF sources.\r\n * Multiple sources can be combined when their resolution sets are equal after applying a scale.\r\n * The list of sources defines a mapping between input bands as they are read from each GeoTIFF and\r\n * the output bands that are provided by data tiles. To control which bands to read from each GeoTIFF,\r\n * use the {@link import(\"./GeoTIFF.js\").SourceInfo bands} property. If, for example, you specify two\r\n * sources, one with 3 bands and {@link import(\"./GeoTIFF.js\").SourceInfo nodata} configured, and\r\n * another with 1 band, the resulting data tiles will have 5 bands: 3 from the first source, 1 alpha\r\n * band from the first source, and 1 band from the second source.\r\n * @property {GeoTIFFSourceOptions} [sourceOptions] Additional options to be passed to [geotiff.js](https://geotiffjs.github.io/geotiff.js/module-geotiff.html)'s `fromUrl` or `fromUrls` methods.\r\n * @property {true|false|'auto'} [convertToRGB=false] By default, bands from the sources are read as-is. When\r\n * reading GeoTIFFs with the purpose of displaying them as RGB images, setting this to `true` will\r\n * convert other color spaces (YCbCr, CMYK) to RGB.  Setting the option to `'auto'` will make it so CMYK, YCbCr,\r\n * CIELab, and ICCLab images will automatically be converted to RGB.\r\n * @property {boolean} [normalize=true] By default, the source data is normalized to values between\r\n * 0 and 1 with scaling factors based on the raster statistics or `min` and `max` properties of each source.\r\n * If instead you want to work with the raw values in a style expression, set this to `false`.  Setting this option\r\n * to `false` will make it so any `min` and `max` properties on sources are ignored.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {boolean} [wrapX=false] Render tiles beyond the tile grid extent.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * the linear interpolation is used to resample the data.  If false, nearest neighbor is used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A source for working with GeoTIFF data.\r\n * **Note for users of the full build**: The `GeoTIFF` source requires the\r\n * [geotiff.js](https://github.com/geotiffjs/geotiff.js) library to be loaded as well.\r\n *\r\n * @api\r\n */\r\nclass GeoTIFFSource extends DataTile {\r\n  /**\r\n   * @param {Options} options Data tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      state: 'loading',\r\n      tileGrid: null,\r\n      projection: null,\r\n      opaque: options.opaque,\r\n      transition: options.transition,\r\n      interpolate: options.interpolate !== false,\r\n      wrapX: options.wrapX,\r\n    });\r\n\r\n    /**\r\n     * @type {Array<SourceInfo>}\r\n     * @private\r\n     */\r\n    this.sourceInfo_ = options.sources;\r\n\r\n    const numSources = this.sourceInfo_.length;\r\n\r\n    /**\r\n     * @type {Object}\r\n     * @private\r\n     */\r\n    this.sourceOptions_ = options.sourceOptions;\r\n\r\n    /**\r\n     * @type {Array<Array<GeoTIFFImage>>}\r\n     * @private\r\n     */\r\n    this.sourceImagery_ = new Array(numSources);\r\n\r\n    /**\r\n     * @type {Array<Array<GeoTIFFImage>>}\r\n     * @private\r\n     */\r\n    this.sourceMasks_ = new Array(numSources);\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.resolutionFactors_ = new Array(numSources);\r\n\r\n    /**\r\n     * @type {Array<number>}\r\n     * @private\r\n     */\r\n    this.samplesPerPixel_;\r\n\r\n    /**\r\n     * @type {Array<Array<number>>}\r\n     * @private\r\n     */\r\n    this.nodataValues_;\r\n\r\n    /**\r\n     * @type {Array<Array<GDALMetadata>>}\r\n     * @private\r\n     */\r\n    this.metadata_;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.normalize_ = options.normalize !== false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.addAlpha_ = false;\r\n\r\n    /**\r\n     * @type {Error}\r\n     * @private\r\n     */\r\n    this.error_ = null;\r\n\r\n    /**\r\n     * @type {true|false|'auto'}\r\n     */\r\n    this.convertToRGB_ = options.convertToRGB || false;\r\n\r\n    this.setKey(this.sourceInfo_.map((source) => source.url).join(','));\r\n\r\n    const self = this;\r\n    const requests = new Array(numSources);\r\n    for (let i = 0; i < numSources; ++i) {\r\n      requests[i] = getImagesForSource(\r\n        this.sourceInfo_[i],\r\n        this.sourceOptions_\r\n      );\r\n    }\r\n    Promise.all(requests)\r\n      .then(function (sources) {\r\n        self.configure_(sources);\r\n      })\r\n      .catch(function (error) {\r\n        logError(error);\r\n        self.error_ = error;\r\n        self.setState('error');\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @return {Error} A source loading error. When the source state is `error`, use this function\r\n   * to get more information about the error. To debug a faulty configuration, you may want to use\r\n   * a listener like\r\n   * ```js\r\n   * geotiffSource.on('change', () => {\r\n   *   if (geotiffSource.getState() === 'error') {\r\n   *     console.error(geotiffSource.getError());\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\r\n  getError() {\r\n    return this.error_;\r\n  }\r\n\r\n  /**\r\n   * Determine the projection of the images in this GeoTIFF.\r\n   * The default implementation looks at the ProjectedCSTypeGeoKey and the GeographicTypeGeoKey\r\n   * of each image in turn.\r\n   * You can override this method in a subclass to support more projections.\r\n   *\r\n   * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images\r\n   * from a single GeoTIFF.\r\n   */\r\n  determineProjection(sources) {\r\n    const firstSource = sources[0];\r\n    for (let i = firstSource.length - 1; i >= 0; --i) {\r\n      const image = firstSource[i];\r\n      const projection = getProjection(image);\r\n      if (projection) {\r\n        this.projection = projection;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configure the tile grid based on images within the source GeoTIFFs.  Each GeoTIFF\r\n   * must have the same internal tiled structure.\r\n   * @param {Array<Array<GeoTIFFImage>>} sources Each source is a list of images\r\n   * from a single GeoTIFF.\r\n   * @private\r\n   */\r\n  configure_(sources) {\r\n    let extent;\r\n    let origin;\r\n    let commonRenderTileSizes;\r\n    let commonSourceTileSizes;\r\n    let resolutions;\r\n    const samplesPerPixel = new Array(sources.length);\r\n    const nodataValues = new Array(sources.length);\r\n    const metadata = new Array(sources.length);\r\n    let minZoom = 0;\r\n\r\n    const sourceCount = sources.length;\r\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\r\n      const images = [];\r\n      const masks = [];\r\n      sources[sourceIndex].forEach((item) => {\r\n        if (isMask(item)) {\r\n          masks.push(item);\r\n        } else {\r\n          images.push(item);\r\n        }\r\n      });\r\n\r\n      const imageCount = images.length;\r\n      if (masks.length > 0 && masks.length !== imageCount) {\r\n        throw new Error(\r\n          `Expected one mask per image found ${masks.length} masks and ${imageCount} images`\r\n        );\r\n      }\r\n\r\n      let sourceExtent;\r\n      let sourceOrigin;\r\n      const sourceTileSizes = new Array(imageCount);\r\n      const renderTileSizes = new Array(imageCount);\r\n      const sourceResolutions = new Array(imageCount);\r\n\r\n      nodataValues[sourceIndex] = new Array(imageCount);\r\n      metadata[sourceIndex] = new Array(imageCount);\r\n\r\n      for (let imageIndex = 0; imageIndex < imageCount; ++imageIndex) {\r\n        const image = images[imageIndex];\r\n        const nodataValue = image.getGDALNoData();\r\n        metadata[sourceIndex][imageIndex] = image.getGDALMetadata(0);\r\n        nodataValues[sourceIndex][imageIndex] = nodataValue;\r\n\r\n        const wantedSamples = this.sourceInfo_[sourceIndex].bands;\r\n        samplesPerPixel[sourceIndex] = wantedSamples\r\n          ? wantedSamples.length\r\n          : image.getSamplesPerPixel();\r\n        const level = imageCount - (imageIndex + 1);\r\n\r\n        if (!sourceExtent) {\r\n          sourceExtent = getBoundingBox(image);\r\n        }\r\n\r\n        if (!sourceOrigin) {\r\n          sourceOrigin = getOrigin(image);\r\n        }\r\n\r\n        const imageResolutions = getResolutions(image, images[0]);\r\n        sourceResolutions[level] = imageResolutions[0];\r\n\r\n        const sourceTileSize = [image.getTileWidth(), image.getTileHeight()];\r\n\r\n        // request larger blocks for untiled layouts\r\n        if (\r\n          sourceTileSize[0] !== sourceTileSize[1] &&\r\n          sourceTileSize[1] < defaultTileSize\r\n        ) {\r\n          sourceTileSize[0] = defaultTileSize;\r\n          sourceTileSize[1] = defaultTileSize;\r\n        }\r\n\r\n        sourceTileSizes[level] = sourceTileSize;\r\n\r\n        const aspectRatio = imageResolutions[0] / Math.abs(imageResolutions[1]);\r\n        renderTileSizes[level] = [\r\n          sourceTileSize[0],\r\n          sourceTileSize[1] / aspectRatio,\r\n        ];\r\n      }\r\n\r\n      if (!extent) {\r\n        extent = sourceExtent;\r\n      } else {\r\n        getIntersection(extent, sourceExtent, extent);\r\n      }\r\n\r\n      if (!origin) {\r\n        origin = sourceOrigin;\r\n      } else {\r\n        const message = `Origin mismatch for source ${sourceIndex}, got [${sourceOrigin}] but expected [${origin}]`;\r\n        assertEqual(origin, sourceOrigin, 0, message, this.viewRejector);\r\n      }\r\n\r\n      if (!resolutions) {\r\n        resolutions = sourceResolutions;\r\n        this.resolutionFactors_[sourceIndex] = 1;\r\n      } else {\r\n        if (resolutions.length - minZoom > sourceResolutions.length) {\r\n          minZoom = resolutions.length - sourceResolutions.length;\r\n        }\r\n        const resolutionFactor =\r\n          resolutions[resolutions.length - 1] /\r\n          sourceResolutions[sourceResolutions.length - 1];\r\n        this.resolutionFactors_[sourceIndex] = resolutionFactor;\r\n        const scaledSourceResolutions = sourceResolutions.map(\r\n          (resolution) => (resolution *= resolutionFactor)\r\n        );\r\n        const message = `Resolution mismatch for source ${sourceIndex}, got [${scaledSourceResolutions}] but expected [${resolutions}]`;\r\n        assertEqual(\r\n          resolutions.slice(minZoom, resolutions.length),\r\n          scaledSourceResolutions,\r\n          0.02,\r\n          message,\r\n          this.viewRejector\r\n        );\r\n      }\r\n\r\n      if (!commonRenderTileSizes) {\r\n        commonRenderTileSizes = renderTileSizes;\r\n      } else {\r\n        assertEqual(\r\n          commonRenderTileSizes.slice(minZoom, commonRenderTileSizes.length),\r\n          renderTileSizes,\r\n          0.01,\r\n          `Tile size mismatch for source ${sourceIndex}`,\r\n          this.viewRejector\r\n        );\r\n      }\r\n\r\n      if (!commonSourceTileSizes) {\r\n        commonSourceTileSizes = sourceTileSizes;\r\n      } else {\r\n        assertEqual(\r\n          commonSourceTileSizes.slice(minZoom, commonSourceTileSizes.length),\r\n          sourceTileSizes,\r\n          0,\r\n          `Tile size mismatch for source ${sourceIndex}`,\r\n          this.viewRejector\r\n        );\r\n      }\r\n\r\n      this.sourceImagery_[sourceIndex] = images.reverse();\r\n      this.sourceMasks_[sourceIndex] = masks.reverse();\r\n    }\r\n\r\n    for (let i = 0, ii = this.sourceImagery_.length; i < ii; ++i) {\r\n      const sourceImagery = this.sourceImagery_[i];\r\n      while (sourceImagery.length < resolutions.length) {\r\n        sourceImagery.unshift(undefined);\r\n      }\r\n    }\r\n\r\n    if (!this.getProjection()) {\r\n      this.determineProjection(sources);\r\n    }\r\n\r\n    this.samplesPerPixel_ = samplesPerPixel;\r\n    this.nodataValues_ = nodataValues;\r\n    this.metadata_ = metadata;\r\n\r\n    // decide if we need to add an alpha band to handle nodata\r\n    outer: for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\r\n      // option 1: source is configured with a nodata value\r\n      if (this.sourceInfo_[sourceIndex].nodata !== undefined) {\r\n        this.addAlpha_ = true;\r\n        break;\r\n      }\r\n      if (this.sourceMasks_[sourceIndex].length) {\r\n        this.addAlpha_ = true;\r\n        break;\r\n      }\r\n\r\n      const values = nodataValues[sourceIndex];\r\n\r\n      // option 2: check image metadata for limited bands\r\n      const bands = this.sourceInfo_[sourceIndex].bands;\r\n      if (bands) {\r\n        for (let i = 0; i < bands.length; ++i) {\r\n          if (values[bands[i] - 1] !== null) {\r\n            this.addAlpha_ = true;\r\n            break outer;\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // option 3: check image metadata for all bands\r\n      for (let imageIndex = 0; imageIndex < values.length; ++imageIndex) {\r\n        if (values[imageIndex] !== null) {\r\n          this.addAlpha_ = true;\r\n          break outer;\r\n        }\r\n      }\r\n    }\r\n\r\n    let bandCount = this.addAlpha_ ? 1 : 0;\r\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\r\n      bandCount += samplesPerPixel[sourceIndex];\r\n    }\r\n    this.bandCount = bandCount;\r\n\r\n    const tileGrid = new TileGrid({\r\n      extent: extent,\r\n      minZoom: minZoom,\r\n      origin: origin,\r\n      resolutions: resolutions,\r\n      tileSizes: commonRenderTileSizes,\r\n    });\r\n\r\n    this.tileGrid = tileGrid;\r\n    this.setTileSizes(commonSourceTileSizes);\r\n\r\n    this.setLoader(this.loadTile_.bind(this));\r\n    this.setState('ready');\r\n\r\n    const zoom = 1;\r\n    if (resolutions.length === 2) {\r\n      resolutions = [resolutions[0], resolutions[1], resolutions[1] / 2];\r\n    } else if (resolutions.length === 1) {\r\n      resolutions = [resolutions[0] * 2, resolutions[0], resolutions[0] / 2];\r\n    }\r\n\r\n    this.viewResolver({\r\n      showFullExtent: true,\r\n      projection: this.projection,\r\n      resolutions: resolutions,\r\n      center: toUserCoordinate(getCenter(extent), this.projection),\r\n      extent: toUserExtent(extent, this.projection),\r\n      zoom: zoom,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {number} z The z tile index.\r\n   * @param {number} x The x tile index.\r\n   * @param {number} y The y tile index.\r\n   * @return {Promise} The composed tile data.\r\n   * @private\r\n   */\r\n  loadTile_(z, x, y) {\r\n    const sourceTileSize = this.getTileSize(z);\r\n    const sourceCount = this.sourceImagery_.length;\r\n    const requests = new Array(sourceCount * 2);\r\n    const nodataValues = this.nodataValues_;\r\n    const sourceInfo = this.sourceInfo_;\r\n    const pool = getWorkerPool();\r\n    for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\r\n      const source = sourceInfo[sourceIndex];\r\n      const resolutionFactor = this.resolutionFactors_[sourceIndex];\r\n      const pixelBounds = [\r\n        Math.round(x * (sourceTileSize[0] * resolutionFactor)),\r\n        Math.round(y * (sourceTileSize[1] * resolutionFactor)),\r\n        Math.round((x + 1) * (sourceTileSize[0] * resolutionFactor)),\r\n        Math.round((y + 1) * (sourceTileSize[1] * resolutionFactor)),\r\n      ];\r\n      const image = this.sourceImagery_[sourceIndex][z];\r\n      let samples;\r\n      if (source.bands) {\r\n        samples = source.bands.map(function (bandNumber) {\r\n          return bandNumber - 1;\r\n        });\r\n      }\r\n\r\n      /** @type {number|Array<number>} */\r\n      let fillValue;\r\n      if ('nodata' in source && source.nodata !== null) {\r\n        fillValue = source.nodata;\r\n      } else {\r\n        if (!samples) {\r\n          fillValue = nodataValues[sourceIndex];\r\n        } else {\r\n          fillValue = samples.map(function (sampleIndex) {\r\n            return nodataValues[sourceIndex][sampleIndex];\r\n          });\r\n        }\r\n      }\r\n\r\n      const readOptions = {\r\n        window: pixelBounds,\r\n        width: sourceTileSize[0],\r\n        height: sourceTileSize[1],\r\n        samples: samples,\r\n        fillValue: fillValue,\r\n        pool: pool,\r\n        interleave: false,\r\n      };\r\n      if (readRGB(this.convertToRGB_, image)) {\r\n        requests[sourceIndex] = image.readRGB(readOptions);\r\n      } else {\r\n        requests[sourceIndex] = image.readRasters(readOptions);\r\n      }\r\n\r\n      // requests after `sourceCount` are for mask data (if any)\r\n      const maskIndex = sourceCount + sourceIndex;\r\n      const mask = this.sourceMasks_[sourceIndex][z];\r\n      if (!mask) {\r\n        requests[maskIndex] = Promise.resolve(null);\r\n        continue;\r\n      }\r\n\r\n      requests[maskIndex] = mask.readRasters({\r\n        window: pixelBounds,\r\n        width: sourceTileSize[0],\r\n        height: sourceTileSize[1],\r\n        samples: [0],\r\n        pool: pool,\r\n        interleave: false,\r\n      });\r\n    }\r\n\r\n    return Promise.all(requests)\r\n      .then(this.composeTile_.bind(this, sourceTileSize))\r\n      .catch(function (error) {\r\n        logError(error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../size.js\").Size} sourceTileSize The source tile size.\r\n   * @param {Array} sourceSamples The source samples.\r\n   * @return {import(\"../DataTile.js\").Data} The composed tile data.\r\n   * @private\r\n   */\r\n  composeTile_(sourceTileSize, sourceSamples) {\r\n    const metadata = this.metadata_;\r\n    const sourceInfo = this.sourceInfo_;\r\n    const sourceCount = this.sourceImagery_.length;\r\n    const bandCount = this.bandCount;\r\n    const samplesPerPixel = this.samplesPerPixel_;\r\n    const nodataValues = this.nodataValues_;\r\n    const normalize = this.normalize_;\r\n    const addAlpha = this.addAlpha_;\r\n\r\n    const pixelCount = sourceTileSize[0] * sourceTileSize[1];\r\n    const dataLength = pixelCount * bandCount;\r\n\r\n    /** @type {Uint8Array|Float32Array} */\r\n    let data;\r\n    if (normalize) {\r\n      data = new Uint8Array(dataLength);\r\n    } else {\r\n      data = new Float32Array(dataLength);\r\n    }\r\n\r\n    let dataIndex = 0;\r\n    for (let pixelIndex = 0; pixelIndex < pixelCount; ++pixelIndex) {\r\n      let transparent = addAlpha;\r\n      for (let sourceIndex = 0; sourceIndex < sourceCount; ++sourceIndex) {\r\n        const source = sourceInfo[sourceIndex];\r\n\r\n        let min = source.min;\r\n        let max = source.max;\r\n        let gain, bias;\r\n        if (normalize) {\r\n          const stats = metadata[sourceIndex][0];\r\n          if (min === undefined) {\r\n            if (stats && STATISTICS_MINIMUM in stats) {\r\n              min = parseFloat(stats[STATISTICS_MINIMUM]);\r\n            } else {\r\n              min = getMinForDataType(sourceSamples[sourceIndex][0]);\r\n            }\r\n          }\r\n          if (max === undefined) {\r\n            if (stats && STATISTICS_MAXIMUM in stats) {\r\n              max = parseFloat(stats[STATISTICS_MAXIMUM]);\r\n            } else {\r\n              max = getMaxForDataType(sourceSamples[sourceIndex][0]);\r\n            }\r\n          }\r\n\r\n          gain = 255 / (max - min);\r\n          bias = -min * gain;\r\n        }\r\n\r\n        for (\r\n          let sampleIndex = 0;\r\n          sampleIndex < samplesPerPixel[sourceIndex];\r\n          ++sampleIndex\r\n        ) {\r\n          const sourceValue =\r\n            sourceSamples[sourceIndex][sampleIndex][pixelIndex];\r\n\r\n          let value;\r\n          if (normalize) {\r\n            value = clamp(gain * sourceValue + bias, 0, 255);\r\n          } else {\r\n            value = sourceValue;\r\n          }\r\n\r\n          if (!addAlpha) {\r\n            data[dataIndex] = value;\r\n          } else {\r\n            let nodata = source.nodata;\r\n            if (nodata === undefined) {\r\n              let bandIndex;\r\n              if (source.bands) {\r\n                bandIndex = source.bands[sampleIndex] - 1;\r\n              } else {\r\n                bandIndex = sampleIndex;\r\n              }\r\n              nodata = nodataValues[sourceIndex][bandIndex];\r\n            }\r\n\r\n            const nodataIsNaN = isNaN(nodata);\r\n            if (\r\n              (!nodataIsNaN && sourceValue !== nodata) ||\r\n              (nodataIsNaN && !isNaN(sourceValue))\r\n            ) {\r\n              transparent = false;\r\n              data[dataIndex] = value;\r\n            }\r\n          }\r\n          dataIndex++;\r\n        }\r\n        if (!transparent) {\r\n          const maskIndex = sourceCount + sourceIndex;\r\n          const mask = sourceSamples[maskIndex];\r\n          if (mask && !mask[0][pixelIndex]) {\r\n            transparent = true;\r\n          }\r\n        }\r\n      }\r\n      if (addAlpha) {\r\n        if (!transparent) {\r\n          data[dataIndex] = 255;\r\n        }\r\n        dataIndex++;\r\n      }\r\n    }\r\n\r\n    return data;\r\n  }\r\n}\r\n\r\n/**\r\n * Get a promise for view properties based on the source.  Use the result of this function\r\n * as the `view` option in a map constructor.\r\n *\r\n *     const source = new GeoTIFF(options);\r\n *\r\n *     const map = new Map({\r\n *       target: 'map',\r\n *       layers: [\r\n *         new TileLayer({\r\n *           source: source,\r\n *         }),\r\n *       ],\r\n *       view: source.getView(),\r\n *     });\r\n *\r\n * @function\r\n * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n * @api\r\n *\r\n */\r\nGeoTIFFSource.prototype.getView;\r\n\r\nexport default GeoTIFFSource;\r\n", "/**\r\n * @module ol/source/Zoomify\r\n */\r\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\r\n\r\nimport ImageTile from '../ImageTile.js';\r\nimport TileGrid from '../tilegrid/TileGrid.js';\r\nimport TileImage from './TileImage.js';\r\nimport TileState from '../TileState.js';\r\nimport {assert} from '../asserts.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\r\nimport {getCenter} from '../extent.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {'default' | 'truncated'} TierSizeCalculation\r\n */\r\n\r\nexport class CustomTile extends ImageTile {\r\n  /**\r\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"../Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(\r\n    tileSize,\r\n    tileCoord,\r\n    state,\r\n    src,\r\n    crossOrigin,\r\n    tileLoadFunction,\r\n    options\r\n  ) {\r\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\r\n     */\r\n    this.zoomifyImage_ = null;\r\n\r\n    /**\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tileSize_ = tileSize;\r\n  }\r\n\r\n  /**\r\n   * Get the image element for this tile.\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   */\r\n  getImage() {\r\n    if (this.zoomifyImage_) {\r\n      return this.zoomifyImage_;\r\n    }\r\n    const image = super.getImage();\r\n    if (this.state == TileState.LOADED) {\r\n      const tileSize = this.tileSize_;\r\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\r\n        this.zoomifyImage_ = image;\r\n        return image;\r\n      }\r\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\r\n      context.drawImage(image, 0, 0);\r\n      this.zoomifyImage_ = context.canvas;\r\n      return context.canvas;\r\n    }\r\n    return image;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {string} url URL template or base URL of the Zoomify service.\r\n * A base URL is the fixed part\r\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\r\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\r\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\r\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\r\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\r\n * `{tileIndex}` and `{z}` placeholders, e.g.\r\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {TierSizeCalculation} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\r\n * @property {import(\"../size.js\").Size} size Size.\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\r\n * Default sets the TileGrid in the\r\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\r\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\r\n * as `[0, 0, width, height]`.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\r\n * Imaging Protocol are supported).\r\n * @api\r\n */\r\nclass Zoomify extends TileImage {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    const size = options.size;\r\n    const tierSizeCalculation =\r\n      options.tierSizeCalculation !== undefined\r\n        ? options.tierSizeCalculation\r\n        : 'default';\r\n\r\n    const tilePixelRatio = options.tilePixelRatio || 1;\r\n    const imageWidth = size[0];\r\n    const imageHeight = size[1];\r\n    const tierSizeInTiles = [];\r\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\r\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\r\n\r\n    switch (tierSizeCalculation) {\r\n      case 'default':\r\n        while (\r\n          imageWidth > tileSizeForTierSizeCalculation ||\r\n          imageHeight > tileSizeForTierSizeCalculation\r\n        ) {\r\n          tierSizeInTiles.push([\r\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\r\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\r\n          ]);\r\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\r\n        }\r\n        break;\r\n      case 'truncated':\r\n        let width = imageWidth;\r\n        let height = imageHeight;\r\n        while (\r\n          width > tileSizeForTierSizeCalculation ||\r\n          height > tileSizeForTierSizeCalculation\r\n        ) {\r\n          tierSizeInTiles.push([\r\n            Math.ceil(width / tileSizeForTierSizeCalculation),\r\n            Math.ceil(height / tileSizeForTierSizeCalculation),\r\n          ]);\r\n          width >>= 1;\r\n          height >>= 1;\r\n        }\r\n        break;\r\n      default: // Unknown `tierSizeCalculation` configured\r\n        assert(false, 53);\r\n        break;\r\n    }\r\n\r\n    tierSizeInTiles.push([1, 1]);\r\n    tierSizeInTiles.reverse();\r\n\r\n    const resolutions = [tilePixelRatio];\r\n    const tileCountUpToTier = [0];\r\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\r\n      resolutions.push(tilePixelRatio << i);\r\n      tileCountUpToTier.push(\r\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\r\n          tileCountUpToTier[i - 1]\r\n      );\r\n    }\r\n    resolutions.reverse();\r\n\r\n    const tileGrid = new TileGrid({\r\n      tileSize: tileSize,\r\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\r\n      resolutions: resolutions,\r\n    });\r\n\r\n    let url = options.url;\r\n    if (url && !url.includes('{TileGroup}') && !url.includes('{tileIndex}')) {\r\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\r\n    }\r\n    const urls = expandUrl(url);\r\n\r\n    let tileWidth = tileSize * tilePixelRatio;\r\n\r\n    /**\r\n     * @param {string} template Template.\r\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\r\n     */\r\n    function createFromTemplate(template) {\r\n      return (\r\n        /**\r\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n         * @param {number} pixelRatio Pixel ratio.\r\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n         * @return {string|undefined} Tile URL.\r\n         */\r\n        function (tileCoord, pixelRatio, projection) {\r\n          if (!tileCoord) {\r\n            return undefined;\r\n          }\r\n          const tileCoordZ = tileCoord[0];\r\n          const tileCoordX = tileCoord[1];\r\n          const tileCoordY = tileCoord[2];\r\n          const tileIndex =\r\n            tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\r\n          const tileGroup =\r\n            ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\r\n          const localContext = {\r\n            'z': tileCoordZ,\r\n            'x': tileCoordX,\r\n            'y': tileCoordY,\r\n            'tileIndex': tileIndex,\r\n            'TileGroup': 'TileGroup' + tileGroup,\r\n          };\r\n          return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\r\n            return localContext[p];\r\n          });\r\n        }\r\n      );\r\n    }\r\n\r\n    const tileUrlFunction = createFromTileUrlFunctions(\r\n      urls.map(createFromTemplate)\r\n    );\r\n\r\n    const ZoomifyTileClass = CustomTile.bind(\r\n      null,\r\n      toSize(tileSize * tilePixelRatio)\r\n    );\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      tilePixelRatio: tilePixelRatio,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileClass: ZoomifyTileClass,\r\n      tileGrid: tileGrid,\r\n      tileUrlFunction: tileUrlFunction,\r\n      transition: options.transition,\r\n    });\r\n\r\n    /**\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\r\n    this.zDirection = options.zDirection;\r\n\r\n    // Server retina tile detection (non-standard):\r\n    // Try loading the center tile for the highest resolution. If it is not\r\n    // available, we are dealing with retina tiles, and need to adjust the\r\n    // tile url calculation.\r\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\r\n      getCenter(tileGrid.getExtent()),\r\n      resolutions[resolutions.length - 1]\r\n    );\r\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\r\n    const image = new Image();\r\n    image.addEventListener('error', () => {\r\n      tileWidth = tileSize;\r\n      this.changed();\r\n    });\r\n    image.src = testTileUrl;\r\n  }\r\n}\r\n\r\nexport default Zoomify;\r\n", "/**\r\n * @module ol/format/IIIFInfo\r\n */\r\n\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * @typedef {Object} PreferredOptions\r\n * @property {string} [format] Preferred image format. Will be used if the image information\r\n * indicates support for that format.\r\n * @property {string} [quality] IIIF image qualitiy.  Will be used if the image information\r\n * indicates support for that quality.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SupportedFeatures\r\n * @property {Array<string>} [supports] Supported IIIF image size and region\r\n * calculation features.\r\n * @property {Array<string>} [formats] Supported image formats.\r\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TileInfo\r\n * @property {Array<number>} scaleFactors Supported resolution scaling factors.\r\n * @property {number} width Tile width in pixels.\r\n * @property {number} [height] Tile height in pixels. Same as tile width if height is\r\n * not given.\r\n */\r\n\r\n/**\r\n * @typedef {Object} IiifProfile\r\n * @property {Array<string>} [formats] Supported image formats for the image service.\r\n * @property {Array<string>} [qualities] Supported IIIF image qualities.\r\n * @property {Array<string>} [supports] Supported features.\r\n * @property {number} [maxArea] Maximum area (pixels) available for this image service.\r\n * @property {number} [maxHeight] Maximum height.\r\n * @property {number} [maxWidth] Maximum width.\r\n */\r\n\r\n/**\r\n * @typedef {Object<string,string|number|Array<number|string|IiifProfile|Object<string, number>|TileInfo>>}\r\n *    ImageInformationResponse\r\n */\r\n\r\n/**\r\n * Enum representing the major IIIF Image API versions\r\n * @enum {string}\r\n */\r\nexport const Versions = {\r\n  VERSION1: 'version1',\r\n  VERSION2: 'version2',\r\n  VERSION3: 'version3',\r\n};\r\n\r\n/**\r\n * Supported image formats, qualities and supported region / size calculation features\r\n * for different image API versions and compliance levels\r\n * @const\r\n * @type {Object<string, Object<string, SupportedFeatures>>}\r\n */\r\nconst IIIF_PROFILE_VALUES = {};\r\nIIIF_PROFILE_VALUES[Versions.VERSION1] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: [],\r\n    qualities: ['native'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\r\n    formats: ['jpg'],\r\n    qualities: ['native'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['native', 'color', 'grey', 'bitonal'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES[Versions.VERSION2] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'sizeByW', 'sizeByH', 'sizeByPct'],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByDistortedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['default', 'bitonal'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES[Versions.VERSION3] = {\r\n  'level0': {\r\n    supports: [],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level1': {\r\n    supports: ['regionByPx', 'regionSquare', 'sizeByW', 'sizeByH', 'sizeByWh'],\r\n    formats: ['jpg'],\r\n    qualities: ['default'],\r\n  },\r\n  'level2': {\r\n    supports: [\r\n      'regionByPx',\r\n      'regionSquare',\r\n      'regionByPct',\r\n      'sizeByW',\r\n      'sizeByH',\r\n      'sizeByPct',\r\n      'sizeByConfinedWh',\r\n      'sizeByWh',\r\n    ],\r\n    formats: ['jpg', 'png'],\r\n    qualities: ['default'],\r\n  },\r\n};\r\nIIIF_PROFILE_VALUES['none'] = {\r\n  'none': {\r\n    supports: [],\r\n    formats: [],\r\n    qualities: [],\r\n  },\r\n};\r\n\r\nconst COMPLIANCE_VERSION1 =\r\n  /^https?:\\/\\/library\\.stanford\\.edu\\/iiif\\/image-api\\/(?:1\\.1\\/)?compliance\\.html#level[0-2]$/;\r\nconst COMPLIANCE_VERSION2 =\r\n  /^https?:\\/\\/iiif\\.io\\/api\\/image\\/2\\/level[0-2](?:\\.json)?$/;\r\nconst COMPLIANCE_VERSION3 =\r\n  /(^https?:\\/\\/iiif\\.io\\/api\\/image\\/3\\/level[0-2](?:\\.json)?$)|(^level[0-2]$)/;\r\n\r\nfunction generateVersion1Options(iiifInfo) {\r\n  let levelProfile = iiifInfo.getComplianceLevelSupportedFeatures();\r\n  // Version 1.0 and 1.1 do not require a profile.\r\n  if (levelProfile === undefined) {\r\n    levelProfile = IIIF_PROFILE_VALUES[Versions.VERSION1]['level0'];\r\n  }\r\n  return {\r\n    url:\r\n      iiifInfo.imageInfo['@id'] === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\r\n    supports: levelProfile.supports,\r\n    formats: [\r\n      ...levelProfile.formats,\r\n      iiifInfo.imageInfo.formats === undefined\r\n        ? []\r\n        : iiifInfo.imageInfo.formats,\r\n    ],\r\n    qualities: [\r\n      ...levelProfile.qualities,\r\n      iiifInfo.imageInfo.qualities === undefined\r\n        ? []\r\n        : iiifInfo.imageInfo.qualities,\r\n    ],\r\n    resolutions: iiifInfo.imageInfo.scale_factors,\r\n    tileSize:\r\n      iiifInfo.imageInfo.tile_width !== undefined\r\n        ? iiifInfo.imageInfo.tile_height !== undefined\r\n          ? [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_height]\r\n          : [iiifInfo.imageInfo.tile_width, iiifInfo.imageInfo.tile_width]\r\n        : iiifInfo.imageInfo.tile_height != undefined\r\n        ? [iiifInfo.imageInfo.tile_height, iiifInfo.imageInfo.tile_height]\r\n        : undefined,\r\n  };\r\n}\r\n\r\nfunction generateVersion2Options(iiifInfo) {\r\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\r\n    additionalProfile =\r\n      Array.isArray(iiifInfo.imageInfo.profile) &&\r\n      iiifInfo.imageInfo.profile.length > 1,\r\n    profileSupports =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].supports\r\n        ? iiifInfo.imageInfo.profile[1].supports\r\n        : [],\r\n    profileFormats =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].formats\r\n        ? iiifInfo.imageInfo.profile[1].formats\r\n        : [],\r\n    profileQualities =\r\n      additionalProfile && iiifInfo.imageInfo.profile[1].qualities\r\n        ? iiifInfo.imageInfo.profile[1].qualities\r\n        : [];\r\n  return {\r\n    url: iiifInfo.imageInfo['@id'].replace(/\\/?(?:info\\.json)?$/g, ''),\r\n    sizes:\r\n      iiifInfo.imageInfo.sizes === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.sizes.map(function (size) {\r\n            return [size.width, size.height];\r\n          }),\r\n    tileSize:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : [\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.width;\r\n            })[0],\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.height === undefined ? tile.width : tile.height;\r\n            })[0],\r\n          ],\r\n    resolutions:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\r\n            return tile.scaleFactors;\r\n          })[0],\r\n    supports: [...levelProfile.supports, ...profileSupports],\r\n    formats: [...levelProfile.formats, ...profileFormats],\r\n    qualities: [...levelProfile.qualities, ...profileQualities],\r\n  };\r\n}\r\n\r\nfunction generateVersion3Options(iiifInfo) {\r\n  const levelProfile = iiifInfo.getComplianceLevelSupportedFeatures(),\r\n    formats =\r\n      iiifInfo.imageInfo.extraFormats === undefined\r\n        ? levelProfile.formats\r\n        : [...levelProfile.formats, ...iiifInfo.imageInfo.extraFormats],\r\n    preferredFormat =\r\n      iiifInfo.imageInfo.preferredFormats !== undefined &&\r\n      Array.isArray(iiifInfo.imageInfo.preferredFormats) &&\r\n      iiifInfo.imageInfo.preferredFormats.length > 0\r\n        ? iiifInfo.imageInfo.preferredFormats\r\n            .filter(function (format) {\r\n              return ['jpg', 'png', 'gif'].includes(format);\r\n            })\r\n            .reduce(function (acc, format) {\r\n              return acc === undefined && formats.includes(format)\r\n                ? format\r\n                : acc;\r\n            }, undefined)\r\n        : undefined;\r\n  return {\r\n    url: iiifInfo.imageInfo['id'],\r\n    sizes:\r\n      iiifInfo.imageInfo.sizes === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.sizes.map(function (size) {\r\n            return [size.width, size.height];\r\n          }),\r\n    tileSize:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : [\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.width;\r\n            })[0],\r\n            iiifInfo.imageInfo.tiles.map(function (tile) {\r\n              return tile.height;\r\n            })[0],\r\n          ],\r\n    resolutions:\r\n      iiifInfo.imageInfo.tiles === undefined\r\n        ? undefined\r\n        : iiifInfo.imageInfo.tiles.map(function (tile) {\r\n            return tile.scaleFactors;\r\n          })[0],\r\n    supports:\r\n      iiifInfo.imageInfo.extraFeatures === undefined\r\n        ? levelProfile.supports\r\n        : [...levelProfile.supports, ...iiifInfo.imageInfo.extraFeatures],\r\n    formats: formats,\r\n    qualities:\r\n      iiifInfo.imageInfo.extraQualities === undefined\r\n        ? levelProfile.qualities\r\n        : [...levelProfile.qualities, ...iiifInfo.imageInfo.extraQualities],\r\n    preferredFormat: preferredFormat,\r\n  };\r\n}\r\n\r\nconst versionFunctions = {};\r\nversionFunctions[Versions.VERSION1] = generateVersion1Options;\r\nversionFunctions[Versions.VERSION2] = generateVersion2Options;\r\nversionFunctions[Versions.VERSION3] = generateVersion3Options;\r\n\r\n/**\r\n * @classdesc\r\n * Format for transforming IIIF Image API image information responses into\r\n * IIIF tile source ready options\r\n *\r\n * @api\r\n */\r\nclass IIIFInfo {\r\n  /**\r\n   * @param {string|ImageInformationResponse} imageInfo\r\n   * Deserialized image information JSON response object or JSON response as string\r\n   */\r\n  constructor(imageInfo) {\r\n    this.setImageInfo(imageInfo);\r\n  }\r\n\r\n  /**\r\n   * @param {string|ImageInformationResponse} imageInfo\r\n   * Deserialized image information JSON response object or JSON response as string\r\n   * @api\r\n   */\r\n  setImageInfo(imageInfo) {\r\n    if (typeof imageInfo == 'string') {\r\n      this.imageInfo = JSON.parse(imageInfo);\r\n    } else {\r\n      this.imageInfo = imageInfo;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {Versions} Major IIIF version.\r\n   * @api\r\n   */\r\n  getImageApiVersion() {\r\n    if (this.imageInfo === undefined) {\r\n      return;\r\n    }\r\n    let context = this.imageInfo['@context'] || 'ol-no-context';\r\n    if (typeof context == 'string') {\r\n      context = [context];\r\n    }\r\n    for (let i = 0; i < context.length; i++) {\r\n      switch (context[i]) {\r\n        case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':\r\n        case 'http://iiif.io/api/image/1/context.json':\r\n          return Versions.VERSION1;\r\n        case 'http://iiif.io/api/image/2/context.json':\r\n          return Versions.VERSION2;\r\n        case 'http://iiif.io/api/image/3/context.json':\r\n          return Versions.VERSION3;\r\n        case 'ol-no-context':\r\n          // Image API 1.0 has no '@context'\r\n          if (\r\n            this.getComplianceLevelEntryFromProfile(Versions.VERSION1) &&\r\n            this.imageInfo.identifier\r\n          ) {\r\n            return Versions.VERSION1;\r\n          }\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n    assert(false, 61);\r\n  }\r\n\r\n  /**\r\n   * @param {Versions} version Optional IIIF image API version\r\n   * @return {string} Compliance level as it appears in the IIIF image information\r\n   * response.\r\n   */\r\n  getComplianceLevelEntryFromProfile(version) {\r\n    if (this.imageInfo === undefined || this.imageInfo.profile === undefined) {\r\n      return;\r\n    }\r\n    if (version === undefined) {\r\n      version = this.getImageApiVersion();\r\n    }\r\n    switch (version) {\r\n      case Versions.VERSION1:\r\n        if (COMPLIANCE_VERSION1.test(this.imageInfo.profile)) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        break;\r\n      case Versions.VERSION3:\r\n        if (COMPLIANCE_VERSION3.test(this.imageInfo.profile)) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        break;\r\n      case Versions.VERSION2:\r\n        if (\r\n          typeof this.imageInfo.profile === 'string' &&\r\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile)\r\n        ) {\r\n          return this.imageInfo.profile;\r\n        }\r\n        if (\r\n          Array.isArray(this.imageInfo.profile) &&\r\n          this.imageInfo.profile.length > 0 &&\r\n          typeof this.imageInfo.profile[0] === 'string' &&\r\n          COMPLIANCE_VERSION2.test(this.imageInfo.profile[0])\r\n        ) {\r\n          return this.imageInfo.profile[0];\r\n        }\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Versions} version Optional IIIF image API version\r\n   * @return {string} Compliance level, on of 'level0', 'level1' or 'level2' or undefined\r\n   */\r\n  getComplianceLevelFromProfile(version) {\r\n    const complianceLevel = this.getComplianceLevelEntryFromProfile(version);\r\n    if (complianceLevel === undefined) {\r\n      return undefined;\r\n    }\r\n    const level = complianceLevel.match(/level[0-2](?:\\.json)?$/g);\r\n    return Array.isArray(level) ? level[0].replace('.json', '') : undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {SupportedFeatures} Image formats, qualities and region / size calculation\r\n   * methods that are supported by the IIIF service.\r\n   */\r\n  getComplianceLevelSupportedFeatures() {\r\n    if (this.imageInfo === undefined) {\r\n      return;\r\n    }\r\n    const version = this.getImageApiVersion();\r\n    const level = this.getComplianceLevelFromProfile(version);\r\n    if (level === undefined) {\r\n      return IIIF_PROFILE_VALUES['none']['none'];\r\n    }\r\n    return IIIF_PROFILE_VALUES[version][level];\r\n  }\r\n\r\n  /**\r\n   * @param {PreferredOptions} [preferredOptions] Optional options for preferred format and quality.\r\n   * @return {import(\"../source/IIIF.js\").Options} IIIF tile source ready constructor options.\r\n   * @api\r\n   */\r\n  getTileSourceOptions(preferredOptions) {\r\n    const options = preferredOptions || {},\r\n      version = this.getImageApiVersion();\r\n    if (version === undefined) {\r\n      return;\r\n    }\r\n    const imageOptions =\r\n      version === undefined ? undefined : versionFunctions[version](this);\r\n    if (imageOptions === undefined) {\r\n      return;\r\n    }\r\n    return {\r\n      url: imageOptions.url,\r\n      version: version,\r\n      size: [this.imageInfo.width, this.imageInfo.height],\r\n      sizes: imageOptions.sizes,\r\n      format:\r\n        options.format !== undefined &&\r\n        imageOptions.formats.includes(options.format)\r\n          ? options.format\r\n          : imageOptions.preferredFormat !== undefined\r\n          ? imageOptions.preferredFormat\r\n          : 'jpg',\r\n      supports: imageOptions.supports,\r\n      quality:\r\n        options.quality && imageOptions.qualities.includes(options.quality)\r\n          ? options.quality\r\n          : imageOptions.qualities.includes('native')\r\n          ? 'native'\r\n          : 'default',\r\n      resolutions: Array.isArray(imageOptions.resolutions)\r\n        ? imageOptions.resolutions.sort(function (a, b) {\r\n            return b - a;\r\n          })\r\n        : undefined,\r\n      tileSize: imageOptions.tileSize,\r\n    };\r\n  }\r\n}\r\n\r\nexport default IIIFInfo;\r\n", "/**\r\n * @module ol/source/IIIF\r\n */\r\n\r\nimport TileGrid from '../tilegrid/TileGrid.js';\r\nimport TileImage from './TileImage.js';\r\nimport {CustomTile} from './Zoomify.js';\r\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\r\nimport {Versions} from '../format/IIIFInfo.js';\r\nimport {assert} from '../asserts.js';\r\nimport {getTopLeft} from '../extent.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Size of the cache.\r\n * @property {null|string} [crossOrigin] The value for the crossOrigin option of the request.\r\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]] The extent.\r\n * @property {string} [format='jpg'] Requested image format.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\r\n * for version 1, 'default' for versions 2 and 3.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\r\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\r\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\r\n * features.\r\n * @property {number} [tilePixelRatio] Tile pixel ratio.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Same tile size is used for all zoom levels. If tile size is a number,\r\n * a square tile is assumed. If the IIIF image service supports arbitrary\r\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\r\n * are supported), the default tilesize is 256.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [url] Base URL of the IIIF Image service.\r\n * This should be the same as the IIIF Image ID.\r\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\nfunction formatPercentage(percentage) {\r\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for IIIF Image API services.\r\n * @api\r\n */\r\nclass IIIF extends TileImage {\r\n  /**\r\n   * @param {Options} [options] Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\r\n   * to parse Image API service information responses into constructor options.\r\n   * @api\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {Partial<Options>}\r\n     */\r\n    const partialOptions = options || {};\r\n\r\n    let baseUrl = partialOptions.url || '';\r\n    baseUrl =\r\n      baseUrl +\r\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\r\n        ? ''\r\n        : '/');\r\n    const version = partialOptions.version || Versions.VERSION2;\r\n    const sizes = partialOptions.sizes || [];\r\n    const size = partialOptions.size;\r\n    assert(\r\n      size != undefined &&\r\n        Array.isArray(size) &&\r\n        size.length == 2 &&\r\n        !isNaN(size[0]) &&\r\n        size[0] > 0 &&\r\n        !isNaN(size[1]) &&\r\n        size[1] > 0,\r\n      60\r\n    );\r\n    const width = size[0];\r\n    const height = size[1];\r\n    const tileSize = partialOptions.tileSize;\r\n    const tilePixelRatio = partialOptions.tilePixelRatio || 1;\r\n    const format = partialOptions.format || 'jpg';\r\n    const quality =\r\n      partialOptions.quality ||\r\n      (partialOptions.version == Versions.VERSION1 ? 'native' : 'default');\r\n    let resolutions = partialOptions.resolutions || [];\r\n    const supports = partialOptions.supports || [];\r\n    const extent = partialOptions.extent || [0, -height, width, 0];\r\n\r\n    const supportsListedSizes =\r\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\r\n    const supportsListedTiles =\r\n      tileSize !== undefined &&\r\n      ((typeof tileSize === 'number' &&\r\n        Number.isInteger(tileSize) &&\r\n        tileSize > 0) ||\r\n        (Array.isArray(tileSize) && tileSize.length > 0));\r\n    const supportsArbitraryTiling =\r\n      supports != undefined &&\r\n      Array.isArray(supports) &&\r\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\r\n      (supports.includes('sizeByWh') ||\r\n        supports.includes('sizeByH') ||\r\n        supports.includes('sizeByW') ||\r\n        supports.includes('sizeByPct'));\r\n\r\n    let tileWidth, tileHeight, maxZoom;\r\n\r\n    resolutions.sort(function (a, b) {\r\n      return b - a;\r\n    });\r\n\r\n    if (supportsListedTiles || supportsArbitraryTiling) {\r\n      if (tileSize != undefined) {\r\n        if (\r\n          typeof tileSize === 'number' &&\r\n          Number.isInteger(tileSize) &&\r\n          tileSize > 0\r\n        ) {\r\n          tileWidth = tileSize;\r\n          tileHeight = tileSize;\r\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\r\n          if (\r\n            tileSize.length == 1 ||\r\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\r\n          ) {\r\n            tileWidth = tileSize[0];\r\n            tileHeight = tileSize[0];\r\n          }\r\n          if (tileSize.length == 2) {\r\n            if (\r\n              Number.isInteger(tileSize[0]) &&\r\n              Number.isInteger(tileSize[1])\r\n            ) {\r\n              tileWidth = tileSize[0];\r\n              tileHeight = tileSize[1];\r\n            } else if (\r\n              tileSize[0] == undefined &&\r\n              Number.isInteger(tileSize[1])\r\n            ) {\r\n              tileWidth = tileSize[1];\r\n              tileHeight = tileSize[1];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (tileWidth === undefined || tileHeight === undefined) {\r\n        tileWidth = DEFAULT_TILE_SIZE;\r\n        tileHeight = DEFAULT_TILE_SIZE;\r\n      }\r\n      if (resolutions.length == 0) {\r\n        maxZoom = Math.max(\r\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\r\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\r\n        );\r\n        for (let i = maxZoom; i >= 0; i--) {\r\n          resolutions.push(Math.pow(2, i));\r\n        }\r\n      } else {\r\n        const maxScaleFactor = Math.max(...resolutions);\r\n        // TODO maxScaleFactor might not be a power to 2\r\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\r\n      }\r\n    } else {\r\n      // No tile support.\r\n      tileWidth = width;\r\n      tileHeight = height;\r\n      resolutions = [];\r\n      if (supportsListedSizes) {\r\n        /*\r\n         * 'sizes' provided. Use full region in different resolutions. Every\r\n         * resolution has only one tile.\r\n         */\r\n        sizes.sort(function (a, b) {\r\n          return a[0] - b[0];\r\n        });\r\n        maxZoom = -1;\r\n        const ignoredSizesIndex = [];\r\n        for (let i = 0; i < sizes.length; i++) {\r\n          const resolution = width / sizes[i][0];\r\n          if (\r\n            resolutions.length > 0 &&\r\n            resolutions[resolutions.length - 1] == resolution\r\n          ) {\r\n            ignoredSizesIndex.push(i);\r\n            continue;\r\n          }\r\n          resolutions.push(resolution);\r\n          maxZoom++;\r\n        }\r\n        if (ignoredSizesIndex.length > 0) {\r\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\r\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\r\n          }\r\n        }\r\n      } else {\r\n        // No useful image information at all. Try pseudo tile with full image.\r\n        resolutions.push(1);\r\n        sizes.push([width, height]);\r\n        maxZoom = 0;\r\n      }\r\n    }\r\n\r\n    const tileGrid = new TileGrid({\r\n      tileSize: [tileWidth, tileHeight],\r\n      extent: extent,\r\n      origin: getTopLeft(extent),\r\n      resolutions: resolutions,\r\n    });\r\n\r\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\r\n      let regionParam, sizeParam;\r\n      const zoom = tileCoord[0];\r\n      if (zoom > maxZoom) {\r\n        return;\r\n      }\r\n      const tileX = tileCoord[1],\r\n        tileY = tileCoord[2],\r\n        scale = resolutions[zoom];\r\n      if (\r\n        tileX === undefined ||\r\n        tileY === undefined ||\r\n        scale === undefined ||\r\n        tileX < 0 ||\r\n        Math.ceil(width / scale / tileWidth) <= tileX ||\r\n        tileY < 0 ||\r\n        Math.ceil(height / scale / tileHeight) <= tileY\r\n      ) {\r\n        return;\r\n      }\r\n      if (supportsArbitraryTiling || supportsListedTiles) {\r\n        const regionX = tileX * tileWidth * scale,\r\n          regionY = tileY * tileHeight * scale;\r\n        let regionW = tileWidth * scale,\r\n          regionH = tileHeight * scale,\r\n          sizeW = tileWidth,\r\n          sizeH = tileHeight;\r\n        if (regionX + regionW > width) {\r\n          regionW = width - regionX;\r\n        }\r\n        if (regionY + regionH > height) {\r\n          regionH = height - regionY;\r\n        }\r\n        if (regionX + tileWidth * scale > width) {\r\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\r\n        }\r\n        if (regionY + tileHeight * scale > height) {\r\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\r\n        }\r\n        if (\r\n          regionX == 0 &&\r\n          regionW == width &&\r\n          regionY == 0 &&\r\n          regionH == height\r\n        ) {\r\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\r\n          regionParam = 'full';\r\n        } else if (\r\n          !supportsArbitraryTiling ||\r\n          supports.includes('regionByPx')\r\n        ) {\r\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\r\n        } else if (supports.includes('regionByPct')) {\r\n          const pctX = formatPercentage((regionX / width) * 100),\r\n            pctY = formatPercentage((regionY / height) * 100),\r\n            pctW = formatPercentage((regionW / width) * 100),\r\n            pctH = formatPercentage((regionH / height) * 100);\r\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\r\n        }\r\n        if (\r\n          version == Versions.VERSION3 &&\r\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\r\n        ) {\r\n          sizeParam = sizeW + ',' + sizeH;\r\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\r\n          sizeParam = sizeW + ',';\r\n        } else if (supports.includes('sizeByH')) {\r\n          sizeParam = ',' + sizeH;\r\n        } else if (supports.includes('sizeByWh')) {\r\n          sizeParam = sizeW + ',' + sizeH;\r\n        } else if (supports.includes('sizeByPct')) {\r\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\r\n        }\r\n      } else {\r\n        regionParam = 'full';\r\n        if (supportsListedSizes) {\r\n          const regionWidth = sizes[zoom][0],\r\n            regionHeight = sizes[zoom][1];\r\n          if (version == Versions.VERSION3) {\r\n            if (regionWidth == width && regionHeight == height) {\r\n              sizeParam = 'max';\r\n            } else {\r\n              sizeParam = regionWidth + ',' + regionHeight;\r\n            }\r\n          } else {\r\n            if (regionWidth == width) {\r\n              sizeParam = 'full';\r\n            } else {\r\n              sizeParam = regionWidth + ',';\r\n            }\r\n          }\r\n        } else {\r\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\r\n        }\r\n      }\r\n      return (\r\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\r\n      );\r\n    };\r\n\r\n    const IiifTileClass = CustomTile.bind(\r\n      null,\r\n      toSize(tileSize || 256).map(function (size) {\r\n        return size * tilePixelRatio;\r\n      })\r\n    );\r\n\r\n    super({\r\n      attributions: partialOptions.attributions,\r\n      attributionsCollapsible: partialOptions.attributionsCollapsible,\r\n      cacheSize: partialOptions.cacheSize,\r\n      crossOrigin: partialOptions.crossOrigin,\r\n      interpolate: partialOptions.interpolate,\r\n      projection: partialOptions.projection,\r\n      reprojectionErrorThreshold: partialOptions.reprojectionErrorThreshold,\r\n      state: partialOptions.state,\r\n      tileClass: IiifTileClass,\r\n      tileGrid: tileGrid,\r\n      tilePixelRatio: partialOptions.tilePixelRatio,\r\n      tileUrlFunction: tileUrlFunction,\r\n      transition: partialOptions.transition,\r\n    });\r\n\r\n    /**\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\r\n    this.zDirection = partialOptions.zDirection;\r\n  }\r\n}\r\n\r\nexport default IIIF;\r\n", "/**\r\n * @module ol/uri\r\n */\r\n\r\n/**\r\n * Appends query parameters to a URI.\r\n *\r\n * @param {string} uri The original URI, which may already have query data.\r\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\r\n *     and the values are arbitrary types or arrays.\r\n * @return {string} The new URI.\r\n */\r\nexport function appendParams(uri, params) {\r\n  const keyParams = [];\r\n  // Skip any null or undefined parameter values\r\n  Object.keys(params).forEach(function (k) {\r\n    if (params[k] !== null && params[k] !== undefined) {\r\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\r\n    }\r\n  });\r\n  const qs = keyParams.join('&');\r\n  // remove any trailing ? or &\r\n  uri = uri.replace(/[?&]$/, '');\r\n  // append ? or & depending on whether uri has existing parameters\r\n  uri += uri.includes('?') ? '&' : '?';\r\n  return uri + qs;\r\n}\r\n", "/**\r\n * @module ol/source/ImageArcGISRest\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\r\n * the remote server.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\r\n * a URL.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\r\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\r\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\r\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\r\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\r\n * for further reference.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * The projection code must contain a numeric end portion separated by :\r\n * or the entire code must form a valid ArcGIS SpatialReference definition.\r\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\r\n * `2` means twice the size of the map viewport, and so on.\r\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\r\n * these resolutions only.\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\r\n * should include /MapServer or /ImageServer.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for data from ArcGIS Rest services providing single, untiled images.\r\n * Useful when underlying map service has labels.\r\n *\r\n * If underlying map service is not using labels,\r\n * take advantage of ol image caching and use\r\n * {@link module:ol/source/TileArcGISRest~TileArcGISRest} data source.\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageArcGISRest extends ImageSource {\r\n  /**\r\n   * @param {Options} [options] Image ArcGIS Rest Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = createCanvasContext2D(1, 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.imageSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    if (this.url_ === undefined) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\r\n\r\n    const image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), extent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    const params = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true,\r\n    };\r\n    Object.assign(params, this.params_);\r\n\r\n    extent = extent.slice();\r\n    const centerX = (extent[0] + extent[2]) / 2;\r\n    const centerY = (extent[1] + extent[3]) / 2;\r\n    if (this.ratio_ != 1) {\r\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\r\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\r\n      extent[0] = centerX - halfWidth;\r\n      extent[1] = centerY - halfHeight;\r\n      extent[2] = centerX + halfWidth;\r\n      extent[3] = centerY + halfHeight;\r\n    }\r\n\r\n    const imageResolution = resolution / pixelRatio;\r\n\r\n    // Compute an integer width and height.\r\n    const width = Math.ceil(getWidth(extent) / imageResolution);\r\n    const height = Math.ceil(getHeight(extent) / imageResolution);\r\n\r\n    // Modify the extent to match the integer width and height.\r\n    extent[0] = centerX - (imageResolution * width) / 2;\r\n    extent[2] = centerX + (imageResolution * width) / 2;\r\n    extent[1] = centerY - (imageResolution * height) / 2;\r\n    extent[3] = centerY + (imageResolution * height) / 2;\r\n\r\n    this.imageSize_[0] = width;\r\n    this.imageSize_[1] = height;\r\n\r\n    const url = this.getRequestUrl_(\r\n      extent,\r\n      this.imageSize_,\r\n      pixelRatio,\r\n      projection,\r\n      params\r\n    );\r\n\r\n    this.image_ = new ImageWrapper(\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      url,\r\n      this.crossOrigin_,\r\n      this.imageLoadFunction_,\r\n      this.context_\r\n    );\r\n\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.image_.addEventListener(\r\n      EventType.CHANGE,\r\n      this.handleImageChange.bind(this)\r\n    );\r\n\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    // (if there is no numeric portion the entire projection code must\r\n    // form a valid ArcGIS SpatialReference definition).\r\n    const srid = projection\r\n      .getCode()\r\n      .split(/:(?=\\d+$)/)\r\n      .pop();\r\n\r\n    params['SIZE'] = size[0] + ',' + size[1];\r\n    params['BBOX'] = extent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(90 * pixelRatio);\r\n\r\n    const url = this.url_;\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    if (modifiedUrl == url) {\r\n      assert(false, 50); // `options.featureTypes` should be an Array\r\n    }\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this ArcGIS source.\r\n   * @return {string|undefined} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string|undefined} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    if (url != this.url_) {\r\n      this.url_ = url;\r\n      this.image_ = null;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    Object.assign(this.params_, params);\r\n    this.image_ = null;\r\n    this.changed();\r\n  }\r\n}\r\n\r\nexport default ImageArcGISRest;\r\n", "/**\r\n * @module ol/source/ImageCanvas\r\n */\r\n\r\nimport ImageCanvas from '../ImageCanvas.js';\r\nimport ImageSource from './Image.js';\r\nimport {\r\n  containsExtent,\r\n  getHeight,\r\n  getWidth,\r\n  scaleFromCenter,\r\n} from '../extent.js';\r\n\r\n/**\r\n * A function returning the canvas element (`{HTMLCanvasElement}`)\r\n * used by the source as an image. The arguments passed to the function are:\r\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\r\n * `{number}` the pixel ratio of the map, {@link module:ol/size~Size} the image size,\r\n * and {@link module:ol/proj/Projection~Projection} the image projection. The canvas returned by\r\n * this function is cached by the source. The this keyword inside the function\r\n * references the {@link module:ol/source/ImageCanvas~ImageCanvasSource}.\r\n *\r\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\r\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {FunctionType} [canvasFunction] Canvas function.\r\n * The function returning the canvas element used by the source\r\n * as an image. The arguments passed to the function are: {@link import(\"../extent.js\").Extent} the\r\n * image extent, `{number}` the image resolution, `{number}` the pixel ratio of the map,\r\n * {@link import(\"../size.js\").Size} the image size, and {@link import(\"../proj/Projection.js\").default} the image\r\n * projection. The canvas returned by this function is cached by the source. If\r\n * the value returned by the function is later changed then\r\n * `changed` should be called on the source for the source to\r\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\r\n * width and height of the map viewport, and so on. Must be `1` or higher.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * If specified, new canvases will be created for these resolutions\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for image sources where a canvas element is the image.\r\n * @api\r\n */\r\nclass ImageCanvasSource extends ImageSource {\r\n  /**\r\n   * @param {Options} [options] ImageCanvas options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n      state: options.state,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {FunctionType}\r\n     */\r\n    this.canvasFunction_ = options.canvasFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageCanvas.js\").default}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    resolution = this.findNearestResolution(resolution);\r\n\r\n    let canvas = this.canvas_;\r\n    if (\r\n      canvas &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      canvas.getResolution() == resolution &&\r\n      canvas.getPixelRatio() == pixelRatio &&\r\n      containsExtent(canvas.getExtent(), extent)\r\n    ) {\r\n      return canvas;\r\n    }\r\n\r\n    extent = extent.slice();\r\n    scaleFromCenter(extent, this.ratio_);\r\n    const width = getWidth(extent) / resolution;\r\n    const height = getHeight(extent) / resolution;\r\n    const size = [width * pixelRatio, height * pixelRatio];\r\n\r\n    const canvasElement = this.canvasFunction_.call(\r\n      this,\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      size,\r\n      projection\r\n    );\r\n    if (canvasElement) {\r\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\r\n    }\r\n    this.canvas_ = canvas;\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    return canvas;\r\n  }\r\n}\r\n\r\nexport default ImageCanvasSource;\r\n", "/**\r\n * @module ol/source/ImageMapGuide\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {\r\n  containsExtent,\r\n  getCenter,\r\n  getHeight,\r\n  getWidth,\r\n  scaleFromCenter,\r\n} from '../extent.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [url] The mapagent url.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {number} [displayDpi=96] The display resolution.\r\n * @property {number} [metersPerUnit=1] The meters-per-unit value.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {boolean} [useOverlay] If `true`, will use `GETDYNAMICMAPOVERLAYIMAGE`.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1] Ratio. `1` means image requests are the size of the map viewport, `2` means\r\n * twice the width and height of the map viewport, and so on. Must be `1` or higher.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * If specified, requests will be made for these resolutions only.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object} [params] Additional parameters.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for images from Mapguide servers\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageMapGuide extends ImageSource {\r\n  /**\r\n   * @param {Options} options ImageMapGuide options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = createCanvasContext2D(1, 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.displayDpi_ =\r\n      options.displayDpi !== undefined ? options.displayDpi : 96;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.metersPerUnit_ =\r\n      options.metersPerUnit !== undefined ? options.metersPerUnit : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.useOverlay_ =\r\n      options.useOverlay !== undefined ? options.useOverlay : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    resolution = this.findNearestResolution(resolution);\r\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\r\n\r\n    let image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), extent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    if (this.ratio_ != 1) {\r\n      extent = extent.slice();\r\n      scaleFromCenter(extent, this.ratio_);\r\n    }\r\n    const width = getWidth(extent) / resolution;\r\n    const height = getHeight(extent) / resolution;\r\n    const size = [width * pixelRatio, height * pixelRatio];\r\n\r\n    if (this.url_ !== undefined) {\r\n      const imageUrl = this.getUrl(\r\n        this.url_,\r\n        this.params_,\r\n        extent,\r\n        size,\r\n        projection\r\n      );\r\n      image = new ImageWrapper(\r\n        extent,\r\n        resolution,\r\n        pixelRatio,\r\n        imageUrl,\r\n        this.crossOrigin_,\r\n        this.imageLoadFunction_,\r\n        this.context_\r\n      );\r\n      image.addEventListener(\r\n        EventType.CHANGE,\r\n        this.handleImageChange.bind(this)\r\n      );\r\n    } else {\r\n      image = null;\r\n    }\r\n    this.image_ = image;\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    Object.assign(this.params_, params);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {string} baseUrl The mapagent url.\r\n   * @param {Object<string, string|number>} params Request parameters.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string} The mapagent map image request URL.\r\n   */\r\n  getUrl(baseUrl, params, extent, size, projection) {\r\n    const scale = getScale(extent, size, this.metersPerUnit_, this.displayDpi_);\r\n    const center = getCenter(extent);\r\n    const baseParams = {\r\n      'OPERATION': this.useOverlay_\r\n        ? 'GETDYNAMICMAPOVERLAYIMAGE'\r\n        : 'GETMAPIMAGE',\r\n      'VERSION': '2.0.0',\r\n      'LOCALE': 'en',\r\n      'CLIENTAGENT': 'ol/source/ImageMapGuide source',\r\n      'CLIP': '1',\r\n      'SETDISPLAYDPI': this.displayDpi_,\r\n      'SETDISPLAYWIDTH': Math.round(size[0]),\r\n      'SETDISPLAYHEIGHT': Math.round(size[1]),\r\n      'SETVIEWSCALE': scale,\r\n      'SETVIEWCENTERX': center[0],\r\n      'SETVIEWCENTERY': center[1],\r\n    };\r\n    Object.assign(baseParams, params);\r\n    return appendParams(baseUrl, baseParams);\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the MapGuide source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {import(\"../extent.js\").Extent} extent The map extents.\r\n * @param {import(\"../size.js\").Size} size The viewport size.\r\n * @param {number} metersPerUnit The meters-per-unit value.\r\n * @param {number} dpi The display resolution.\r\n * @return {number} The computed map scale.\r\n */\r\nfunction getScale(extent, size, metersPerUnit, dpi) {\r\n  const mcsW = getWidth(extent);\r\n  const mcsH = getHeight(extent);\r\n  const devW = size[0];\r\n  const devH = size[1];\r\n  const mpp = 0.0254 / dpi;\r\n  if (devH * mcsW > devW * mcsH) {\r\n    return (mcsW * metersPerUnit) / (devW * mpp); // width limited\r\n  }\r\n  return (mcsH * metersPerUnit) / (devH * mpp); // height limited\r\n}\r\n\r\nexport default ImageMapGuide;\r\n", "/**\r\n * @module ol/source/ImageStatic\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getHeight, getWidth, intersects} from '../extent.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {import(\"../extent.js\").Extent} [imageExtent] Extent of the image in map coordinates.\r\n * This is the [left, bottom, right, top] map coordinates of your image.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"../size.js\").Size} [imageSize] Size of the image in pixels. Usually the image size is auto-detected, so this\r\n * only needs to be set if auto-detection fails for some reason.\r\n * @property {string} url Image URL.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A layer source for displaying a single, static image.\r\n * @api\r\n */\r\nclass Static extends ImageSource {\r\n  /**\r\n   * @param {Options} options ImageStatic options.\r\n   */\r\n  constructor(options) {\r\n    const crossOrigin =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    const /** @type {import(\"../Image.js\").LoadFunction} */ imageLoadFunction =\r\n        options.imageLoadFunction !== undefined\r\n          ? options.imageLoadFunction\r\n          : defaultImageLoadFunction;\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: options.interpolate,\r\n      projection: getProjection(options.projection),\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.imageExtent_ = options.imageExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = new ImageWrapper(\r\n      this.imageExtent_,\r\n      undefined,\r\n      1,\r\n      this.url_,\r\n      crossOrigin,\r\n      imageLoadFunction,\r\n      createCanvasContext2D(1, 1)\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size|null}\r\n     */\r\n    this.imageSize_ = options.imageSize ? options.imageSize : null;\r\n\r\n    this.image_.addEventListener(\r\n      EventType.CHANGE,\r\n      this.handleImageChange.bind(this)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns the image extent\r\n   * @return {import(\"../extent.js\").Extent} image extent.\r\n   * @api\r\n   */\r\n  getImageExtent() {\r\n    return this.imageExtent_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    if (intersects(extent, this.image_.getExtent())) {\r\n      return this.image_;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this image source.\r\n   * @return {string} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../events/Event.js\").default} evt Event.\r\n   */\r\n  handleImageChange(evt) {\r\n    if (this.image_.getState() == ImageState.LOADED) {\r\n      const imageExtent = this.image_.getExtent();\r\n      const image = this.image_.getImage();\r\n      let imageWidth, imageHeight;\r\n      if (this.imageSize_) {\r\n        imageWidth = this.imageSize_[0];\r\n        imageHeight = this.imageSize_[1];\r\n      } else {\r\n        imageWidth = image.width;\r\n        imageHeight = image.height;\r\n      }\r\n      const extentWidth = getWidth(imageExtent);\r\n      const extentHeight = getHeight(imageExtent);\r\n      const xResolution = extentWidth / imageWidth;\r\n      const yResolution = extentHeight / imageHeight;\r\n      let targetWidth = imageWidth;\r\n      let targetHeight = imageHeight;\r\n      if (xResolution > yResolution) {\r\n        targetWidth = Math.round(extentWidth / yResolution);\r\n      } else {\r\n        targetHeight = Math.round(extentHeight / xResolution);\r\n      }\r\n      if (targetWidth !== imageWidth || targetHeight !== imageHeight) {\r\n        const context = createCanvasContext2D(targetWidth, targetHeight);\r\n        if (!this.getInterpolate()) {\r\n          context.imageSmoothingEnabled = false;\r\n        }\r\n        const canvas = context.canvas;\r\n        context.drawImage(\r\n          image,\r\n          0,\r\n          0,\r\n          imageWidth,\r\n          imageHeight,\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n        this.image_.setImage(canvas);\r\n      }\r\n    }\r\n    super.handleImageChange(evt);\r\n  }\r\n}\r\n\r\nexport default Static;\r\n", "/**\r\n * @module ol/source/wms\r\n */\r\n\r\n/**\r\n * Default WMS version.\r\n * @type {string}\r\n */\r\nexport const DEFAULT_VERSION = '1.3.0';\r\n\r\n/**\r\n * @api\r\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\r\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\r\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\r\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\r\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\r\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\r\n */\r\n", "/**\r\n * @module ol/source/ImageWMS\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\r\nimport ImageWrapper from '../Image.js';\r\nimport {DEFAULT_VERSION} from './wms.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assert} from '../asserts.js';\r\nimport {calculateSourceResolution} from '../reproj.js';\r\nimport {ceil, floor, round} from '../math.js';\r\nimport {compareVersions} from '../string.js';\r\nimport {\r\n  containsExtent,\r\n  getCenter,\r\n  getForViewAndSize,\r\n  getHeight,\r\n  getWidth,\r\n} from '../extent.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {get as getProjection, transform} from '../proj.js';\r\n\r\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\r\nconst DECIMALS = 4;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../size.js\").Size}\r\n */\r\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\r\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\r\n * Only needed if `hidpi` is `true`.\r\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object<string,*>} [params] WMS request parameters.\r\n * At least a `LAYERS` param is required. `STYLES` is\r\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\r\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\r\n * twice the width and height of the map viewport, and so on. Must be `1` or\r\n * higher.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * If specified, requests will be made for these resolutions only.\r\n * @property {string} [url] WMS service URL.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Source for WMS servers providing single, untiled images.\r\n *\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageWMS extends ImageSource {\r\n  /**\r\n   * @param {Options} [options] ImageWMS options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = createCanvasContext2D(1, 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ =\r\n      options.imageLoadFunction !== undefined\r\n        ? options.imageLoadFunction\r\n        : defaultImageLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = Object.assign({}, options.params);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.v13_ = true;\r\n    this.updateV13_();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./wms.js\").ServerType}\r\n     */\r\n    this.serverType_ = options.serverType;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Image.js\").default}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.imageSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n  }\r\n\r\n  /**\r\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\r\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\r\n   * constructed.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\r\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\r\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\r\n   *     specified here.\r\n   * @return {string|undefined} GetFeatureInfo URL.\r\n   * @api\r\n   */\r\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\r\n    if (this.url_ === undefined) {\r\n      return undefined;\r\n    }\r\n    const projectionObj = getProjection(projection);\r\n    const sourceProjectionObj = this.getProjection();\r\n\r\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\r\n      resolution = calculateSourceResolution(\r\n        sourceProjectionObj,\r\n        projectionObj,\r\n        coordinate,\r\n        resolution\r\n      );\r\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\r\n    }\r\n\r\n    const extent = getForViewAndSize(\r\n      coordinate,\r\n      resolution,\r\n      0,\r\n      GETFEATUREINFO_IMAGE_SIZE\r\n    );\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetFeatureInfo',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n      'QUERY_LAYERS': this.params_['LAYERS'],\r\n    };\r\n    Object.assign(baseParams, this.params_, params);\r\n\r\n    const x = floor((coordinate[0] - extent[0]) / resolution, DECIMALS);\r\n    const y = floor((extent[3] - coordinate[1]) / resolution, DECIMALS);\r\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\r\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\r\n\r\n    return this.getRequestUrl_(\r\n      extent,\r\n      GETFEATUREINFO_IMAGE_SIZE,\r\n      1,\r\n      sourceProjectionObj || projectionObj,\r\n      baseParams\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\r\n   * resolution and possibly including any passed specific parameters. Returns\r\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\r\n   *\r\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\r\n   *     will not be calculated and included in URL.\r\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\r\n   *     request is generated for this wms layer, else it will try to use the\r\n   *     configured wms layer. Default `FORMAT` is `image/png`.\r\n   *     `VERSION` should not be specified here.\r\n   * @return {string|undefined} GetLegendGraphic URL.\r\n   * @api\r\n   */\r\n  getLegendUrl(resolution, params) {\r\n    if (this.url_ === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetLegendGraphic',\r\n      'FORMAT': 'image/png',\r\n    };\r\n\r\n    if (params === undefined || params['LAYER'] === undefined) {\r\n      const layers = this.params_.LAYERS;\r\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\r\n      if (!isSingleLayer) {\r\n        return undefined;\r\n      }\r\n      baseParams['LAYER'] = layers;\r\n    }\r\n\r\n    if (resolution !== undefined) {\r\n      const mpu = this.getProjection()\r\n        ? this.getProjection().getMetersPerUnit()\r\n        : 1;\r\n      const pixelSize = 0.00028;\r\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\r\n    }\r\n\r\n    Object.assign(baseParams, params);\r\n\r\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../Image.js\").default} Single image.\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    if (this.url_ === undefined) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n\r\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const imageResolution = resolution / pixelRatio;\r\n\r\n    const center = getCenter(extent);\r\n    const viewWidth = ceil(getWidth(extent) / imageResolution, DECIMALS);\r\n    const viewHeight = ceil(getHeight(extent) / imageResolution, DECIMALS);\r\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\r\n      viewWidth,\r\n      viewHeight,\r\n    ]);\r\n    const requestWidth = ceil(\r\n      (this.ratio_ * getWidth(extent)) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    const requestHeight = ceil(\r\n      (this.ratio_ * getHeight(extent)) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\r\n      requestWidth,\r\n      requestHeight,\r\n    ]);\r\n\r\n    const image = this.image_;\r\n    if (\r\n      image &&\r\n      this.renderedRevision_ == this.getRevision() &&\r\n      image.getResolution() == resolution &&\r\n      image.getPixelRatio() == pixelRatio &&\r\n      containsExtent(image.getExtent(), viewExtent)\r\n    ) {\r\n      return image;\r\n    }\r\n\r\n    const params = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetMap',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n    };\r\n    Object.assign(params, this.params_);\r\n\r\n    this.imageSize_[0] = round(\r\n      getWidth(requestExtent) / imageResolution,\r\n      DECIMALS\r\n    );\r\n    this.imageSize_[1] = round(\r\n      getHeight(requestExtent) / imageResolution,\r\n      DECIMALS\r\n    );\r\n\r\n    const url = this.getRequestUrl_(\r\n      requestExtent,\r\n      this.imageSize_,\r\n      pixelRatio,\r\n      projection,\r\n      params\r\n    );\r\n\r\n    this.image_ = new ImageWrapper(\r\n      requestExtent,\r\n      resolution,\r\n      pixelRatio,\r\n      url,\r\n      this.crossOrigin_,\r\n      this.imageLoadFunction_,\r\n      this.context_\r\n    );\r\n\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.image_.addEventListener(\r\n      EventType.CHANGE,\r\n      this.handleImageChange.bind(this)\r\n    );\r\n\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\r\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\r\n\r\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\r\n\r\n    if (!('STYLES' in this.params_)) {\r\n      params['STYLES'] = '';\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      switch (this.serverType_) {\r\n        case 'geoserver':\r\n          const dpi = (90 * pixelRatio + 0.5) | 0;\r\n          if ('FORMAT_OPTIONS' in params) {\r\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\r\n          } else {\r\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\r\n          }\r\n          break;\r\n        case 'mapserver':\r\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\r\n          break;\r\n        case 'carmentaserver':\r\n        case 'qgis':\r\n          params['DPI'] = 90 * pixelRatio;\r\n          break;\r\n        default: // Unknown `serverType` configured\r\n          assert(false, 8);\r\n          break;\r\n      }\r\n    }\r\n\r\n    params['WIDTH'] = size[0];\r\n    params['HEIGHT'] = size[1];\r\n\r\n    const axisOrientation = projection.getAxisOrientation();\r\n    let bbox;\r\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\r\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\r\n    } else {\r\n      bbox = extent;\r\n    }\r\n    params['BBOX'] = bbox.join(',');\r\n\r\n    return appendParams(/** @type {string} */ (this.url_), params);\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this WMS source.\r\n   * @return {string|undefined} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the source.\r\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string|undefined} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    if (url != this.url_) {\r\n      this.url_ = url;\r\n      this.image_ = null;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    Object.assign(this.params_, params);\r\n    this.updateV13_();\r\n    this.image_ = null;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateV13_() {\r\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\r\n    this.v13_ = compareVersions(version, '1.3') >= 0;\r\n  }\r\n}\r\n\r\nexport default ImageWMS;\r\n", "/**\r\n * @module ol/source/Stamen\r\n */\r\n\r\nimport XYZ from './XYZ.js';\r\nimport {ATTRIBUTION as OSM_ATTRIBUTION} from './OSM.js';\r\n\r\n/**\r\n * @const\r\n * @type {Array<string>}\r\n */\r\nconst ATTRIBUTIONS = [\r\n  'Map tiles by <a href=\"https://stamen.com/\" target=\"_blank\">Stamen Design</a>, ' +\r\n    'under <a href=\"https://creativecommons.org/licenses/by/3.0/\" target=\"_blank\">CC BY' +\r\n    ' 3.0</a>.',\r\n  OSM_ATTRIBUTION,\r\n];\r\n\r\n/**\r\n * @type {Object<string, {extension: string, opaque: boolean}>}\r\n */\r\nconst LayerConfig = {\r\n  'terrain': {\r\n    extension: 'png',\r\n    opaque: true,\r\n  },\r\n  'terrain-background': {\r\n    extension: 'png',\r\n    opaque: true,\r\n  },\r\n  'terrain-labels': {\r\n    extension: 'png',\r\n    opaque: false,\r\n  },\r\n  'terrain-lines': {\r\n    extension: 'png',\r\n    opaque: false,\r\n  },\r\n  'toner-background': {\r\n    extension: 'png',\r\n    opaque: true,\r\n  },\r\n  'toner': {\r\n    extension: 'png',\r\n    opaque: true,\r\n  },\r\n  'toner-hybrid': {\r\n    extension: 'png',\r\n    opaque: false,\r\n  },\r\n  'toner-labels': {\r\n    extension: 'png',\r\n    opaque: false,\r\n  },\r\n  'toner-lines': {\r\n    extension: 'png',\r\n    opaque: false,\r\n  },\r\n  'toner-lite': {\r\n    extension: 'png',\r\n    opaque: true,\r\n  },\r\n  'watercolor': {\r\n    extension: 'jpg',\r\n    opaque: true,\r\n  },\r\n};\r\n\r\n/**\r\n * @type {Object<string, {minZoom: number, maxZoom: number}>}\r\n */\r\nconst ProviderConfig = {\r\n  'terrain': {\r\n    minZoom: 0,\r\n    maxZoom: 18,\r\n  },\r\n  'toner': {\r\n    minZoom: 0,\r\n    maxZoom: 20,\r\n  },\r\n  'watercolor': {\r\n    minZoom: 0,\r\n    maxZoom: 18,\r\n  },\r\n};\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {string} layer Layer name.\r\n * @property {number} [minZoom] Minimum zoom.\r\n * @property {number} [maxZoom] Maximum zoom.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\r\n * Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for the Stamen tile server.\r\n * @api\r\n */\r\nclass Stamen extends XYZ {\r\n  /**\r\n   * @param {Options} options Stamen options.\r\n   */\r\n  constructor(options) {\r\n    const i = options.layer.indexOf('-');\r\n    const provider = i == -1 ? options.layer : options.layer.slice(0, i);\r\n    const providerConfig = ProviderConfig[provider];\r\n\r\n    const layerConfig = LayerConfig[options.layer];\r\n\r\n    const url =\r\n      options.url !== undefined\r\n        ? options.url\r\n        : 'https://stamen-tiles-{a-d}.a.ssl.fastly.net/' +\r\n          options.layer +\r\n          '/{z}/{x}/{y}.' +\r\n          layerConfig.extension;\r\n\r\n    super({\r\n      attributions: ATTRIBUTIONS,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: 'anonymous',\r\n      interpolate: options.interpolate,\r\n      maxZoom:\r\n        options.maxZoom != undefined ? options.maxZoom : providerConfig.maxZoom,\r\n      minZoom:\r\n        options.minZoom != undefined ? options.minZoom : providerConfig.minZoom,\r\n      opaque: layerConfig.opaque,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      transition: options.transition,\r\n      url: url,\r\n      wrapX: options.wrapX,\r\n      zDirection: options.zDirection,\r\n    });\r\n  }\r\n}\r\n\r\nexport default Stamen;\r\n", "/**\r\n * @module ol/source/TileArcGISRest\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {createEmpty} from '../extent.js';\r\nimport {modulo} from '../math.js';\r\nimport {scale as scaleSize, toSize} from '../size.js';\r\nimport {hash as tileCoordHash} from '../tilecoord.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\r\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\r\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\r\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\r\n * override the default service layer visibility. See\r\n * https://developers.arcgis.com/rest/services-reference/export-map.htm\r\n * for further reference.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\r\n * tilesize and extent supported by the server.\r\n * If this is not defined, a default grid will be used: if there is a projection\r\n * extent, the grid will be based on that; if not, a grid based on a global\r\n * extent with origin at 0,0 will be used.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * The projection code must contain a numeric end portion separated by :\r\n * or the entire code must form a valid ArcGIS SpatialReference definition.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\r\n * The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\r\n * url should include /MapServer or /ImageServer.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\r\n * transition, pass `transition: 0`.\r\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\r\n * Service supports multiple urls for export requests.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from ArcGIS Rest services. Map and Image\r\n * Services are supported.\r\n *\r\n * For cached ArcGIS services, better performance is available using the\r\n * {@link module:ol/source/XYZ~XYZ} data source.\r\n * @api\r\n */\r\nclass TileArcGISRest extends TileImage {\r\n  /**\r\n   * @param {Options} [options] Tile ArcGIS Rest options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = createEmpty();\r\n\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current params.\r\n   */\r\n  getKeyForParams_() {\r\n    let i = 0;\r\n    const res = [];\r\n    for (const key in this.params_) {\r\n      res[i++] = key + '-' + this.params_[key];\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\r\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string|undefined} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(\r\n    tileCoord,\r\n    tileSize,\r\n    tileExtent,\r\n    pixelRatio,\r\n    projection,\r\n    params\r\n  ) {\r\n    const urls = this.urls;\r\n    if (!urls) {\r\n      return undefined;\r\n    }\r\n\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    // (if there is no numeric portion the entire projection code must\r\n    // form a valid ArcGIS SpatialReference definition).\r\n    const srid = projection\r\n      .getCode()\r\n      .split(/:(?=\\d+$)/)\r\n      .pop();\r\n\r\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\r\n    params['BBOX'] = tileExtent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(\r\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\r\n    );\r\n\r\n    let url;\r\n    if (urls.length == 1) {\r\n      url = urls[0];\r\n    } else {\r\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\r\n      url = urls[index];\r\n    }\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return this.hidpi_ ? pixelRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    Object.assign(this.params_, params);\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\r\n   * @param {number} pixelRatio The pixel ratio\r\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\r\n   * @return {string|undefined} The tile URL\r\n   * @override\r\n   */\r\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projection);\r\n    }\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    if (pixelRatio != 1 && !this.hidpi_) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    if (pixelRatio != 1) {\r\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\r\n    }\r\n\r\n    // Apply default params and override with user specified values.\r\n    const baseParams = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true,\r\n    };\r\n    Object.assign(baseParams, this.params_);\r\n\r\n    return this.getRequestUrl_(\r\n      tileCoord,\r\n      tileSize,\r\n      tileExtent,\r\n      pixelRatio,\r\n      projection,\r\n      baseParams\r\n    );\r\n  }\r\n}\r\n\r\nexport default TileArcGISRest;\r\n", "/**\r\n * @module ol/source/TileDebug\r\n */\r\n\r\nimport XYZ from './XYZ.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Set to `1` when debugging `VectorTile` sources with a default configuration.\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n * @property {string} [template='z:{z} x:{x} y:{y}'] Template for labeling the tiles.\r\n * Should include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A pseudo tile source, which does not fetch tiles from a server, but renders\r\n * a grid outline for the tile grid/projection along with the coordinates for\r\n * each tile. See examples/canvas-tiles for an example.\r\n * @api\r\n */\r\nclass TileDebug extends XYZ {\r\n  /**\r\n   * @param {Options} [options] Debug tile options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {Options}\r\n     */\r\n    options = options || {};\r\n\r\n    super({\r\n      opaque: false,\r\n      projection: options.projection,\r\n      tileGrid: options.tileGrid,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      zDirection: options.zDirection,\r\n      url: options.template || 'z:{z} x:{x} y:{y}',\r\n      tileLoadFunction: (tile, text) => {\r\n        const z = tile.getTileCoord()[0];\r\n        const tileSize = toSize(this.tileGrid.getTileSize(z));\r\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\r\n\r\n        context.strokeStyle = 'grey';\r\n        context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\r\n\r\n        context.fillStyle = 'grey';\r\n        context.strokeStyle = 'white';\r\n        context.textAlign = 'center';\r\n        context.textBaseline = 'middle';\r\n        context.font = '24px sans-serif';\r\n        context.lineWidth = 4;\r\n        context.strokeText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\r\n        context.fillText(text, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\r\n\r\n        /** @type {import(\"../ImageTile.js\").default} */ (tile).setImage(\r\n          context.canvas\r\n        );\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nexport default TileDebug;\r\n", "/**\r\n * @module ol/source/TileWMS\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {DEFAULT_VERSION} from './wms.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {assert} from '../asserts.js';\r\nimport {buffer, createEmpty} from '../extent.js';\r\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\r\nimport {calculateSourceResolution} from '../reproj.js';\r\nimport {compareVersions} from '../string.js';\r\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\r\nimport {modulo} from '../math.js';\r\nimport {hash as tileCoordHash} from '../tilecoord.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {Object<string,*>} params WMS request parameters.\r\n * At least a `LAYERS` param is required. `STYLES` is\r\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\r\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\r\n * @property {number} [gutter=0]\r\n * The size in pixels of the gutter around image tiles to ignore. By setting\r\n * this property to a non-zero value, images will be requested that are wider\r\n * and taller than the tile size by a value of `2 x gutter`.\r\n * Using a non-zero value allows artifacts of rendering at tile edges to be\r\n * ignored. If you control the WMS service it is recommended to address\r\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\r\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\r\n * this. See https://mapserver.org/output/tile_mode.html.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\r\n * tilesize and extent supported by the server.\r\n * If this is not defined, a default grid will be used: if there is a projection\r\n * extent, the grid will be based on that; if not, a grid based on a global\r\n * extent with origin at 0,0 will be used.\r\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\r\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\r\n * Only needed if `hidpi` is `true`.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] WMS service URL.\r\n * @property {Array<string>} [urls] WMS service urls.\r\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * When set to `false`, only one world\r\n * will be rendered. When `true`, tiles will be requested for one world only,\r\n * but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from WMS servers.\r\n * @api\r\n */\r\nclass TileWMS extends TileImage {\r\n  /**\r\n   * @param {Options} [options] Tile WMS options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : /** @type {Options} */ ({});\r\n\r\n    const params = Object.assign({}, options.params);\r\n\r\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      opaque: !transparent,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileClass: options.tileClass,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = params;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.v13_ = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./wms.js\").ServerType}\r\n     */\r\n    this.serverType_ = options.serverType;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = createEmpty();\r\n\r\n    this.updateV13_();\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\r\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\r\n   * constructed.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\r\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\r\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\r\n   *     specified here.\r\n   * @return {string|undefined} GetFeatureInfo URL.\r\n   * @api\r\n   */\r\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\r\n    const projectionObj = getProjection(projection);\r\n    const sourceProjectionObj = this.getProjection();\r\n\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projectionObj);\r\n    }\r\n\r\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\r\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\r\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    const gutter = this.gutter_;\r\n    if (gutter !== 0) {\r\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\r\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\r\n    }\r\n\r\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\r\n      tileResolution = calculateSourceResolution(\r\n        sourceProjectionObj,\r\n        projectionObj,\r\n        coordinate,\r\n        tileResolution\r\n      );\r\n      tileExtent = transformExtent(\r\n        tileExtent,\r\n        projectionObj,\r\n        sourceProjectionObj\r\n      );\r\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetFeatureInfo',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n      'QUERY_LAYERS': this.params_['LAYERS'],\r\n    };\r\n    Object.assign(baseParams, this.params_, params);\r\n\r\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\r\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\r\n\r\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\r\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\r\n\r\n    return this.getRequestUrl_(\r\n      tileCoord,\r\n      tileSize,\r\n      tileExtent,\r\n      1,\r\n      sourceProjectionObj || projectionObj,\r\n      baseParams\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\r\n   * resolution and possibly including any passed specific parameters. Returns\r\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\r\n   *\r\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\r\n   *     will not be calculated and included in URL.\r\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\r\n   *     request is generated for this wms layer, else it will try to use the\r\n   *     configured wms layer. Default `FORMAT` is `image/png`.\r\n   *     `VERSION` should not be specified here.\r\n   * @return {string|undefined} GetLegendGraphic URL.\r\n   * @api\r\n   */\r\n  getLegendUrl(resolution, params) {\r\n    if (this.urls[0] === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetLegendGraphic',\r\n      'FORMAT': 'image/png',\r\n    };\r\n\r\n    if (params === undefined || params['LAYER'] === undefined) {\r\n      const layers = this.params_.LAYERS;\r\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\r\n      if (!isSingleLayer) {\r\n        return undefined;\r\n      }\r\n      baseParams['LAYER'] = layers;\r\n    }\r\n\r\n    if (resolution !== undefined) {\r\n      const mpu = this.getProjection()\r\n        ? this.getProjection().getMetersPerUnit()\r\n        : 1;\r\n      const pixelSize = 0.00028;\r\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\r\n    }\r\n\r\n    Object.assign(baseParams, params);\r\n\r\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\r\n  }\r\n\r\n  /**\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutter() {\r\n    return this.gutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\r\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string|undefined} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(\r\n    tileCoord,\r\n    tileSize,\r\n    tileExtent,\r\n    pixelRatio,\r\n    projection,\r\n    params\r\n  ) {\r\n    const urls = this.urls;\r\n    if (!urls) {\r\n      return undefined;\r\n    }\r\n\r\n    params['WIDTH'] = tileSize[0];\r\n    params['HEIGHT'] = tileSize[1];\r\n\r\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\r\n\r\n    if (!('STYLES' in this.params_)) {\r\n      params['STYLES'] = '';\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      switch (this.serverType_) {\r\n        case 'geoserver':\r\n          const dpi = (90 * pixelRatio + 0.5) | 0;\r\n          if ('FORMAT_OPTIONS' in params) {\r\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\r\n          } else {\r\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\r\n          }\r\n          break;\r\n        case 'mapserver':\r\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\r\n          break;\r\n        case 'carmentaserver':\r\n        case 'qgis':\r\n          params['DPI'] = 90 * pixelRatio;\r\n          break;\r\n        default: // Unknown `serverType` configured\r\n          assert(false, 52);\r\n          break;\r\n      }\r\n    }\r\n\r\n    const axisOrientation = projection.getAxisOrientation();\r\n    const bbox = tileExtent;\r\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\r\n      let tmp;\r\n      tmp = tileExtent[0];\r\n      bbox[0] = tileExtent[1];\r\n      bbox[1] = tmp;\r\n      tmp = tileExtent[2];\r\n      bbox[2] = tileExtent[3];\r\n      bbox[3] = tmp;\r\n    }\r\n    params['BBOX'] = bbox.join(',');\r\n\r\n    let url;\r\n    if (urls.length == 1) {\r\n      url = urls[0];\r\n    } else {\r\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\r\n      url = urls[index];\r\n    }\r\n    return appendParams(url, params);\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current params.\r\n   */\r\n  getKeyForParams_() {\r\n    let i = 0;\r\n    const res = [];\r\n    for (const key in this.params_) {\r\n      res[i++] = key + '-' + this.params_[key];\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    Object.assign(this.params_, params);\r\n    this.updateV13_();\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateV13_() {\r\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\r\n    this.v13_ = compareVersions(version, '1.3') >= 0;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\r\n   * @param {number} pixelRatio The pixel ratio\r\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\r\n   * @return {string|undefined} The tile URL\r\n   * @override\r\n   */\r\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projection);\r\n    }\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\r\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    const gutter = this.gutter_;\r\n    if (gutter !== 0) {\r\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\r\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_VERSION,\r\n      'REQUEST': 'GetMap',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n    };\r\n    Object.assign(baseParams, this.params_);\r\n\r\n    return this.getRequestUrl_(\r\n      tileCoord,\r\n      tileSize,\r\n      tileExtent,\r\n      pixelRatio,\r\n      projection,\r\n      baseParams\r\n    );\r\n  }\r\n}\r\n\r\nexport default TileWMS;\r\n", "/**\r\n * @module ol/source/UTFGrid\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport Tile from '../Tile.js';\r\nimport TileSource from './Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport {applyTransform, intersects} from '../extent.js';\r\nimport {assert} from '../asserts.js';\r\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport {getKeyZXY} from '../tilecoord.js';\r\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\r\nimport {listenOnce} from '../events.js';\r\nimport {jsonp as requestJSONP} from '../net.js';\r\n\r\n/**\r\n * @typedef {Object} UTFGridJSON\r\n * @property {Array<string>} grid The grid.\r\n * @property {Array<string>} keys The keys.\r\n * @property {Object<string, Object>} [data] Optional data.\r\n */\r\n\r\nexport class CustomTile extends Tile {\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\r\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\r\n   * @param {boolean} jsonp Load the tile as a script.\r\n   */\r\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\r\n    super(tileCoord, state);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.preemptive_ = preemptive;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>}\r\n     */\r\n    this.grid_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<string>}\r\n     */\r\n    this.keys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Object>|undefined}\r\n     */\r\n    this.data_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.jsonp_ = jsonp;\r\n  }\r\n\r\n  /**\r\n   * Get the image element for this tile.\r\n   * @return {HTMLImageElement} Image.\r\n   */\r\n  getImage() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Synchronously returns data at given coordinate (if available).\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {*} The data.\r\n   */\r\n  getData(coordinate) {\r\n    if (!this.grid_ || !this.keys_) {\r\n      return null;\r\n    }\r\n    const xRelative =\r\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\r\n    const yRelative =\r\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\r\n\r\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\r\n\r\n    if (typeof row !== 'string') {\r\n      return null;\r\n    }\r\n\r\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\r\n    if (code >= 93) {\r\n      code--;\r\n    }\r\n    if (code >= 35) {\r\n      code--;\r\n    }\r\n    code -= 32;\r\n\r\n    let data = null;\r\n    if (code in this.keys_) {\r\n      const id = this.keys_[code];\r\n      if (this.data_ && id in this.data_) {\r\n        data = this.data_[id];\r\n      } else {\r\n        data = id;\r\n      }\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Calls the callback (synchronously by default) with the available data\r\n   * for given coordinate (or `null` if not yet loaded).\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(*): void} callback Callback.\r\n   * @param {boolean} [request] If `true` the callback is always async.\r\n   *                               The tile data is requested if not yet loaded.\r\n   */\r\n  forDataAtCoordinate(coordinate, callback, request) {\r\n    if (this.state == TileState.EMPTY && request === true) {\r\n      this.state = TileState.IDLE;\r\n      listenOnce(\r\n        this,\r\n        EventType.CHANGE,\r\n        function (e) {\r\n          callback(this.getData(coordinate));\r\n        },\r\n        this\r\n      );\r\n      this.loadInternal_();\r\n    } else {\r\n      if (request === true) {\r\n        setTimeout(() => {\r\n          callback(this.getData(coordinate));\r\n        }, 0);\r\n      } else {\r\n        callback(this.getData(coordinate));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\r\n  getKey() {\r\n    return this.src_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleError_() {\r\n    this.state = TileState.ERROR;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @param {!UTFGridJSON} json UTFGrid data.\r\n   * @private\r\n   */\r\n  handleLoad_(json) {\r\n    this.grid_ = json['grid'];\r\n    this.keys_ = json['keys'];\r\n    this.data_ = json['data'];\r\n\r\n    this.state = TileState.LOADED;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  loadInternal_() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      if (this.jsonp_) {\r\n        requestJSONP(\r\n          this.src_,\r\n          this.handleLoad_.bind(this),\r\n          this.handleError_.bind(this)\r\n        );\r\n      } else {\r\n        const client = new XMLHttpRequest();\r\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\r\n        client.addEventListener('error', this.onXHRError_.bind(this));\r\n        client.open('GET', this.src_);\r\n        client.send();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The load event.\r\n   */\r\n  onXHRLoad_(event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n      let response;\r\n      try {\r\n        response = /** @type {!UTFGridJSON} */ (\r\n          JSON.parse(client.responseText)\r\n        );\r\n      } catch (err) {\r\n        this.handleError_();\r\n        return;\r\n      }\r\n      this.handleLoad_(response);\r\n    } else {\r\n      this.handleError_();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The error event.\r\n   */\r\n  onXHRError_(event) {\r\n    this.handleError_();\r\n  }\r\n\r\n  /**\r\n   */\r\n  load() {\r\n    if (this.preemptive_) {\r\n      this.loadInternal_();\r\n    } else {\r\n      this.setState(TileState.EMPTY);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [preemptive=true]\r\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\r\n * This improves the speed of response, but increases traffic.\r\n * Note that if set to `false` (lazy loading), you need to pass `true` as\r\n * `request` to the `forDataAtCoordinateAndResolution` method otherwise no\r\n * data will ever be loaded.\r\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\r\n * Useful when the server does not support CORS..\r\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\r\n * If not provided, `url` must be configured.\r\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\r\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\r\n * @api\r\n */\r\nclass UTFGrid extends TileSource {\r\n  /**\r\n   * @param {Options} options Source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      projection: getProjection('EPSG:3857'),\r\n      state: 'loading',\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.preemptive_ =\r\n      options.preemptive !== undefined ? options.preemptive : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"../Tile.js\").UrlFunction}\r\n     */\r\n    this.tileUrlFunction_ = nullTileUrlFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.template_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.jsonp_ = options.jsonp || false;\r\n\r\n    if (options.url) {\r\n      if (this.jsonp_) {\r\n        requestJSONP(\r\n          options.url,\r\n          this.handleTileJSONResponse.bind(this),\r\n          this.handleTileJSONError.bind(this)\r\n        );\r\n      } else {\r\n        const client = new XMLHttpRequest();\r\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\r\n        client.addEventListener('error', this.onXHRError_.bind(this));\r\n        client.open('GET', options.url);\r\n        client.send();\r\n      }\r\n    } else if (options.tileJSON) {\r\n      this.handleTileJSONResponse(options.tileJSON);\r\n    } else {\r\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The load event.\r\n   */\r\n  onXHRLoad_(event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n      let response;\r\n      try {\r\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (\r\n          JSON.parse(client.responseText)\r\n        );\r\n      } catch (err) {\r\n        this.handleTileJSONError();\r\n        return;\r\n      }\r\n      this.handleTileJSONResponse(response);\r\n    } else {\r\n      this.handleTileJSONError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The error event.\r\n   */\r\n  onXHRError_(event) {\r\n    this.handleTileJSONError();\r\n  }\r\n\r\n  /**\r\n   * Return the template from TileJSON.\r\n   * @return {string|undefined} The template from TileJSON.\r\n   * @api\r\n   */\r\n  getTemplate() {\r\n    return this.template_;\r\n  }\r\n\r\n  /**\r\n   * Calls the callback (synchronously by default) with the available data\r\n   * for given coordinate and resolution (or `null` if not yet loaded or\r\n   * in case of an error).\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {function(*): void} callback Callback.\r\n   * @param {boolean} [request] If `true` the callback is always async.\r\n   *                               The tile data is requested if not yet loaded.\r\n   * @api\r\n   */\r\n  forDataAtCoordinateAndResolution(coordinate, resolution, callback, request) {\r\n    if (this.tileGrid) {\r\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\r\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n      const tile = /** @type {!CustomTile} */ (\r\n        this.getTile(\r\n          tileCoord[0],\r\n          tileCoord[1],\r\n          tileCoord[2],\r\n          1,\r\n          this.getProjection()\r\n        )\r\n      );\r\n      tile.forDataAtCoordinate(coordinate, callback, request);\r\n    } else {\r\n      if (request === true) {\r\n        setTimeout(function () {\r\n          callback(null);\r\n        }, 0);\r\n      } else {\r\n        callback(null);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleTileJSONError() {\r\n    this.setState('error');\r\n  }\r\n\r\n  /**\r\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\r\n   * @protected\r\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\r\n   */\r\n  handleTileJSONResponse(tileJSON) {\r\n    const epsg4326Projection = getProjection('EPSG:4326');\r\n\r\n    const sourceProjection = this.getProjection();\r\n    let extent;\r\n    if (tileJSON['bounds'] !== undefined) {\r\n      const transform = getTransformFromProjections(\r\n        epsg4326Projection,\r\n        sourceProjection\r\n      );\r\n      extent = applyTransform(tileJSON['bounds'], transform);\r\n    }\r\n\r\n    const gridExtent = extentFromProjection(sourceProjection);\r\n    const minZoom = tileJSON['minzoom'] || 0;\r\n    const maxZoom = tileJSON['maxzoom'] || 22;\r\n    const tileGrid = createXYZ({\r\n      extent: gridExtent,\r\n      maxZoom: maxZoom,\r\n      minZoom: minZoom,\r\n    });\r\n    this.tileGrid = tileGrid;\r\n\r\n    this.template_ = tileJSON['template'];\r\n\r\n    const grids = tileJSON['grids'];\r\n    if (!grids) {\r\n      this.setState('error');\r\n      return;\r\n    }\r\n\r\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\r\n\r\n    if (tileJSON['attribution'] !== undefined) {\r\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\r\n      this.setAttributions(function (frameState) {\r\n        if (intersects(attributionExtent, frameState.extent)) {\r\n          return [tileJSON['attribution']];\r\n        }\r\n        return null;\r\n      });\r\n    }\r\n\r\n    this.setState('ready');\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!CustomTile} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (this.tileCache.containsKey(tileCoordKey)) {\r\n      return this.tileCache.get(tileCoordKey);\r\n    }\r\n    const tileCoord = [z, x, y];\r\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection\r\n    );\r\n    const tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\r\n    const tile = new CustomTile(\r\n      tileCoord,\r\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\r\n      tileUrl !== undefined ? tileUrl : '',\r\n      this.tileGrid.getTileCoordExtent(tileCoord),\r\n      this.preemptive_,\r\n      this.jsonp_\r\n    );\r\n    this.tileCache.set(tileCoordKey, tile);\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   */\r\n  useTile(z, x, y) {\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (this.tileCache.containsKey(tileCoordKey)) {\r\n      this.tileCache.get(tileCoordKey);\r\n    }\r\n  }\r\n}\r\n\r\nexport default UTFGrid;\r\n", "/**\r\n * @module ol/source/WMTS\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {appendParams} from '../uri.js';\r\nimport {containsExtent} from '../extent.js';\r\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\r\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\r\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\r\n\r\n/**\r\n * Request encoding. One of 'KVP', 'REST'.\r\n * @typedef {'KVP' | 'REST'} RequestEncoding\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\r\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\r\n * @property {string} style Style name as advertised in the WMTS capabilities.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\r\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\r\n * @property {string} [version='1.0.0'] WMTS version.\r\n * @property {string} matrixSet Matrix set.\r\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\r\n * This is an object with properties named like the advertised WMTS dimensions.\r\n * @property {string} [url]  A URL for the service.\r\n * For the RESTful request encoding, this is a URL\r\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\r\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\r\n * each one separately in the `urls` option.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {Array<string>} [urls] An array of URLs.\r\n * Requests will be distributed among the URLs in this array.\r\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from WMTS servers.\r\n * @api\r\n */\r\nclass WMTS extends TileImage {\r\n  /**\r\n   * @param {Options} options WMTS options.\r\n   */\r\n  constructor(options) {\r\n    // TODO: add support for TileMatrixLimits\r\n\r\n    const requestEncoding =\r\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\r\n\r\n    // FIXME: should we create a default tileGrid?\r\n    // we could issue a getCapabilities xhr to retrieve missing configuration\r\n    const tileGrid = options.tileGrid;\r\n\r\n    let urls = options.urls;\r\n    if (urls === undefined && options.url !== undefined) {\r\n      urls = expandUrl(options.url);\r\n    }\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileClass: options.tileClass,\r\n      tileGrid: tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      urls: urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.dimensions_ =\r\n      options.dimensions !== undefined ? options.dimensions : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.layer_ = options.layer;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.matrixSet_ = options.matrixSet;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.style_ = options.style;\r\n\r\n    // FIXME: should we guess this requestEncoding from options.url(s)\r\n    //        structure? that would mean KVP only if a template is not provided.\r\n\r\n    /**\r\n     * @private\r\n     * @type {RequestEncoding}\r\n     */\r\n    this.requestEncoding_ = requestEncoding;\r\n\r\n    this.setKey(this.getKeyForDimensions_());\r\n\r\n    if (urls && urls.length > 0) {\r\n      this.tileUrlFunction = createFromTileUrlFunctions(\r\n        urls.map(this.createFromWMTSTemplate.bind(this))\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the URLs to use for requests.\r\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\r\n   * @param {Array<string>} urls URLs.\r\n   */\r\n  setUrls(urls) {\r\n    this.urls = urls;\r\n    const key = urls.join('\\n');\r\n    this.setTileUrlFunction(\r\n      createFromTileUrlFunctions(\r\n        urls.map(this.createFromWMTSTemplate.bind(this))\r\n      ),\r\n      key\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the dimensions, i.e. those passed to the constructor through the\r\n   * \"dimensions\" option, and possibly updated using the updateDimensions\r\n   * method.\r\n   * @return {!Object} Dimensions.\r\n   * @api\r\n   */\r\n  getDimensions() {\r\n    return this.dimensions_;\r\n  }\r\n\r\n  /**\r\n   * Return the image format of the WMTS source.\r\n   * @return {string} Format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * Return the layer of the WMTS source.\r\n   * @return {string} Layer.\r\n   * @api\r\n   */\r\n  getLayer() {\r\n    return this.layer_;\r\n  }\r\n\r\n  /**\r\n   * Return the matrix set of the WMTS source.\r\n   * @return {string} MatrixSet.\r\n   * @api\r\n   */\r\n  getMatrixSet() {\r\n    return this.matrixSet_;\r\n  }\r\n\r\n  /**\r\n   * Return the request encoding, either \"KVP\" or \"REST\".\r\n   * @return {RequestEncoding} Request encoding.\r\n   * @api\r\n   */\r\n  getRequestEncoding() {\r\n    return this.requestEncoding_;\r\n  }\r\n\r\n  /**\r\n   * Return the style of the WMTS source.\r\n   * @return {string} Style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Return the version of the WMTS source.\r\n   * @return {string} Version.\r\n   * @api\r\n   */\r\n  getVersion() {\r\n    return this.version_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current dimensions.\r\n   */\r\n  getKeyForDimensions_() {\r\n    const res = this.urls ? this.urls.slice(0) : [];\r\n    for (const key in this.dimensions_) {\r\n      res.push(key + '-' + this.dimensions_[key]);\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * Update the dimensions.\r\n   * @param {Object} dimensions Dimensions.\r\n   * @api\r\n   */\r\n  updateDimensions(dimensions) {\r\n    Object.assign(this.dimensions_, dimensions);\r\n    this.setKey(this.getKeyForDimensions_());\r\n  }\r\n\r\n  /**\r\n   * @param {string} template Template.\r\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\r\n   */\r\n  createFromWMTSTemplate(template) {\r\n    const requestEncoding = this.requestEncoding_;\r\n\r\n    // context property names are lower case to allow for a case insensitive\r\n    // replacement as some services use different naming conventions\r\n    const context = {\r\n      'layer': this.layer_,\r\n      'style': this.style_,\r\n      'tilematrixset': this.matrixSet_,\r\n    };\r\n\r\n    if (requestEncoding == 'KVP') {\r\n      Object.assign(context, {\r\n        'Service': 'WMTS',\r\n        'Request': 'GetTile',\r\n        'Version': this.version_,\r\n        'Format': this.format_,\r\n      });\r\n    }\r\n\r\n    // TODO: we may want to create our own appendParams function so that params\r\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\r\n    // special template params\r\n\r\n    template =\r\n      requestEncoding == 'KVP'\r\n        ? appendParams(template, context)\r\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\r\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\r\n          });\r\n\r\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\r\n      this.tileGrid\r\n    );\r\n    const dimensions = this.dimensions_;\r\n\r\n    return (\r\n      /**\r\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n       * @param {number} pixelRatio Pixel ratio.\r\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n       * @return {string|undefined} Tile URL.\r\n       */\r\n      function (tileCoord, pixelRatio, projection) {\r\n        if (!tileCoord) {\r\n          return undefined;\r\n        }\r\n        const localContext = {\r\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\r\n          'TileCol': tileCoord[1],\r\n          'TileRow': tileCoord[2],\r\n        };\r\n        Object.assign(localContext, dimensions);\r\n        let url = template;\r\n        if (requestEncoding == 'KVP') {\r\n          url = appendParams(url, localContext);\r\n        } else {\r\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\r\n            return localContext[p];\r\n          });\r\n        }\r\n        return url;\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default WMTS;\r\n\r\n/**\r\n * Generate source options from a capabilities object.\r\n * @param {Object} wmtsCap An object representing the capabilities document.\r\n * @param {!Object} config Configuration properties for the layer.  Defaults for\r\n *                  the layer will apply if not provided.\r\n *\r\n * Required config properties:\r\n *  - layer - {string} The layer identifier.\r\n *\r\n * Optional config properties:\r\n *  - matrixSet - {string} The matrix set identifier, required if there is\r\n *       more than one matrix set in the layer capabilities.\r\n *  - projection - {string} The desired CRS when no matrixSet is specified.\r\n *       eg: \"EPSG:3857\". If the desired projection is not available,\r\n *       an error is thrown.\r\n *  - requestEncoding - {string} url encoding format for the layer. Default is\r\n *       the first tile url format found in the GetCapabilities response.\r\n *  - style - {string} The name of the style\r\n *  - format - {string} Image format for the layer. Default is the first\r\n *       format returned in the GetCapabilities response.\r\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\r\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\r\n * @api\r\n */\r\nexport function optionsFromCapabilities(wmtsCap, config) {\r\n  const layers = wmtsCap['Contents']['Layer'];\r\n  const l = layers.find(function (elt) {\r\n    return elt['Identifier'] == config['layer'];\r\n  });\r\n  if (!l) {\r\n    return null;\r\n  }\r\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\r\n  let idx;\r\n  if (l['TileMatrixSetLink'].length > 1) {\r\n    if ('projection' in config) {\r\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\r\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\r\n          return el['Identifier'] == elt['TileMatrixSet'];\r\n        });\r\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\r\n        const proj1 = getProjection(supportedCRS);\r\n        const proj2 = getProjection(config['projection']);\r\n        if (proj1 && proj2) {\r\n          return equivalent(proj1, proj2);\r\n        }\r\n        return supportedCRS == config['projection'];\r\n      });\r\n    } else {\r\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\r\n        return elt['TileMatrixSet'] == config['matrixSet'];\r\n      });\r\n    }\r\n  } else {\r\n    idx = 0;\r\n  }\r\n  if (idx < 0) {\r\n    idx = 0;\r\n  }\r\n  const matrixSet =\r\n    /** @type {string} */\r\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\r\n  const matrixLimits =\r\n    /** @type {Array<Object>} */\r\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\r\n\r\n  let format = /** @type {string} */ (l['Format'][0]);\r\n  if ('format' in config) {\r\n    format = config['format'];\r\n  }\r\n  idx = l['Style'].findIndex(function (elt) {\r\n    if ('style' in config) {\r\n      return elt['Title'] == config['style'];\r\n    }\r\n    return elt['isDefault'];\r\n  });\r\n  if (idx < 0) {\r\n    idx = 0;\r\n  }\r\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\r\n\r\n  const dimensions = {};\r\n  if ('Dimension' in l) {\r\n    l['Dimension'].forEach(function (elt, index, array) {\r\n      const key = elt['Identifier'];\r\n      let value = elt['Default'];\r\n      if (value === undefined) {\r\n        value = elt['Value'][0];\r\n      }\r\n      dimensions[key] = value;\r\n    });\r\n  }\r\n\r\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\r\n  const matrixSetObj = matrixSets.find(function (elt) {\r\n    return elt['Identifier'] == matrixSet;\r\n  });\r\n\r\n  let projection;\r\n  const code = matrixSetObj['SupportedCRS'];\r\n  if (code) {\r\n    projection = getProjection(code);\r\n  }\r\n  if ('projection' in config) {\r\n    const projConfig = getProjection(config['projection']);\r\n    if (projConfig) {\r\n      if (!projection || equivalent(projConfig, projection)) {\r\n        projection = projConfig;\r\n      }\r\n    }\r\n  }\r\n\r\n  let wrapX = false;\r\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\r\n\r\n  let matrix = matrixSetObj.TileMatrix[0];\r\n\r\n  // create default matrixLimit\r\n  let selectedMatrixLimit = {\r\n    MinTileCol: 0,\r\n    MinTileRow: 0,\r\n    // subtract one to end up at tile top left\r\n    MaxTileCol: matrix.MatrixWidth - 1,\r\n    MaxTileRow: matrix.MatrixHeight - 1,\r\n  };\r\n\r\n  //in case of matrix limits, use matrix limits to calculate extent\r\n  if (matrixLimits) {\r\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\r\n    const m = matrixSetObj.TileMatrix.find(\r\n      (tileMatrixValue) =>\r\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\r\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\r\n          selectedMatrixLimit.TileMatrix\r\n    );\r\n    if (m) {\r\n      matrix = m;\r\n    }\r\n  }\r\n\r\n  const resolution =\r\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\r\n  const origin = switchXY\r\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\r\n    : matrix.TopLeftCorner;\r\n  const tileSpanX = matrix.TileWidth * resolution;\r\n  const tileSpanY = matrix.TileHeight * resolution;\r\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\r\n  if (matrixSetExtent && switchXY) {\r\n    matrixSetExtent = [\r\n      matrixSetExtent[1],\r\n      matrixSetExtent[0],\r\n      matrixSetExtent[3],\r\n      matrixSetExtent[2],\r\n    ];\r\n  }\r\n  let extent = [\r\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\r\n    // add one to get proper bottom/right coordinate\r\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\r\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\r\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\r\n  ];\r\n\r\n  if (\r\n    matrixSetExtent !== undefined &&\r\n    !containsExtent(matrixSetExtent, extent)\r\n  ) {\r\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\r\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\r\n    extent = matrixSetExtent;\r\n    if (wgs84BoundingBox) {\r\n      wrapX =\r\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\r\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\r\n    } else {\r\n      const wgs84MatrixSetExtent = transformExtent(\r\n        matrixSetExtent,\r\n        matrixSetObj['SupportedCRS'],\r\n        'EPSG:4326'\r\n      );\r\n      // Ignore slight deviation from the correct x limits\r\n      wrapX =\r\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\r\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\r\n    }\r\n  }\r\n\r\n  const tileGrid = createFromCapabilitiesMatrixSet(\r\n    matrixSetObj,\r\n    extent,\r\n    matrixLimits\r\n  );\r\n\r\n  /** @type {!Array<string>} */\r\n  const urls = [];\r\n  let requestEncoding = config['requestEncoding'];\r\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\r\n\r\n  if (\r\n    'OperationsMetadata' in wmtsCap &&\r\n    'GetTile' in wmtsCap['OperationsMetadata']\r\n  ) {\r\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\r\n\r\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\r\n      if (gets[i]['Constraint']) {\r\n        const constraint = gets[i]['Constraint'].find(function (element) {\r\n          return element['name'] == 'GetEncoding';\r\n        });\r\n        const encodings = constraint['AllowedValues']['Value'];\r\n\r\n        if (requestEncoding === '') {\r\n          // requestEncoding not provided, use the first encoding from the list\r\n          requestEncoding = encodings[0];\r\n        }\r\n        if (requestEncoding === 'KVP') {\r\n          if (encodings.includes('KVP')) {\r\n            urls.push(/** @type {string} */ (gets[i]['href']));\r\n          }\r\n        } else {\r\n          break;\r\n        }\r\n      } else if (gets[i]['href']) {\r\n        requestEncoding = 'KVP';\r\n        urls.push(/** @type {string} */ (gets[i]['href']));\r\n      }\r\n    }\r\n  }\r\n  if (urls.length === 0) {\r\n    requestEncoding = 'REST';\r\n    l['ResourceURL'].forEach(function (element) {\r\n      if (element['resourceType'] === 'tile') {\r\n        format = element['format'];\r\n        urls.push(/** @type {string} */ (element['template']));\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    urls: urls,\r\n    layer: config['layer'],\r\n    matrixSet: matrixSet,\r\n    format: format,\r\n    projection: projection,\r\n    requestEncoding: requestEncoding,\r\n    tileGrid: tileGrid,\r\n    style: style,\r\n    dimensions: dimensions,\r\n    wrapX: wrapX,\r\n    crossOrigin: config['crossOrigin'],\r\n  };\r\n}\r\n", "/**\r\n * @module ol/source\r\n */\r\n\r\nimport LRUCache from './structs/LRUCache.js';\r\nimport {getIntersection} from './extent.js';\r\n\r\nexport {default as BingMaps} from './source/BingMaps.js';\r\nexport {default as CartoDB} from './source/CartoDB.js';\r\nexport {default as Cluster} from './source/Cluster.js';\r\nexport {default as DataTile} from './source/DataTile.js';\r\nexport {default as GeoTIFF} from './source/GeoTIFF.js';\r\nexport {default as IIIF} from './source/IIIF.js';\r\nexport {default as Image} from './source/Image.js';\r\nexport {default as ImageArcGISRest} from './source/ImageArcGISRest.js';\r\nexport {default as ImageCanvas} from './source/ImageCanvas.js';\r\nexport {default as ImageMapGuide} from './source/ImageMapGuide.js';\r\nexport {default as ImageStatic} from './source/ImageStatic.js';\r\nexport {default as ImageWMS} from './source/ImageWMS.js';\r\nexport {default as OSM} from './source/OSM.js';\r\nexport {default as Raster} from './source/Raster.js';\r\nexport {default as Source} from './source/Source.js';\r\nexport {default as Stamen} from './source/Stamen.js';\r\nexport {default as Tile} from './source/Tile.js';\r\nexport {default as TileArcGISRest} from './source/TileArcGISRest.js';\r\nexport {default as TileDebug} from './source/TileDebug.js';\r\nexport {default as TileImage} from './source/TileImage.js';\r\nexport {default as TileJSON} from './source/TileJSON.js';\r\nexport {default as TileWMS} from './source/TileWMS.js';\r\nexport {default as UrlTile} from './source/UrlTile.js';\r\nexport {default as UTFGrid} from './source/UTFGrid.js';\r\nexport {default as Vector} from './source/Vector.js';\r\nexport {default as VectorTile} from './source/VectorTile.js';\r\nexport {default as WMTS} from './source/WMTS.js';\r\nexport {default as XYZ} from './source/XYZ.js';\r\nexport {default as Zoomify} from './source/Zoomify.js';\r\n\r\n/**\r\n * Creates a sources function from a tile grid. This function can be used as value for the\r\n * `sources` property of the {@link module:ol/layer/Layer~Layer} subclasses that support it.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @param {function(import(\"./tilecoord.js\").TileCoord): import(\"./source/Source.js\").default} factory Source factory.\r\n * This function takes a {@link module:ol/tilecoord~TileCoord} as argument and is expected to return a\r\n * {@link module:ol/source/Source~Source}. **Note**: The returned sources should have a tile grid with\r\n * a limited set of resolutions, matching the resolution range of a single zoom level of the pyramid\r\n * `tileGrid` that `sourcesFromTileGrid` was called with.\r\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./source/Source.js\").default>} Sources function.\r\n * @api\r\n */\r\nexport function sourcesFromTileGrid(tileGrid, factory) {\r\n  const sourceCache = new LRUCache(32);\r\n  const tileGridExtent = tileGrid.getExtent();\r\n  return function (extent, resolution) {\r\n    sourceCache.expireCache();\r\n    if (tileGridExtent) {\r\n      extent = getIntersection(tileGridExtent, extent);\r\n    }\r\n    const z = tileGrid.getZForResolution(resolution);\r\n    const wantedSources = [];\r\n    tileGrid.forEachTileCoord(extent, z, (tileCoord) => {\r\n      const key = tileCoord.toString();\r\n      if (!sourceCache.containsKey(key)) {\r\n        const source = factory(tileCoord);\r\n        sourceCache.set(key, source);\r\n      }\r\n      wantedSources.push(sourceCache.get(key));\r\n    });\r\n    return wantedSources;\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": ["getAttribute", "startIndex", "findTagsByName", "scale", "transform", "tileGrid", "extent", "geometry", "Tile_default", "z", "x", "y", "DataTile_default", "next", "buffer", "buffer", "buffer", "array", "isNaN", "buffer", "findTagsByName", "getAttribute", "buffer", "urlMod", "http", "https", "values", "error", "DataTile_default", "values", "scale", "size", "Image_default", "Image_default", "ImageCanvas_default", "Image_default", "scale", "Image_default", "Image_default", "scale", "buffer", "scale", "CustomTile", "jsonp", "Tile_default", "transform"]
}
