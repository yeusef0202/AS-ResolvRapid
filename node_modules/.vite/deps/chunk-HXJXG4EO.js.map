{
  "version": 3,
  "sources": ["../../ol/style/Image.js", "../../ol/colorlike.js", "../../ol/css.js", "../../ol/render/canvas.js", "../../ol/style/RegularShape.js", "../../ol/style/Circle.js", "../../ol/style/Fill.js", "../../ol/style/IconImageCache.js", "../../ol/style/IconImage.js", "../../ol/style/Icon.js", "../../ol/style/Stroke.js", "../../ol/style/Style.js", "../../ol/style/Text.js"],
  "sourcesContent": ["/**\r\n * @module ol/style/Image\r\n */\r\nimport {abstract} from '../util.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} opacity Opacity.\r\n * @property {boolean} rotateWithView If the image should get rotated with the view.\r\n * @property {number} rotation Rotation.\r\n * @property {number|import(\"../size.js\").Size} scale Scale.\r\n * @property {Array<number>} displacement Displacement.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\r\n\r\n/**\r\n * @classdesc\r\n * A base class used for creating subclasses and not instantiated in\r\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\r\n * {@link module:ol/style/RegularShape~RegularShape}.\r\n * @abstract\r\n * @api\r\n */\r\nclass ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.opacity_ = options.opacity;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.displacement_ = options.displacement;\r\n\r\n    /**\r\n     * @private\r\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\r\n     */\r\n    this.declutterMode_ = options.declutterMode;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {ImageStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new ImageStyle({\r\n      opacity: this.getOpacity(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer opacity.\r\n   * @return {number} Opacity.\r\n   * @api\r\n   */\r\n  getOpacity() {\r\n    return this.opacity_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the symbolizer rotates with the map.\r\n   * @return {boolean} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the symoblizer rotation.\r\n   * @return {number} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale.\r\n   * @return {number|import(\"../size.js\").Size} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the displacement of the shape\r\n   * @return {Array<number>} Shape's center displacement\r\n   * @api\r\n   */\r\n  getDisplacement() {\r\n    return this.displacement_;\r\n  }\r\n\r\n  /**\r\n   * Get the declutter mode of the shape\r\n   * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\r\n   * @api\r\n   */\r\n  getDeclutterMode() {\r\n    return this.declutterMode_;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Anchor.\r\n   */\r\n  getAnchor() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image element for the symbolizer.\r\n   * @abstract\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\r\n   */\r\n  getImage(pixelRatio) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @abstract\r\n   * @return {Array<number>} Origin.\r\n   */\r\n  getOrigin() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @abstract\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Set the displacement.\r\n   *\r\n   * @param {Array<number>} displacement Displacement.\r\n   * @api\r\n   */\r\n  setDisplacement(displacement) {\r\n    this.displacement_ = displacement;\r\n  }\r\n\r\n  /**\r\n   * Set the opacity.\r\n   *\r\n   * @param {number} opacity Opacity.\r\n   * @api\r\n   */\r\n  setOpacity(opacity) {\r\n    this.opacity_ = opacity;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the style with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    abstract();\r\n  }\r\n}\r\n\r\nexport default ImageStyle;\r\n", "/**\r\n * @module ol/colorlike\r\n */\r\nimport {toString} from './color.js';\r\n\r\n/**\r\n * A type accepted by CanvasRenderingContext2D.fillStyle\r\n * or CanvasRenderingContext2D.strokeStyle.\r\n * Represents a color, pattern, or gradient. The origin for patterns and\r\n * gradients as fill style is an increment of 512 css pixels from map coordinate\r\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\r\n * must be a factor of two (2, 4, 8, ..., 512).\r\n *\r\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\r\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\r\n * @api\r\n */\r\nexport function asColorLike(color) {\r\n  if (Array.isArray(color)) {\r\n    return toString(color);\r\n  }\r\n  return color;\r\n}\r\n", "/**\r\n * @module ol/css\r\n */\r\n\r\n/**\r\n * @typedef {Object} FontParameters\r\n * @property {string} style Style.\r\n * @property {string} variant Variant.\r\n * @property {string} weight Weight.\r\n * @property {string} size Size.\r\n * @property {string} lineHeight LineHeight.\r\n * @property {string} family Family.\r\n * @property {Array<string>} families Families.\r\n */\r\n\r\n/**\r\n * The CSS class for hidden feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_HIDDEN = 'ol-hidden';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them selectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_SELECTABLE = 'ol-selectable';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements to have them unselectable.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\r\n\r\n/**\r\n * The CSS class for unsupported feature.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\r\n\r\n/**\r\n * The CSS class for controls.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_CONTROL = 'ol-control';\r\n\r\n/**\r\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\r\n * to those elements which usually can be expanded.\r\n *\r\n * @const\r\n * @type {string}\r\n */\r\nexport const CLASS_COLLAPSED = 'ol-collapsed';\r\n\r\n/**\r\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\r\n * @type {RegExp}\r\n */\r\nconst fontRegEx = new RegExp(\r\n  [\r\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\r\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\r\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\r\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\r\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\r\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$',\r\n  ].join(''),\r\n  'i'\r\n);\r\nconst fontRegExMatchIndex = [\r\n  'style',\r\n  'variant',\r\n  'weight',\r\n  'size',\r\n  'lineHeight',\r\n  'family',\r\n];\r\n\r\n/**\r\n * Get the list of font families from a font spec.  Note that this doesn't work\r\n * for font families that have commas in them.\r\n * @param {string} fontSpec The CSS font property.\r\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\r\n */\r\nexport const getFontParameters = function (fontSpec) {\r\n  const match = fontSpec.match(fontRegEx);\r\n  if (!match) {\r\n    return null;\r\n  }\r\n  const style = /** @type {FontParameters} */ ({\r\n    lineHeight: 'normal',\r\n    size: '1.2em',\r\n    style: 'normal',\r\n    weight: 'normal',\r\n    variant: 'normal',\r\n  });\r\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\r\n    const value = match[i + 1];\r\n    if (value !== undefined) {\r\n      style[fontRegExMatchIndex[i]] = value;\r\n    }\r\n  }\r\n  style.families = style.family.split(/,\\s?/);\r\n  return style;\r\n};\r\n", "/**\r\n * @module ol/render/canvas\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\r\nimport {clear} from '../obj.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {getFontParameters} from '../css.js';\r\n\r\n/**\r\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillState\r\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\r\n */\r\n\r\n/**\r\n * @typedef Label\r\n * @property {number} width Width.\r\n * @property {number} height Height.\r\n * @property {Array<string|number>} contextInstructions ContextInstructions.\r\n */\r\n\r\n/**\r\n * @typedef {Object} FillStrokeState\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\r\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\r\n * @property {Array<number>} currentLineDash Current LineDash.\r\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\r\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\r\n * @property {number} [currentLineWidth] Current LineWidth.\r\n * @property {number} [currentMiterLimit] Current MiterLimit.\r\n * @property {number} [lastStroke] Last stroke.\r\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {CanvasLineCap} [lineCap] LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} [lineDashOffset] LineDashOffset.\r\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\r\n * @property {number} [lineWidth] LineWidth.\r\n * @property {number} [miterLimit] MiterLimit.\r\n */\r\n\r\n/**\r\n * @typedef {Object} StrokeState\r\n * @property {CanvasLineCap} lineCap LineCap.\r\n * @property {Array<number>} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} lineWidth LineWidth.\r\n * @property {number} miterLimit MiterLimit.\r\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\r\n */\r\n\r\n/**\r\n * @typedef {Object} TextState\r\n * @property {string} font Font.\r\n * @property {CanvasTextAlign} [textAlign] TextAlign.\r\n * @property {number} [repeat] Repeat.\r\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\r\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\r\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\r\n * @property {number} [maxAngle] MaxAngle.\r\n * @property {boolean} [overflow] Overflow.\r\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\r\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\r\n * @property {import(\"../size.js\").Size} [scale] Scale.\r\n * @property {Array<number>} [padding] Padding.\r\n */\r\n\r\n/**\r\n * @typedef {Object} SerializableInstructions\r\n * @property {Array<*>} instructions The rendering instructions.\r\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\r\n * @property {Array<number>} coordinates The array of all coordinates.\r\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\r\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\r\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\r\n */\r\n\r\n/**\r\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nexport const defaultFont = '10px sans-serif';\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultFillStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineCap}\r\n */\r\nexport const defaultLineCap = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultLineDash = [];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineDashOffset = 0;\r\n\r\n/**\r\n * @const\r\n * @type {CanvasLineJoin}\r\n */\r\nexport const defaultLineJoin = 'round';\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultMiterLimit = 10;\r\n\r\n/**\r\n * @const\r\n * @type {import(\"../colorlike.js\").ColorLike}\r\n */\r\nexport const defaultStrokeStyle = '#000';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextAlign}\r\n */\r\nexport const defaultTextAlign = 'center';\r\n\r\n/**\r\n * @const\r\n * @type {CanvasTextBaseline}\r\n */\r\nexport const defaultTextBaseline = 'middle';\r\n\r\n/**\r\n * @const\r\n * @type {Array<number>}\r\n */\r\nexport const defaultPadding = [0, 0, 0, 0];\r\n\r\n/**\r\n * @const\r\n * @type {number}\r\n */\r\nexport const defaultLineWidth = 1;\r\n\r\n/**\r\n * @type {BaseObject}\r\n */\r\nexport const checkedFonts = new BaseObject();\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet measureContext = null;\r\n\r\n/**\r\n * @type {string}\r\n */\r\nlet measureFont;\r\n\r\n/**\r\n * @type {!Object<string, number>}\r\n */\r\nexport const textHeights = {};\r\n\r\n/**\r\n * Clears the label cache when a font becomes available.\r\n * @param {string} fontSpec CSS font spec.\r\n */\r\nexport const registerFont = (function () {\r\n  const retries = 100;\r\n  const size = '32px ';\r\n  const referenceFonts = ['monospace', 'serif'];\r\n  const len = referenceFonts.length;\r\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\r\n  let interval, referenceWidth;\r\n\r\n  /**\r\n   * @param {string} fontStyle Css font-style\r\n   * @param {string} fontWeight Css font-weight\r\n   * @param {*} fontFamily Css font-family\r\n   * @return {boolean} Font with style and weight is available\r\n   */\r\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\r\n    let available = true;\r\n    for (let i = 0; i < len; ++i) {\r\n      const referenceFont = referenceFonts[i];\r\n      referenceWidth = measureTextWidth(\r\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\r\n        text\r\n      );\r\n      if (fontFamily != referenceFont) {\r\n        const width = measureTextWidth(\r\n          fontStyle +\r\n            ' ' +\r\n            fontWeight +\r\n            ' ' +\r\n            size +\r\n            fontFamily +\r\n            ',' +\r\n            referenceFont,\r\n          text\r\n        );\r\n        // If width and referenceWidth are the same, then the fallback was used\r\n        // instead of the font we wanted, so the font is not available.\r\n        available = available && width != referenceWidth;\r\n      }\r\n    }\r\n    if (available) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function check() {\r\n    let done = true;\r\n    const fonts = checkedFonts.getKeys();\r\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\r\n      const font = fonts[i];\r\n      if (checkedFonts.get(font) < retries) {\r\n        if (isAvailable.apply(this, font.split('\\n'))) {\r\n          clear(textHeights);\r\n          // Make sure that loaded fonts are picked up by Safari\r\n          measureContext = null;\r\n          measureFont = undefined;\r\n          checkedFonts.set(font, retries);\r\n        } else {\r\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\r\n          done = false;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      clearInterval(interval);\r\n      interval = undefined;\r\n    }\r\n  }\r\n\r\n  return function (fontSpec) {\r\n    const font = getFontParameters(fontSpec);\r\n    if (!font) {\r\n      return;\r\n    }\r\n    const families = font.families;\r\n    for (let i = 0, ii = families.length; i < ii; ++i) {\r\n      const family = families[i];\r\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\r\n      if (checkedFonts.get(key) === undefined) {\r\n        checkedFonts.set(key, retries, true);\r\n        if (!isAvailable(font.style, font.weight, family)) {\r\n          checkedFonts.set(key, 0, true);\r\n          if (interval === undefined) {\r\n            interval = setInterval(check, 32);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font to use for measuring.\r\n * @return {import(\"../size.js\").Size} Measurement.\r\n */\r\nexport const measureTextHeight = (function () {\r\n  /**\r\n   * @type {HTMLDivElement}\r\n   */\r\n  let measureElement;\r\n  return function (fontSpec) {\r\n    let height = textHeights[fontSpec];\r\n    if (height == undefined) {\r\n      if (WORKER_OFFSCREEN_CANVAS) {\r\n        const font = getFontParameters(fontSpec);\r\n        const metrics = measureText(fontSpec, 'Žg');\r\n        const lineHeight = isNaN(Number(font.lineHeight))\r\n          ? 1.2\r\n          : Number(font.lineHeight);\r\n        height =\r\n          lineHeight *\r\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\r\n      } else {\r\n        if (!measureElement) {\r\n          measureElement = document.createElement('div');\r\n          measureElement.innerHTML = 'M';\r\n          measureElement.style.minHeight = '0';\r\n          measureElement.style.maxHeight = 'none';\r\n          measureElement.style.height = 'auto';\r\n          measureElement.style.padding = '0';\r\n          measureElement.style.border = 'none';\r\n          measureElement.style.position = 'absolute';\r\n          measureElement.style.display = 'block';\r\n          measureElement.style.left = '-99999px';\r\n        }\r\n        measureElement.style.font = fontSpec;\r\n        document.body.appendChild(measureElement);\r\n        height = measureElement.offsetHeight;\r\n        document.body.removeChild(measureElement);\r\n      }\r\n      textHeights[fontSpec] = height;\r\n    }\r\n    return height;\r\n  };\r\n})();\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {TextMetrics} Text metrics.\r\n */\r\nfunction measureText(font, text) {\r\n  if (!measureContext) {\r\n    measureContext = createCanvasContext2D(1, 1);\r\n  }\r\n  if (font != measureFont) {\r\n    measureContext.font = font;\r\n    measureFont = measureContext.font;\r\n  }\r\n  return measureContext.measureText(text);\r\n}\r\n\r\n/**\r\n * @param {string} font Font.\r\n * @param {string} text Text.\r\n * @return {number} Width.\r\n */\r\nexport function measureTextWidth(font, text) {\r\n  return measureText(font, text).width;\r\n}\r\n\r\n/**\r\n * Measure text width using a cache.\r\n * @param {string} font The font.\r\n * @param {string} text The text to measure.\r\n * @param {Object<string, number>} cache A lookup of cached widths by text.\r\n * @return {number} The text width.\r\n */\r\nexport function measureAndCacheTextWidth(font, text, cache) {\r\n  if (text in cache) {\r\n    return cache[text];\r\n  }\r\n  const width = text\r\n    .split('\\n')\r\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\r\n  cache[text] = width;\r\n  return width;\r\n}\r\n\r\n/**\r\n * @param {TextState} baseStyle Base style.\r\n * @param {Array<string>} chunks Text chunks to measure.\r\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\r\n */\r\nexport function getTextDimensions(baseStyle, chunks) {\r\n  const widths = [];\r\n  const heights = [];\r\n  const lineWidths = [];\r\n  let width = 0;\r\n  let lineWidth = 0;\r\n  let height = 0;\r\n  let lineHeight = 0;\r\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\r\n    const text = chunks[i];\r\n    if (text === '\\n' || i === ii) {\r\n      width = Math.max(width, lineWidth);\r\n      lineWidths.push(lineWidth);\r\n      lineWidth = 0;\r\n      height += lineHeight;\r\n      continue;\r\n    }\r\n    const font = chunks[i + 1] || baseStyle.font;\r\n    const currentWidth = measureTextWidth(font, text);\r\n    widths.push(currentWidth);\r\n    lineWidth += currentWidth;\r\n    const currentHeight = measureTextHeight(font);\r\n    heights.push(currentHeight);\r\n    lineHeight = Math.max(lineHeight, currentHeight);\r\n  }\r\n  return {width, height, widths, heights, lineWidths};\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {number} rotation Rotation.\r\n * @param {number} offsetX X offset.\r\n * @param {number} offsetY Y offset.\r\n */\r\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\r\n  if (rotation !== 0) {\r\n    context.translate(offsetX, offsetY);\r\n    context.rotate(rotation);\r\n    context.translate(-offsetX, -offsetY);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} context Context.\r\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\r\n * @param {number} opacity Opacity.\r\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\r\n * @param {number} originX Origin X.\r\n * @param {number} originY Origin Y.\r\n * @param {number} w Width.\r\n * @param {number} h Height.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {import(\"../size.js\").Size} scale Scale.\r\n */\r\nexport function drawImageOrLabel(\r\n  context,\r\n  transform,\r\n  opacity,\r\n  labelOrImage,\r\n  originX,\r\n  originY,\r\n  w,\r\n  h,\r\n  x,\r\n  y,\r\n  scale\r\n) {\r\n  context.save();\r\n\r\n  if (opacity !== 1) {\r\n    context.globalAlpha *= opacity;\r\n  }\r\n  if (transform) {\r\n    context.setTransform.apply(context, transform);\r\n  }\r\n\r\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\r\n    // label\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\r\n  } else if (scale[0] < 0 || scale[1] < 0) {\r\n    // flipped image\r\n    context.translate(x, y);\r\n    context.scale(scale[0], scale[1]);\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      0,\r\n      0,\r\n      w,\r\n      h\r\n    );\r\n  } else {\r\n    // if image not flipped translate and scale can be avoided\r\n    context.drawImage(\r\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\r\n        labelOrImage\r\n      ),\r\n      originX,\r\n      originY,\r\n      w,\r\n      h,\r\n      x,\r\n      y,\r\n      w * scale[0],\r\n      h * scale[1]\r\n    );\r\n  }\r\n\r\n  context.restore();\r\n}\r\n\r\n/**\r\n * @param {Label} label Label.\r\n * @param {CanvasRenderingContext2D} context Context.\r\n */\r\nfunction executeLabelInstructions(label, context) {\r\n  const contextInstructions = label.contextInstructions;\r\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\r\n    if (Array.isArray(contextInstructions[i + 1])) {\r\n      context[contextInstructions[i]].apply(\r\n        context,\r\n        contextInstructions[i + 1]\r\n      );\r\n    } else {\r\n      context[contextInstructions[i]] = contextInstructions[i + 1];\r\n    }\r\n  }\r\n}\r\n", "/**\r\n * @module ol/style/RegularShape\r\n */\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {asColorLike} from '../colorlike.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {\r\n  defaultFillStyle,\r\n  defaultLineJoin,\r\n  defaultLineWidth,\r\n  defaultMiterLimit,\r\n  defaultStrokeStyle,\r\n} from '../render/canvas.js';\r\n\r\n/**\r\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\r\n * is the number of sides.\r\n * @property {number} [radius] Radius of a regular polygon.\r\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\r\n * @property {number} [radius2] Second radius of a star.\r\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\r\n * Positive values will shift the shape right and up.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\r\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @typedef {Object} RenderOptions\r\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\r\n * @property {number} strokeWidth StrokeWidth.\r\n * @property {number} size Size.\r\n * @property {Array<number>|null} lineDash LineDash.\r\n * @property {number} lineDashOffset LineDashOffset.\r\n * @property {CanvasLineJoin} lineJoin LineJoin.\r\n * @property {number} miterLimit MiterLimit.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set regular shape style for vector features. The resulting shape will be\r\n * a regular polygon when `radius` is provided, or a star when `radius1` and\r\n * `radius2` are provided.\r\n * @api\r\n */\r\nclass RegularShape extends ImageStyle {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: 1,\r\n      rotateWithView: rotateWithView,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvas_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.hitDetectionCanvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.points_ = options.points;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.radius_ =\r\n      options.radius !== undefined ? options.radius : options.radius1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.radius2_ = options.radius2;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderOptions}\r\n     */\r\n    this.renderOptions_ = null;\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {RegularShape} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new RegularShape({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      points: this.getPoints(),\r\n      radius: this.getRadius(),\r\n      radius2: this.getRadius2(),\r\n      angle: this.getAngle(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   */\r\n  getAnchor() {\r\n    const size = this.size_;\r\n    if (!size) {\r\n      return null;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      size[0] / 2 - displacement[0] / scale[0],\r\n      size[1] / 2 + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the angle used in generating the shape.\r\n   * @return {number} Shape's rotation in radians.\r\n   * @api\r\n   */\r\n  getAngle() {\r\n    return this.angle_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the shape.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.createHitDetectionCanvas_(this.renderOptions_);\r\n    }\r\n    return this.hitDetectionCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   */\r\n  getImage(pixelRatio) {\r\n    let image = this.canvas_[pixelRatio];\r\n    if (!image) {\r\n      const renderOptions = this.renderOptions_;\r\n      const context = createCanvasContext2D(\r\n        renderOptions.size * pixelRatio,\r\n        renderOptions.size * pixelRatio\r\n      );\r\n      this.draw_(renderOptions, context, pixelRatio);\r\n\r\n      image = context.canvas;\r\n      this.canvas_[pixelRatio] = image;\r\n    }\r\n    return image;\r\n  }\r\n\r\n  /**\r\n   * Get the image pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Pixel ratio.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return ImageState.LOADED;\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   */\r\n  getOrigin() {\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the number of points for generating the shape.\r\n   * @return {number} Number of points for stars and regular polygons.\r\n   * @api\r\n   */\r\n  getPoints() {\r\n    return this.points_;\r\n  }\r\n\r\n  /**\r\n   * Get the (primary) radius for the shape.\r\n   * @return {number} Radius.\r\n   * @api\r\n   */\r\n  getRadius() {\r\n    return this.radius_;\r\n  }\r\n\r\n  /**\r\n   * Get the secondary radius for the shape.\r\n   * @return {number|undefined} Radius2.\r\n   * @api\r\n   */\r\n  getRadius2() {\r\n    return this.radius2_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the symbolizer (in pixels).\r\n   * @return {import(\"../size.js\").Size} Size.\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the shape.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {}\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {}\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {}\r\n\r\n  /**\r\n   * Calculate additional canvas size needed for the miter.\r\n   * @param {string} lineJoin Line join\r\n   * @param {number} strokeWidth Stroke width\r\n   * @param {number} miterLimit Miter limit\r\n   * @return {number} Additional canvas size needed\r\n   * @private\r\n   */\r\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\r\n    if (\r\n      strokeWidth === 0 ||\r\n      this.points_ === Infinity ||\r\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\r\n    ) {\r\n      return strokeWidth;\r\n    }\r\n    // m  | ^\r\n    // i  | |\\                  .\r\n    // t >|  #\\\r\n    // e  | |\\ \\              .\r\n    // r      \\s\\\r\n    //      |  \\t\\          .                 .\r\n    //          \\r\\                      .   .\r\n    //      |    \\o\\      .          .  . . .\r\n    //          e \\k\\            .  .    . .\r\n    //      |      \\e\\  .    .  .       . .\r\n    //       d      \\ \\  .  .          . .\r\n    //      | _ _a_ _\\#  .            . .\r\n    //   r1          / `             . .\r\n    //      |                       . .\r\n    //       b     /               . .\r\n    //      |                     . .\r\n    //           / r2            . .\r\n    //      |                        .   .\r\n    //         /                           .   .\r\n    //      |α                                   .   .\r\n    //       /                                         .   .\r\n    //      ° center\r\n    let r1 = this.radius_;\r\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\r\n    if (r1 < r2) {\r\n      const tmp = r1;\r\n      r1 = r2;\r\n      r2 = tmp;\r\n    }\r\n    const points =\r\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\r\n    const alpha = (2 * Math.PI) / points;\r\n    const a = r2 * Math.sin(alpha);\r\n    const b = Math.sqrt(r2 * r2 - a * a);\r\n    const d = r1 - b;\r\n    const e = Math.sqrt(a * a + d * d);\r\n    const miterRatio = e / a;\r\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\r\n      return miterRatio * strokeWidth;\r\n    }\r\n    // Calculate the distnce from center to the stroke corner where\r\n    // it was cut short because of the miter limit.\r\n    //              l\r\n    //        ----+---- <= distance from center to here is maxr\r\n    //       /####|k ##\\\r\n    //      /#####^#####\\\r\n    //     /#### /+\\# s #\\\r\n    //    /### h/+++\\# t #\\\r\n    //   /### t/+++++\\# r #\\\r\n    //  /### a/+++++++\\# o #\\\r\n    // /### p/++ fill +\\# k #\\\r\n    ///#### /+++++^+++++\\# e #\\\r\n    //#####/+++++/+\\+++++\\#####\\\r\n    const k = strokeWidth / 2 / miterRatio;\r\n    const l = (strokeWidth / 2) * (d / e);\r\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\r\n    const bevelAdd = maxr - r1;\r\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\r\n      return bevelAdd * 2;\r\n    }\r\n    // If outer miter is over the miter limit the inner miter may reach through the\r\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\r\n    const aa = r1 * Math.sin(alpha);\r\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\r\n    const dd = r2 - bb;\r\n    const ee = Math.sqrt(aa * aa + dd * dd);\r\n    const innerMiterRatio = ee / aa;\r\n    if (innerMiterRatio <= miterLimit) {\r\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\r\n      return 2 * Math.max(bevelAdd, innerLength);\r\n    }\r\n    return bevelAdd * 2;\r\n  }\r\n\r\n  /**\r\n   * @return {RenderOptions}  The render options\r\n   * @protected\r\n   */\r\n  createRenderOptions() {\r\n    let lineJoin = defaultLineJoin;\r\n    let miterLimit = 0;\r\n    let lineDash = null;\r\n    let lineDashOffset = 0;\r\n    let strokeStyle;\r\n    let strokeWidth = 0;\r\n\r\n    if (this.stroke_) {\r\n      strokeStyle = this.stroke_.getColor();\r\n      if (strokeStyle === null) {\r\n        strokeStyle = defaultStrokeStyle;\r\n      }\r\n      strokeStyle = asColorLike(strokeStyle);\r\n      strokeWidth = this.stroke_.getWidth();\r\n      if (strokeWidth === undefined) {\r\n        strokeWidth = defaultLineWidth;\r\n      }\r\n      lineDash = this.stroke_.getLineDash();\r\n      lineDashOffset = this.stroke_.getLineDashOffset();\r\n      lineJoin = this.stroke_.getLineJoin();\r\n      if (lineJoin === undefined) {\r\n        lineJoin = defaultLineJoin;\r\n      }\r\n      miterLimit = this.stroke_.getMiterLimit();\r\n      if (miterLimit === undefined) {\r\n        miterLimit = defaultMiterLimit;\r\n      }\r\n    }\r\n\r\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\r\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\r\n    const size = Math.ceil(2 * maxRadius + add);\r\n\r\n    return {\r\n      strokeStyle: strokeStyle,\r\n      strokeWidth: strokeWidth,\r\n      size: size,\r\n      lineDash: lineDash,\r\n      lineDashOffset: lineDashOffset,\r\n      lineJoin: lineJoin,\r\n      miterLimit: miterLimit,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  render() {\r\n    this.renderOptions_ = this.createRenderOptions();\r\n    const size = this.renderOptions_.size;\r\n    this.canvas_ = {};\r\n    this.size_ = [size, size];\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The rendering context.\r\n   * @param {number} pixelRatio The pixel ratio.\r\n   */\r\n  draw_(renderOptions, context, pixelRatio) {\r\n    context.scale(pixelRatio, pixelRatio);\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n      if (color === null) {\r\n        color = defaultFillStyle;\r\n      }\r\n      context.fillStyle = asColorLike(color);\r\n      context.fill();\r\n    }\r\n    if (this.stroke_) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   */\r\n  createHitDetectionCanvas_(renderOptions) {\r\n    if (this.fill_) {\r\n      let color = this.fill_.getColor();\r\n\r\n      // determine if fill is transparent (or pattern or gradient)\r\n      let opacity = 0;\r\n      if (typeof color === 'string') {\r\n        color = asArray(color);\r\n      }\r\n      if (color === null) {\r\n        opacity = 1;\r\n      } else if (Array.isArray(color)) {\r\n        opacity = color.length === 4 ? color[3] : 1;\r\n      }\r\n      if (opacity === 0) {\r\n        // if a transparent fill style is set, create an extra hit-detection image\r\n        // with a default fill style\r\n        const context = createCanvasContext2D(\r\n          renderOptions.size,\r\n          renderOptions.size\r\n        );\r\n        this.hitDetectionCanvas_ = context.canvas;\r\n\r\n        this.drawHitDetectionCanvas_(renderOptions, context);\r\n      }\r\n    }\r\n    if (!this.hitDetectionCanvas_) {\r\n      this.hitDetectionCanvas_ = this.getImage(1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {CanvasRenderingContext2D} context The context to draw in.\r\n   */\r\n  createPath_(context) {\r\n    let points = this.points_;\r\n    const radius = this.radius_;\r\n    if (points === Infinity) {\r\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\r\n    } else {\r\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\r\n      if (this.radius2_ !== undefined) {\r\n        points *= 2;\r\n      }\r\n      const startAngle = this.angle_ - Math.PI / 2;\r\n      const step = (2 * Math.PI) / points;\r\n      for (let i = 0; i < points; i++) {\r\n        const angle0 = startAngle + i * step;\r\n        const radiusC = i % 2 === 0 ? radius : radius2;\r\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\r\n      }\r\n      context.closePath();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {RenderOptions} renderOptions Render options.\r\n   * @param {CanvasRenderingContext2D} context The context.\r\n   */\r\n  drawHitDetectionCanvas_(renderOptions, context) {\r\n    // set origin to canvas center\r\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\r\n\r\n    this.createPath_(context);\r\n\r\n    context.fillStyle = defaultFillStyle;\r\n    context.fill();\r\n    if (this.stroke_) {\r\n      context.strokeStyle = renderOptions.strokeStyle;\r\n      context.lineWidth = renderOptions.strokeWidth;\r\n      if (renderOptions.lineDash) {\r\n        context.setLineDash(renderOptions.lineDash);\r\n        context.lineDashOffset = renderOptions.lineDashOffset;\r\n      }\r\n      context.lineJoin = renderOptions.lineJoin;\r\n      context.miterLimit = renderOptions.miterLimit;\r\n      context.stroke();\r\n    }\r\n  }\r\n}\r\n\r\nexport default RegularShape;\r\n", "/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from './RegularShape.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {Array<number>} [displacement=[0,0]] displacement\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\r\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\r\n * @property {number} [rotation=0] Rotation in radians\r\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\r\n * (meaningful only when used in conjunction with a two dimensional scale).\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {radius: 5};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      stroke: options.stroke,\r\n      scale: options.scale !== undefined ? options.scale : 1,\r\n      rotation: options.rotation !== undefined ? options.rotation : 0,\r\n      rotateWithView:\r\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      declutterMode: options.declutterMode,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {CircleStyle} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n   * Set the circle radius.\r\n   *\r\n   * @param {number} radius Circle radius.\r\n   * @api\r\n   */\r\n  setRadius(radius) {\r\n    this.radius_ = radius;\r\n    this.render();\r\n  }\r\n}\r\n\r\nexport default CircleStyle;\r\n", "/**\r\n * @module ol/style/Fill\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set fill style for vector features.\r\n * @api\r\n */\r\nclass Fill {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\r\n   * @return {Fill} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Fill({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the fill color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n}\r\n\r\nexport default Fill;\r\n", "/**\r\n * @module ol/style/IconImageCache\r\n */\r\nimport {asString} from '../color.js';\r\n\r\n/**\r\n * @classdesc\r\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\r\n */\r\nclass IconImageCache {\r\n  constructor() {\r\n    /**\r\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\r\n     * @private\r\n     */\r\n    this.cache_ = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.cacheSize_ = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.maxCacheSize_ = 32;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.cache_ = {};\r\n    this.cacheSize_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.cacheSize_ > this.maxCacheSize_;\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  expire() {\r\n    if (this.canExpireCache()) {\r\n      let i = 0;\r\n      for (const key in this.cache_) {\r\n        const iconImage = this.cache_[key];\r\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\r\n          delete this.cache_[key];\r\n          --this.cacheSize_;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   * @return {import(\"./IconImage.js\").default} Icon image.\r\n   */\r\n  get(src, crossOrigin, color) {\r\n    const key = getKey(src, crossOrigin, color);\r\n    return key in this.cache_ ? this.cache_[key] : null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} src Src.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\r\n   */\r\n  set(src, crossOrigin, color, iconImage) {\r\n    const key = getKey(src, crossOrigin, color);\r\n    this.cache_[key] = iconImage;\r\n    ++this.cacheSize_;\r\n  }\r\n\r\n  /**\r\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\r\n   * your map uses more than 32 different icon images and you are not caching icon\r\n   * styles on the application level.\r\n   * @param {number} maxCacheSize Cache max size.\r\n   * @api\r\n   */\r\n  setSize(maxCacheSize) {\r\n    this.maxCacheSize_ = maxCacheSize;\r\n    this.expire();\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} src Src.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../color.js\").Color} color Color.\r\n * @return {string} Cache key.\r\n */\r\nfunction getKey(src, crossOrigin, color) {\r\n  const colorString = color ? asString(color) : 'null';\r\n  return crossOrigin + ':' + src + ':' + colorString;\r\n}\r\n\r\nexport default IconImageCache;\r\n\r\n/**\r\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\r\n * {@link module:ol/style/Icon~Icon} images.\r\n * @api\r\n */\r\nexport const shared = new IconImageCache();\r\n", "/**\r\n * @module ol/style/IconImage\r\n */\r\n\r\nimport EventTarget from '../events/Target.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport {asString} from '../color.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {shared as iconImageCache} from './IconImageCache.js';\r\nimport {listenImage} from '../Image.js';\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet taintedTestContext = null;\r\n\r\nclass IconImage extends EventTarget {\r\n  /**\r\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\r\n   * @param {string|undefined} src Src.\r\n   * @param {import(\"../size.js\").Size} size Size.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\r\n   * @param {import(\"../color.js\").Color} color Color.\r\n   */\r\n  constructor(image, src, size, crossOrigin, imageState, color) {\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    this.hitDetectionImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    this.image_ = image;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|null}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<number, HTMLCanvasElement>}\r\n     */\r\n    this.canvas_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = color;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */\r\n    this.unlisten_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */\r\n    this.imageState_ = imageState;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = size;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    this.tainted_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  initializeImage_() {\r\n    this.image_ = new Image();\r\n    if (this.crossOrigin_ !== null) {\r\n      this.image_.crossOrigin = this.crossOrigin_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {boolean} The image canvas is tainted.\r\n   */\r\n  isTainted_() {\r\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\r\n      if (!taintedTestContext) {\r\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\r\n          willReadFrequently: true,\r\n        });\r\n      }\r\n      taintedTestContext.drawImage(this.image_, 0, 0);\r\n      try {\r\n        taintedTestContext.getImageData(0, 0, 1, 1);\r\n        this.tainted_ = false;\r\n      } catch (e) {\r\n        taintedTestContext = null;\r\n        this.tainted_ = true;\r\n      }\r\n    }\r\n    return this.tainted_ === true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  dispatchChangeEvent_() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.imageState_ = ImageState.ERROR;\r\n    this.unlistenImage_();\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    this.imageState_ = ImageState.LOADED;\r\n    if (this.size_) {\r\n      this.image_.width = this.size_[0];\r\n      this.image_.height = this.size_[1];\r\n    } else {\r\n      this.size_ = [this.image_.width, this.image_.height];\r\n    }\r\n    this.unlistenImage_();\r\n    this.dispatchChangeEvent_();\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\r\n   */\r\n  getImage(pixelRatio) {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Image or Canvas element.\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    this.replaceColor_(pixelRatio);\r\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return this.imageState_;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n    if (!this.hitDetectionImage_) {\r\n      if (this.isTainted_()) {\r\n        const width = this.size_[0];\r\n        const height = this.size_[1];\r\n        const context = createCanvasContext2D(width, height);\r\n        context.fillRect(0, 0, width, height);\r\n        this.hitDetectionImage_ = context.canvas;\r\n      } else {\r\n        this.hitDetectionImage_ = this.image_;\r\n      }\r\n    }\r\n    return this.hitDetectionImage_;\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getSize() {\r\n    return this.size_;\r\n  }\r\n\r\n  /**\r\n   * @return {string|undefined} Image src.\r\n   */\r\n  getSrc() {\r\n    return this.src_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.imageState_ !== ImageState.IDLE) {\r\n      return;\r\n    }\r\n    if (!this.image_) {\r\n      this.initializeImage_();\r\n    }\r\n\r\n    this.imageState_ = ImageState.LOADING;\r\n    try {\r\n      /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\r\n    } catch (e) {\r\n      this.handleImageError_();\r\n    }\r\n    this.unlisten_ = listenImage(\r\n      this.image_,\r\n      this.handleImageLoad_.bind(this),\r\n      this.handleImageError_.bind(this)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @private\r\n   */\r\n  replaceColor_(pixelRatio) {\r\n    if (\r\n      !this.color_ ||\r\n      this.canvas_[pixelRatio] ||\r\n      this.imageState_ !== ImageState.LOADED\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const image = this.image_;\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = Math.ceil(image.width * pixelRatio);\r\n    canvas.height = Math.ceil(image.height * pixelRatio);\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.scale(pixelRatio, pixelRatio);\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    ctx.globalCompositeOperation = 'multiply';\r\n    ctx.fillStyle = asString(this.color_);\r\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\r\n\r\n    ctx.globalCompositeOperation = 'destination-in';\r\n    ctx.drawImage(image, 0, 0);\r\n\r\n    this.canvas_[pixelRatio] = canvas;\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    if (this.unlisten_) {\r\n      this.unlisten_();\r\n      this.unlisten_ = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\r\n * @param {string} src Src.\r\n * @param {import(\"../size.js\").Size} size Size.\r\n * @param {?string} crossOrigin Cross origin.\r\n * @param {import(\"../ImageState.js\").default} imageState Image state.\r\n * @param {import(\"../color.js\").Color} color Color.\r\n * @return {IconImage} Icon image.\r\n */\r\nexport function get(image, src, size, crossOrigin, imageState, color) {\r\n  let iconImage = iconImageCache.get(src, crossOrigin, color);\r\n  if (!iconImage) {\r\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\r\n    iconImageCache.set(src, crossOrigin, color, iconImage);\r\n  }\r\n  return iconImage;\r\n}\r\n\r\nexport default IconImage;\r\n", "/**\r\n * @module ol/style/Icon\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ImageStyle from './Image.js';\r\nimport {asArray} from '../color.js';\r\nimport {assert} from '../asserts.js';\r\nimport {get as getIconImage} from './IconImage.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\r\n * Anchor unit can be either a fraction of the icon size or in pixels.\r\n */\r\n\r\n/**\r\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\r\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\r\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\r\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the x value in pixels.\r\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\r\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\r\n * the y value in pixels.\r\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\r\n * the icon will be left as is.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\r\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\r\n * provided image must already be loaded. And in that case, it is required\r\n * to provide the size of the image, with the `imgSize` option.\r\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not.\r\n * The provided `imgSize` needs to match the actual size of the image.\r\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\r\n * Positive values will shift the icon right and up.\r\n * @property {number} [opacity=1] Opacity of the icon.\r\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\r\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\r\n * `top-left` or `top-right`.\r\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\r\n * sub-rectangle to use from the original (sprite) image.\r\n * @property {string} [src] Image source URI.\r\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set icon style for vector features.\r\n * @api\r\n */\r\nclass Icon extends ImageStyle {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\r\n\r\n    /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    const scale = options.scale !== undefined ? options.scale : 1;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    const rotateWithView =\r\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\r\n\r\n    super({\r\n      opacity: opacity,\r\n      rotation: rotation,\r\n      scale: scale,\r\n      displacement:\r\n        options.displacement !== undefined ? options.displacement : [0, 0],\r\n      rotateWithView: rotateWithView,\r\n      declutterMode: options.declutterMode,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.normalizedAnchor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.anchorOrigin_ =\r\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorXUnits_ =\r\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {IconAnchorUnits}\r\n     */\r\n    this.anchorYUnits_ =\r\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    const image = options.img !== undefined ? options.img : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.imgSize_ = options.imgSize;\r\n\r\n    /**\r\n     * @type {string|undefined}\r\n     */\r\n    let src = options.src;\r\n\r\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\r\n    assert(!image || (image && this.imgSize_), 5); // `imgSize` must be set when `image` is provided\r\n\r\n    if ((src === undefined || src.length === 0) && image) {\r\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\r\n    }\r\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\r\n\r\n    // `width` or `height` cannot be provided together with `scale`\r\n    assert(\r\n      !(\r\n        (options.width !== undefined || options.height !== undefined) &&\r\n        options.scale !== undefined\r\n      ),\r\n      69\r\n    );\r\n\r\n    /**\r\n     * @type {import(\"../ImageState.js\").default}\r\n     */\r\n    const imageState =\r\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color}\r\n     */\r\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./IconImage.js\").default}\r\n     */\r\n    this.iconImage_ = getIconImage(\r\n      image,\r\n      /** @type {string} */ (src),\r\n      this.imgSize_ !== undefined ? this.imgSize_ : null,\r\n      this.crossOrigin_,\r\n      imageState,\r\n      this.color_\r\n    );\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\r\n    /**\r\n     * @private\r\n     * @type {IconOrigin}\r\n     */\r\n    this.offsetOrigin_ =\r\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>}\r\n     */\r\n    this.origin_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.size_ = options.size !== undefined ? options.size : null;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     */\r\n    this.height_ = options.height;\r\n\r\n    /**\r\n     * Recalculate the scale if width or height were given.\r\n     */\r\n    if (this.width_ !== undefined || this.height_ !== undefined) {\r\n      const image = this.getImage(1);\r\n      const setScale = () => {\r\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\r\n      };\r\n      if (image.width > 0) {\r\n        this.updateScaleFromWidthAndHeight(this.width_, this.height_);\r\n      } else {\r\n        image.addEventListener('load', setScale);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\r\n   * @return {Icon} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let scale = this.getScale();\r\n    scale = Array.isArray(scale) ? scale.slice() : scale;\r\n    // if either width or height are defined, do not pass scale.\r\n    if (this.width_ !== undefined || this.height_ !== undefined) {\r\n      scale = undefined;\r\n    }\r\n    return new Icon({\r\n      anchor: this.anchor_.slice(),\r\n      anchorOrigin: this.anchorOrigin_,\r\n      anchorXUnits: this.anchorXUnits_,\r\n      anchorYUnits: this.anchorYUnits_,\r\n      color:\r\n        this.color_ && this.color_.slice\r\n          ? this.color_.slice()\r\n          : this.color_ || undefined,\r\n      crossOrigin: this.crossOrigin_,\r\n      imgSize: this.imgSize_,\r\n      offset: this.offset_.slice(),\r\n      offsetOrigin: this.offsetOrigin_,\r\n      opacity: this.getOpacity(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      rotation: this.getRotation(),\r\n      scale: scale,\r\n      size: this.size_ !== null ? this.size_.slice() : undefined,\r\n      src: this.getSrc(),\r\n      displacement: this.getDisplacement().slice(),\r\n      declutterMode: this.getDeclutterMode(),\r\n      width: this.width_,\r\n      height: this.height_,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set the scale of the Icon by calculating it from given width and height and the\r\n   * width and height of the image.\r\n   *\r\n   * @private\r\n   * @param {number} width The width.\r\n   * @param {number} height The height.\r\n   */\r\n  updateScaleFromWidthAndHeight(width, height) {\r\n    const image = this.getImage(1);\r\n    if (width !== undefined && height !== undefined) {\r\n      super.setScale([width / image.width, height / image.height]);\r\n    } else if (width !== undefined) {\r\n      super.setScale([width / image.width, width / image.width]);\r\n    } else if (height !== undefined) {\r\n      super.setScale([height / image.height, height / image.height]);\r\n    } else {\r\n      super.setScale([1, 1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the anchor point in pixels. The anchor determines the center point for the\r\n   * symbolizer.\r\n   * @return {Array<number>} Anchor.\r\n   * @api\r\n   */\r\n  getAnchor() {\r\n    let anchor = this.normalizedAnchor_;\r\n    if (!anchor) {\r\n      anchor = this.anchor_;\r\n      const size = this.getSize();\r\n      if (\r\n        this.anchorXUnits_ == 'fraction' ||\r\n        this.anchorYUnits_ == 'fraction'\r\n      ) {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        anchor = this.anchor_.slice();\r\n        if (this.anchorXUnits_ == 'fraction') {\r\n          anchor[0] *= size[0];\r\n        }\r\n        if (this.anchorYUnits_ == 'fraction') {\r\n          anchor[1] *= size[1];\r\n        }\r\n      }\r\n\r\n      if (this.anchorOrigin_ != 'top-left') {\r\n        if (!size) {\r\n          return null;\r\n        }\r\n        if (anchor === this.anchor_) {\r\n          anchor = this.anchor_.slice();\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'top-right' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[0] = -anchor[0] + size[0];\r\n        }\r\n        if (\r\n          this.anchorOrigin_ == 'bottom-left' ||\r\n          this.anchorOrigin_ == 'bottom-right'\r\n        ) {\r\n          anchor[1] = -anchor[1] + size[1];\r\n        }\r\n      }\r\n      this.normalizedAnchor_ = anchor;\r\n    }\r\n    const displacement = this.getDisplacement();\r\n    const scale = this.getScaleArray();\r\n    // anchor is scaled by renderer but displacement should not be scaled\r\n    // so divide by scale here\r\n    return [\r\n      anchor[0] - displacement[0] / scale[0],\r\n      anchor[1] + displacement[1] / scale[1],\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Set the anchor point. The anchor determines the center point for the\r\n   * symbolizer.\r\n   *\r\n   * @param {Array<number>} anchor Anchor.\r\n   * @api\r\n   */\r\n  setAnchor(anchor) {\r\n    this.anchor_ = anchor;\r\n    this.normalizedAnchor_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get the icon color.\r\n   * @return {import(\"../color.js\").Color} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the image icon.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\r\n   * @api\r\n   */\r\n  getImage(pixelRatio) {\r\n    return this.iconImage_.getImage(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * Get the pixel ratio.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} The pixel ratio of the image.\r\n   * @api\r\n   */\r\n  getPixelRatio(pixelRatio) {\r\n    return this.iconImage_.getPixelRatio(pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   */\r\n  getImageSize() {\r\n    return this.iconImage_.getSize();\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../ImageState.js\").default} Image state.\r\n   */\r\n  getImageState() {\r\n    return this.iconImage_.getImageState();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\r\n   */\r\n  getHitDetectionImage() {\r\n    return this.iconImage_.getHitDetectionImage();\r\n  }\r\n\r\n  /**\r\n   * Get the origin of the symbolizer.\r\n   * @return {Array<number>} Origin.\r\n   * @api\r\n   */\r\n  getOrigin() {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    let offset = this.offset_;\r\n\r\n    if (this.offsetOrigin_ != 'top-left') {\r\n      const size = this.getSize();\r\n      const iconImageSize = this.iconImage_.getSize();\r\n      if (!size || !iconImageSize) {\r\n        return null;\r\n      }\r\n      offset = offset.slice();\r\n      if (\r\n        this.offsetOrigin_ == 'top-right' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\r\n      }\r\n      if (\r\n        this.offsetOrigin_ == 'bottom-left' ||\r\n        this.offsetOrigin_ == 'bottom-right'\r\n      ) {\r\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\r\n      }\r\n    }\r\n    this.origin_ = offset;\r\n    return this.origin_;\r\n  }\r\n\r\n  /**\r\n   * Get the image URL.\r\n   * @return {string|undefined} Image src.\r\n   * @api\r\n   */\r\n  getSrc() {\r\n    return this.iconImage_.getSrc();\r\n  }\r\n\r\n  /**\r\n   * Get the size of the icon (in pixels).\r\n   * @return {import(\"../size.js\").Size} Image size.\r\n   * @api\r\n   */\r\n  getSize() {\r\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\r\n  }\r\n\r\n  /**\r\n   * Get the width of the icon (in pixels).\r\n   * @return {number} Icon width (in pixels).\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Get the height of the icon (in pixels).\r\n   * @return {number} Icon height (in pixels).\r\n   * @api\r\n   */\r\n  getHeight() {\r\n    return this.height_;\r\n  }\r\n\r\n  /**\r\n   * Set the width of the icon in pixels.\r\n   *\r\n   * @param {number} width The width to set.\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n    this.updateScaleFromWidthAndHeight(width, this.height_);\r\n  }\r\n\r\n  /**\r\n   * Set the height of the icon in pixels.\r\n   *\r\n   * @param {number} height The height to set.\r\n   */\r\n  setHeight(height) {\r\n    this.height_ = height;\r\n    this.updateScaleFromWidthAndHeight(this.width_, height);\r\n  }\r\n\r\n  /**\r\n   * Set the scale and updates the width and height correspondingly.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size} scale Scale.\r\n   * @override\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    super.setScale(scale);\r\n    const image = this.getImage(1);\r\n    if (image) {\r\n      const widthScale = Array.isArray(scale) ? scale[0] : scale;\r\n      if (widthScale !== undefined) {\r\n        this.width_ = widthScale * image.width;\r\n      }\r\n      const heightScale = Array.isArray(scale) ? scale[1] : scale;\r\n      if (heightScale !== undefined) {\r\n        this.height_ = heightScale * image.height;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  listenImageChange(listener) {\r\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * When rendering a feature with an icon style, the vector renderer will\r\n   * automatically call this method. However, you might want to call this\r\n   * method yourself for preloading or other purposes.\r\n   * @api\r\n   */\r\n  load() {\r\n    this.iconImage_.load();\r\n  }\r\n\r\n  /**\r\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\r\n   */\r\n  unlistenImageChange(listener) {\r\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\r\n  }\r\n}\r\n\r\nexport default Icon;\r\n", "/**\r\n * @module ol/style/Stroke\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\r\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\r\n * Default null; if null, the Canvas/renderer default black will be used.\r\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\r\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\r\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\r\n * @property {number} [lineDashOffset=0] Line dash offset.\r\n * @property {number} [miterLimit=10] Miter limit.\r\n * @property {number} [width] Width.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set stroke style for vector features.\r\n * Note that the defaults given are the Canvas defaults, which will be used if\r\n * option is not defined. The `get` functions return whatever was entered in\r\n * the options; they will not return the default.\r\n * @api\r\n */\r\nclass Stroke {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\r\n     */\r\n    this.color_ = options.color !== undefined ? options.color : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineCap|undefined}\r\n     */\r\n    this.lineCap_ = options.lineCap;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.lineDashOffset_ = options.lineDashOffset;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasLineJoin|undefined}\r\n     */\r\n    this.lineJoin_ = options.lineJoin;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.miterLimit_ = options.miterLimit;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.width_ = options.width;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Stroke} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const color = this.getColor();\r\n    return new Stroke({\r\n      color: Array.isArray(color) ? color.slice() : color || undefined,\r\n      lineCap: this.getLineCap(),\r\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\r\n      lineDashOffset: this.getLineDashOffset(),\r\n      lineJoin: this.getLineJoin(),\r\n      miterLimit: this.getMiterLimit(),\r\n      width: this.getWidth(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the stroke color.\r\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\r\n   * @api\r\n   */\r\n  getColor() {\r\n    return this.color_;\r\n  }\r\n\r\n  /**\r\n   * Get the line cap type for the stroke.\r\n   * @return {CanvasLineCap|undefined} Line cap.\r\n   * @api\r\n   */\r\n  getLineCap() {\r\n    return this.lineCap_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash style for the stroke.\r\n   * @return {Array<number>|null} Line dash.\r\n   * @api\r\n   */\r\n  getLineDash() {\r\n    return this.lineDash_;\r\n  }\r\n\r\n  /**\r\n   * Get the line dash offset for the stroke.\r\n   * @return {number|undefined} Line dash offset.\r\n   * @api\r\n   */\r\n  getLineDashOffset() {\r\n    return this.lineDashOffset_;\r\n  }\r\n\r\n  /**\r\n   * Get the line join type for the stroke.\r\n   * @return {CanvasLineJoin|undefined} Line join.\r\n   * @api\r\n   */\r\n  getLineJoin() {\r\n    return this.lineJoin_;\r\n  }\r\n\r\n  /**\r\n   * Get the miter limit for the stroke.\r\n   * @return {number|undefined} Miter limit.\r\n   * @api\r\n   */\r\n  getMiterLimit() {\r\n    return this.miterLimit_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke width.\r\n   * @return {number|undefined} Width.\r\n   * @api\r\n   */\r\n  getWidth() {\r\n    return this.width_;\r\n  }\r\n\r\n  /**\r\n   * Set the color.\r\n   *\r\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\r\n   * @api\r\n   */\r\n  setColor(color) {\r\n    this.color_ = color;\r\n  }\r\n\r\n  /**\r\n   * Set the line cap.\r\n   *\r\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\r\n   * @api\r\n   */\r\n  setLineCap(lineCap) {\r\n    this.lineCap_ = lineCap;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash.\r\n   *\r\n   * @param {Array<number>|null} lineDash Line dash.\r\n   * @api\r\n   */\r\n  setLineDash(lineDash) {\r\n    this.lineDash_ = lineDash;\r\n  }\r\n\r\n  /**\r\n   * Set the line dash offset.\r\n   *\r\n   * @param {number|undefined} lineDashOffset Line dash offset.\r\n   * @api\r\n   */\r\n  setLineDashOffset(lineDashOffset) {\r\n    this.lineDashOffset_ = lineDashOffset;\r\n  }\r\n\r\n  /**\r\n   * Set the line join.\r\n   *\r\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\r\n   * @api\r\n   */\r\n  setLineJoin(lineJoin) {\r\n    this.lineJoin_ = lineJoin;\r\n  }\r\n\r\n  /**\r\n   * Set the miter limit.\r\n   *\r\n   * @param {number|undefined} miterLimit Miter limit.\r\n   * @api\r\n   */\r\n  setMiterLimit(miterLimit) {\r\n    this.miterLimit_ = miterLimit;\r\n  }\r\n\r\n  /**\r\n   * Set the width.\r\n   *\r\n   * @param {number|undefined} width Width.\r\n   * @api\r\n   */\r\n  setWidth(width) {\r\n    this.width_ = width;\r\n  }\r\n}\r\n\r\nexport default Stroke;\r\n", "/**\r\n * @module ol/style/Style\r\n */\r\n\r\nimport CircleStyle from './Circle.js';\r\nimport Fill from './Fill.js';\r\nimport Stroke from './Stroke.js';\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\r\n * representing the view's resolution. The function should return a\r\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\r\n * vector layer can be styled. If the function returns `undefined`, the\r\n * feature will not be rendered.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\r\n */\r\n\r\n/**\r\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\r\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\r\n */\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\r\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\r\n *\r\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\r\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\r\n */\r\n\r\n/**\r\n * Custom renderer function. Takes two arguments:\r\n *\r\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\r\n * 2. The {@link module:ol/render~State} of the layer renderer.\r\n *\r\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>),import(\"../render.js\").State): void} RenderFunction\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\r\n * or function returning a geometry to render for this style.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\r\n * @property {import(\"./Image.js\").default} [image] Image style.\r\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\r\n * ignored, and the provided function will be called with each render frame for each geometry.\r\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\r\n * in hit detection rendering.\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Text.js\").default} [text] Text style.\r\n * @property {number} [zIndex] Z index.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Container for vector feature rendering styles. Any changes made to the style\r\n * or its children through `set*()` methods will not take effect until the\r\n * feature or layer that uses the style is re-rendered.\r\n *\r\n * ## Feature styles\r\n *\r\n * If no style is defined, the following default style is used:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const fill = new Fill({\r\n *    color: 'rgba(255,255,255,0.4)',\r\n *  });\r\n *  const stroke = new Stroke({\r\n *    color: '#3399CC',\r\n *    width: 1.25,\r\n *  });\r\n *  const styles = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        fill: fill,\r\n *        stroke: stroke,\r\n *        radius: 5,\r\n *      }),\r\n *      fill: fill,\r\n *      stroke: stroke,\r\n *    }),\r\n *  ];\r\n * ```\r\n *\r\n * A separate editing style has the following defaults:\r\n * ```js\r\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\r\n *\r\n *  const styles = {};\r\n *  const white = [255, 255, 255, 1];\r\n *  const blue = [0, 153, 255, 1];\r\n *  const width = 3;\r\n *  styles['Polygon'] = [\r\n *    new Style({\r\n *      fill: new Fill({\r\n *        color: [255, 255, 255, 0.5],\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiPolygon'] =\r\n *      styles['Polygon'];\r\n *  styles['LineString'] = [\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: white,\r\n *        width: width + 2,\r\n *      }),\r\n *    }),\r\n *    new Style({\r\n *      stroke: new Stroke({\r\n *        color: blue,\r\n *        width: width,\r\n *      }),\r\n *    }),\r\n *  ];\r\n *  styles['MultiLineString'] = styles['LineString'];\r\n *\r\n *  styles['Circle'] = styles['Polygon'].concat(\r\n *    styles['LineString']\r\n *  );\r\n *\r\n *  styles['Point'] = [\r\n *    new Style({\r\n *      image: new Circle({\r\n *        radius: width * 2,\r\n *        fill: new Fill({\r\n *          color: blue,\r\n *        }),\r\n *        stroke: new Stroke({\r\n *          color: white,\r\n *          width: width / 2,\r\n *        }),\r\n *      }),\r\n *      zIndex: Infinity,\r\n *    }),\r\n *  ];\r\n *  styles['MultiPoint'] =\r\n *      styles['Point'];\r\n *  styles['GeometryCollection'] =\r\n *      styles['Polygon'].concat(\r\n *          styles['LineString'],\r\n *          styles['Point']\r\n *      );\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Style {\r\n  /**\r\n   * @param {Options} [options] Style options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n     */\r\n    this.geometry_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!GeometryFunction}\r\n     */\r\n    this.geometryFunction_ = defaultGeometryFunction;\r\n\r\n    if (options.geometry !== undefined) {\r\n      this.setGeometry(options.geometry);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.fill_ = options.fill !== undefined ? options.fill : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Image.js\").default}\r\n     */\r\n    this.image_ = options.image !== undefined ? options.image : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RenderFunction|null}\r\n     */\r\n    this.hitDetectionRenderer_ =\r\n      options.hitDetectionRenderer !== undefined\r\n        ? options.hitDetectionRenderer\r\n        : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Text.js\").default}\r\n     */\r\n    this.text_ = options.text !== undefined ? options.text : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zIndex_ = options.zIndex;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Style} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    let geometry = this.getGeometry();\r\n    if (geometry && typeof geometry === 'object') {\r\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n        geometry\r\n      ).clone();\r\n    }\r\n    return new Style({\r\n      geometry: geometry,\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      image: this.getImage() ? this.getImage().clone() : undefined,\r\n      renderer: this.getRenderer(),\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      text: this.getText() ? this.getText().clone() : undefined,\r\n      zIndex: this.getZIndex(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setRenderer} or the `renderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getRenderer() {\r\n    return this.renderer_;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\r\n   * and `image` options of the style will be ignored.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setRenderer(renderer) {\r\n    this.renderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Sets a custom renderer function for this style used\r\n   * in hit detection.\r\n   * @param {RenderFunction|null} renderer Custom renderer function.\r\n   * @api\r\n   */\r\n  setHitDetectionRenderer(renderer) {\r\n    this.hitDetectionRenderer_ = renderer;\r\n  }\r\n\r\n  /**\r\n   * Get the custom renderer function that was configured with\r\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\r\n   * @return {RenderFunction|null} Custom renderer function.\r\n   * @api\r\n   */\r\n  getHitDetectionRenderer() {\r\n    return this.hitDetectionRenderer_;\r\n  }\r\n\r\n  /**\r\n   * Get the geometry to be rendered.\r\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\r\n   * Feature property or geometry or function that returns the geometry that will\r\n   * be rendered with this style.\r\n   * @api\r\n   */\r\n  getGeometry() {\r\n    return this.geometry_;\r\n  }\r\n\r\n  /**\r\n   * Get the function used to generate a geometry for rendering.\r\n   * @return {!GeometryFunction} Function that is called with a feature\r\n   * and returns the geometry to render instead of the feature's geometry.\r\n   * @api\r\n   */\r\n  getGeometryFunction() {\r\n    return this.geometryFunction_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Set the fill style.\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Get the image style.\r\n   * @return {import(\"./Image.js\").default} Image style.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Set the image style.\r\n   * @param {import(\"./Image.js\").default} image Image style.\r\n   * @api\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Set the stroke style.\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Get the text style.\r\n   * @return {import(\"./Text.js\").default} Text style.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Set the text style.\r\n   * @param {import(\"./Text.js\").default} text Text style.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Get the z-index for the style.\r\n   * @return {number|undefined} ZIndex.\r\n   * @api\r\n   */\r\n  getZIndex() {\r\n    return this.zIndex_;\r\n  }\r\n\r\n  /**\r\n   * Set a geometry that is rendered instead of the feature's geometry.\r\n   *\r\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\r\n   *     Feature property or geometry or function returning a geometry to render\r\n   *     for this style.\r\n   * @api\r\n   */\r\n  setGeometry(geometry) {\r\n    if (typeof geometry === 'function') {\r\n      this.geometryFunction_ = geometry;\r\n    } else if (typeof geometry === 'string') {\r\n      this.geometryFunction_ = function (feature) {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\r\n          feature.get(geometry)\r\n        );\r\n      };\r\n    } else if (!geometry) {\r\n      this.geometryFunction_ = defaultGeometryFunction;\r\n    } else if (geometry !== undefined) {\r\n      this.geometryFunction_ = function () {\r\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\r\n      };\r\n    }\r\n    this.geometry_ = geometry;\r\n  }\r\n\r\n  /**\r\n   * Set the z-index.\r\n   *\r\n   * @param {number|undefined} zIndex ZIndex.\r\n   * @api\r\n   */\r\n  setZIndex(zIndex) {\r\n    this.zIndex_ = zIndex;\r\n  }\r\n}\r\n\r\n/**\r\n * Convert the provided object into a style function.  Functions passed through\r\n * unchanged.  Arrays of Style or single style objects wrapped in a\r\n * new style function.\r\n * @param {StyleFunction|Array<Style>|Style} obj\r\n *     A style function, a single style, or an array of styles.\r\n * @return {StyleFunction} A style function.\r\n */\r\nexport function toFunction(obj) {\r\n  let styleFunction;\r\n\r\n  if (typeof obj === 'function') {\r\n    styleFunction = obj;\r\n  } else {\r\n    /**\r\n     * @type {Array<Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(typeof (/** @type {?} */ (obj).getZIndex) === 'function', 41); // Expected an `Style` or an array of `Style`\r\n      const style = /** @type {Style} */ (obj);\r\n      styles = [style];\r\n    }\r\n    styleFunction = function () {\r\n      return styles;\r\n    };\r\n  }\r\n  return styleFunction;\r\n}\r\n\r\n/**\r\n * @type {Array<Style>|null}\r\n */\r\nlet defaultStyles = null;\r\n\r\n/**\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<Style>} Style.\r\n */\r\nexport function createDefaultStyle(feature, resolution) {\r\n  // We don't use an immediately-invoked function\r\n  // and a closure so we don't get an error at script evaluation time in\r\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\r\n  // canvas.getContext('2d') at construction time, which will cause an.error\r\n  // in such browsers.)\r\n  if (!defaultStyles) {\r\n    const fill = new Fill({\r\n      color: 'rgba(255,255,255,0.4)',\r\n    });\r\n    const stroke = new Stroke({\r\n      color: '#3399CC',\r\n      width: 1.25,\r\n    });\r\n    defaultStyles = [\r\n      new Style({\r\n        image: new CircleStyle({\r\n          fill: fill,\r\n          stroke: stroke,\r\n          radius: 5,\r\n        }),\r\n        fill: fill,\r\n        stroke: stroke,\r\n      }),\r\n    ];\r\n  }\r\n  return defaultStyles;\r\n}\r\n\r\n/**\r\n * Default styles for editing features.\r\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\r\n */\r\nexport function createEditingStyle() {\r\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\r\n  const styles = {};\r\n  const white = [255, 255, 255, 1];\r\n  const blue = [0, 153, 255, 1];\r\n  const width = 3;\r\n  styles['Polygon'] = [\r\n    new Style({\r\n      fill: new Fill({\r\n        color: [255, 255, 255, 0.5],\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiPolygon'] = styles['Polygon'];\r\n\r\n  styles['LineString'] = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: white,\r\n        width: width + 2,\r\n      }),\r\n    }),\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: blue,\r\n        width: width,\r\n      }),\r\n    }),\r\n  ];\r\n  styles['MultiLineString'] = styles['LineString'];\r\n\r\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\r\n\r\n  styles['Point'] = [\r\n    new Style({\r\n      image: new CircleStyle({\r\n        radius: width * 2,\r\n        fill: new Fill({\r\n          color: blue,\r\n        }),\r\n        stroke: new Stroke({\r\n          color: white,\r\n          width: width / 2,\r\n        }),\r\n      }),\r\n      zIndex: Infinity,\r\n    }),\r\n  ];\r\n  styles['MultiPoint'] = styles['Point'];\r\n\r\n  styles['GeometryCollection'] = styles['Polygon'].concat(\r\n    styles['LineString'],\r\n    styles['Point']\r\n  );\r\n\r\n  return styles;\r\n}\r\n\r\n/**\r\n * Function that is called with a feature and returns its default geometry.\r\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\r\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\r\n */\r\nfunction defaultGeometryFunction(feature) {\r\n  return feature.getGeometry();\r\n}\r\n\r\nexport default Style;\r\n", "/**\r\n * @module ol/style/Text\r\n */\r\nimport Fill from './Fill.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {'point' | 'line'} TextPlacement\r\n * Default text placement is `'point'`. Note that\r\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\r\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\r\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\r\n */\r\n\r\n/**\r\n * @typedef {'left' | 'center' | 'right'} TextJustify\r\n */\r\n\r\n/**\r\n * The default fill color to use if no fill was set at construction time; a\r\n * blackish `#333`.\r\n *\r\n * @const {string}\r\n */\r\nconst DEFAULT_FILL_COLOR = '#333';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [font] Font style as CSS `font` value, see:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\r\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\r\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\r\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\r\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\r\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\r\n * the width of the polygon at the label position or the length of the path that it follows.\r\n * @property {TextPlacement} [placement='point'] Text placement.\r\n * @property {number} [repeat] Repeat interval in pixels. When set, the text will be repeated at this interval. Only available\r\n * when `placement` is set to `'line'`. Overrides 'textAlign'.\r\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\r\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\r\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\r\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\r\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\r\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\r\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\r\n * **Note:** Rich text is not supported for the immediate rendering API.\r\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\r\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\r\n * placement where `maxAngle` is not exceeded.\r\n * @property {TextJustify} [justify] Text justification within the text box.\r\n * If not set, text is justified towards the `textAlign` anchor.\r\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\r\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\r\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\r\n * `'hanging'`, `'ideographic'`.\r\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\r\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\r\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\r\n * `'point'`. Default is no fill.\r\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\r\n * is `'point'`. Default is no stroke.\r\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\r\n * values in the array is `[top, right, bottom, left]`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Set text style for vector features.\r\n * @api\r\n */\r\nclass Text {\r\n  /**\r\n   * @param {Options} [options] Options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.font_ = options.font;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.rotation_ = options.rotation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean|undefined}\r\n     */\r\n    this.rotateWithView_ = options.rotateWithView;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size|undefined}\r\n     */\r\n    this.scale_ = options.scale;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|Array<string>|undefined}\r\n     */\r\n    this.text_ = options.text;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextAlign|undefined}\r\n     */\r\n    this.textAlign_ = options.textAlign;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextJustify|undefined}\r\n     */\r\n    this.justify_ = options.justify;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.repeat_ = options.repeat;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasTextBaseline|undefined}\r\n     */\r\n    this.textBaseline_ = options.textBaseline;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.fill_ =\r\n      options.fill !== undefined\r\n        ? options.fill\r\n        : new Fill({color: DEFAULT_FILL_COLOR});\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxAngle_ =\r\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TextPlacement}\r\n     */\r\n    this.placement_ =\r\n      options.placement !== undefined ? options.placement : 'point';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overflow_ = !!options.overflow;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Fill.js\").default}\r\n     */\r\n    this.backgroundFill_ = options.backgroundFill\r\n      ? options.backgroundFill\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Stroke.js\").default}\r\n     */\r\n    this.backgroundStroke_ = options.backgroundStroke\r\n      ? options.backgroundStroke\r\n      : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.padding_ = options.padding === undefined ? null : options.padding;\r\n  }\r\n\r\n  /**\r\n   * Clones the style.\r\n   * @return {Text} The cloned style.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const scale = this.getScale();\r\n    return new Text({\r\n      font: this.getFont(),\r\n      placement: this.getPlacement(),\r\n      repeat: this.getRepeat(),\r\n      maxAngle: this.getMaxAngle(),\r\n      overflow: this.getOverflow(),\r\n      rotation: this.getRotation(),\r\n      rotateWithView: this.getRotateWithView(),\r\n      scale: Array.isArray(scale) ? scale.slice() : scale,\r\n      text: this.getText(),\r\n      textAlign: this.getTextAlign(),\r\n      justify: this.getJustify(),\r\n      textBaseline: this.getTextBaseline(),\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      offsetX: this.getOffsetX(),\r\n      offsetY: this.getOffsetY(),\r\n      backgroundFill: this.getBackgroundFill()\r\n        ? this.getBackgroundFill().clone()\r\n        : undefined,\r\n      backgroundStroke: this.getBackgroundStroke()\r\n        ? this.getBackgroundStroke().clone()\r\n        : undefined,\r\n      padding: this.getPadding() || undefined,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the `overflow` configuration.\r\n   * @return {boolean} Let text overflow the length of the path they follow.\r\n   * @api\r\n   */\r\n  getOverflow() {\r\n    return this.overflow_;\r\n  }\r\n\r\n  /**\r\n   * Get the font name.\r\n   * @return {string|undefined} Font.\r\n   * @api\r\n   */\r\n  getFont() {\r\n    return this.font_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum angle between adjacent characters.\r\n   * @return {number} Angle in radians.\r\n   * @api\r\n   */\r\n  getMaxAngle() {\r\n    return this.maxAngle_;\r\n  }\r\n\r\n  /**\r\n   * Get the label placement.\r\n   * @return {TextPlacement} Text placement.\r\n   * @api\r\n   */\r\n  getPlacement() {\r\n    return this.placement_;\r\n  }\r\n\r\n  /**\r\n   * Get the repeat interval of the text.\r\n   * @return {number|undefined} Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  getRepeat() {\r\n    return this.repeat_;\r\n  }\r\n\r\n  /**\r\n   * Get the x-offset for the text.\r\n   * @return {number} Horizontal text offset.\r\n   * @api\r\n   */\r\n  getOffsetX() {\r\n    return this.offsetX_;\r\n  }\r\n\r\n  /**\r\n   * Get the y-offset for the text.\r\n   * @return {number} Vertical text offset.\r\n   * @api\r\n   */\r\n  getOffsetY() {\r\n    return this.offsetY_;\r\n  }\r\n\r\n  /**\r\n   * Get the fill style for the text.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getFill() {\r\n    return this.fill_;\r\n  }\r\n\r\n  /**\r\n   * Determine whether the text rotates with the map.\r\n   * @return {boolean|undefined} Rotate with map.\r\n   * @api\r\n   */\r\n  getRotateWithView() {\r\n    return this.rotateWithView_;\r\n  }\r\n\r\n  /**\r\n   * Get the text rotation.\r\n   * @return {number|undefined} Rotation.\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return this.rotation_;\r\n  }\r\n\r\n  /**\r\n   * Get the text scale.\r\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\r\n   * @api\r\n   */\r\n  getScale() {\r\n    return this.scale_;\r\n  }\r\n\r\n  /**\r\n   * Get the symbolizer scale array.\r\n   * @return {import(\"../size.js\").Size} Scale array.\r\n   */\r\n  getScaleArray() {\r\n    return this.scaleArray_;\r\n  }\r\n\r\n  /**\r\n   * Get the stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getStroke() {\r\n    return this.stroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the text to be rendered.\r\n   * @return {string|Array<string>|undefined} Text.\r\n   * @api\r\n   */\r\n  getText() {\r\n    return this.text_;\r\n  }\r\n\r\n  /**\r\n   * Get the text alignment.\r\n   * @return {CanvasTextAlign|undefined} Text align.\r\n   * @api\r\n   */\r\n  getTextAlign() {\r\n    return this.textAlign_;\r\n  }\r\n\r\n  /**\r\n   * Get the justification.\r\n   * @return {TextJustify|undefined} Justification.\r\n   * @api\r\n   */\r\n  getJustify() {\r\n    return this.justify_;\r\n  }\r\n\r\n  /**\r\n   * Get the text baseline.\r\n   * @return {CanvasTextBaseline|undefined} Text baseline.\r\n   * @api\r\n   */\r\n  getTextBaseline() {\r\n    return this.textBaseline_;\r\n  }\r\n\r\n  /**\r\n   * Get the background fill style for the text.\r\n   * @return {import(\"./Fill.js\").default} Fill style.\r\n   * @api\r\n   */\r\n  getBackgroundFill() {\r\n    return this.backgroundFill_;\r\n  }\r\n\r\n  /**\r\n   * Get the background stroke style for the text.\r\n   * @return {import(\"./Stroke.js\").default} Stroke style.\r\n   * @api\r\n   */\r\n  getBackgroundStroke() {\r\n    return this.backgroundStroke_;\r\n  }\r\n\r\n  /**\r\n   * Get the padding for the text.\r\n   * @return {Array<number>|null} Padding.\r\n   * @api\r\n   */\r\n  getPadding() {\r\n    return this.padding_;\r\n  }\r\n\r\n  /**\r\n   * Set the `overflow` property.\r\n   *\r\n   * @param {boolean} overflow Let text overflow the path that it follows.\r\n   * @api\r\n   */\r\n  setOverflow(overflow) {\r\n    this.overflow_ = overflow;\r\n  }\r\n\r\n  /**\r\n   * Set the font.\r\n   *\r\n   * @param {string|undefined} font Font.\r\n   * @api\r\n   */\r\n  setFont(font) {\r\n    this.font_ = font;\r\n  }\r\n\r\n  /**\r\n   * Set the maximum angle between adjacent characters.\r\n   *\r\n   * @param {number} maxAngle Angle in radians.\r\n   * @api\r\n   */\r\n  setMaxAngle(maxAngle) {\r\n    this.maxAngle_ = maxAngle;\r\n  }\r\n\r\n  /**\r\n   * Set the x offset.\r\n   *\r\n   * @param {number} offsetX Horizontal text offset.\r\n   * @api\r\n   */\r\n  setOffsetX(offsetX) {\r\n    this.offsetX_ = offsetX;\r\n  }\r\n\r\n  /**\r\n   * Set the y offset.\r\n   *\r\n   * @param {number} offsetY Vertical text offset.\r\n   * @api\r\n   */\r\n  setOffsetY(offsetY) {\r\n    this.offsetY_ = offsetY;\r\n  }\r\n\r\n  /**\r\n   * Set the text placement.\r\n   *\r\n   * @param {TextPlacement} placement Placement.\r\n   * @api\r\n   */\r\n  setPlacement(placement) {\r\n    this.placement_ = placement;\r\n  }\r\n\r\n  /**\r\n   * Set the repeat interval of the text.\r\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\r\n   * @api\r\n   */\r\n  setRepeat(repeat) {\r\n    this.repeat_ = repeat;\r\n  }\r\n\r\n  /**\r\n   * Set whether to rotate the text with the view.\r\n   *\r\n   * @param {boolean} rotateWithView Rotate with map.\r\n   * @api\r\n   */\r\n  setRotateWithView(rotateWithView) {\r\n    this.rotateWithView_ = rotateWithView;\r\n  }\r\n\r\n  /**\r\n   * Set the fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\r\n  setFill(fill) {\r\n    this.fill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation.\r\n   *\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.rotation_ = rotation;\r\n  }\r\n\r\n  /**\r\n   * Set the scale.\r\n   *\r\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\r\n   * @api\r\n   */\r\n  setScale(scale) {\r\n    this.scale_ = scale;\r\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\r\n  }\r\n\r\n  /**\r\n   * Set the stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setStroke(stroke) {\r\n    this.stroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the text.\r\n   *\r\n   * @param {string|Array<string>|undefined} text Text.\r\n   * @api\r\n   */\r\n  setText(text) {\r\n    this.text_ = text;\r\n  }\r\n\r\n  /**\r\n   * Set the text alignment.\r\n   *\r\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\r\n   * @api\r\n   */\r\n  setTextAlign(textAlign) {\r\n    this.textAlign_ = textAlign;\r\n  }\r\n\r\n  /**\r\n   * Set the justification.\r\n   *\r\n   * @param {TextJustify|undefined} justify Justification.\r\n   * @api\r\n   */\r\n  setJustify(justify) {\r\n    this.justify_ = justify;\r\n  }\r\n\r\n  /**\r\n   * Set the text baseline.\r\n   *\r\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\r\n   * @api\r\n   */\r\n  setTextBaseline(textBaseline) {\r\n    this.textBaseline_ = textBaseline;\r\n  }\r\n\r\n  /**\r\n   * Set the background fill.\r\n   *\r\n   * @param {import(\"./Fill.js\").default} fill Fill style.\r\n   * @api\r\n   */\r\n  setBackgroundFill(fill) {\r\n    this.backgroundFill_ = fill;\r\n  }\r\n\r\n  /**\r\n   * Set the background stroke.\r\n   *\r\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\r\n   * @api\r\n   */\r\n  setBackgroundStroke(stroke) {\r\n    this.backgroundStroke_ = stroke;\r\n  }\r\n\r\n  /**\r\n   * Set the padding (`[top, right, bottom, left]`).\r\n   *\r\n   * @param {Array<number>|null} padding Padding.\r\n   * @api\r\n   */\r\n  setPadding(padding) {\r\n    this.padding_ = padding;\r\n  }\r\n}\r\n\r\nexport default Text;\r\n"],
  "mappings": "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",
  "names": ["image"]
}
